

mod Parque {

    //ERROR, no es un atributo público
   pub mod Juego {
   pub fn nombre() -> String {
      for n in 1..4 { // Recorre rango de 1:4
         println!("{ } ", n); // Únicamente se recorre ascendentemente
         } // Imprime 1 2 3
         println!("");
   println!("{}", Cine::empleados());
   println!("{}", Parque::Juego::nombre());//Instrucción aceptada
   return "Columpio".to_string();
   }
   }
}


fn funcion() -> i64 {
   let mut num = 0;
   Ddor();
   while num < 10 {
   num = num + 1;
   if num == 5 {
   return 5;
   }
   println!("No: {} ", num);
   }
   
   return 0;
   while true {
      println!("true"); // Imprime solamente una vez true
      break;
      }
      break;

   let mut num = 0;
while num < 10 {
num = num + 1;
if num == 5 {
continue;
}
println!("{ }", num); // Imprime 1234678910
}
}


pub fn darla_s() {
   let mut num = 0;
   while !completado {
      x = x - 3;
      println!("{}", x); // imprime 2-1-4-7-10
      if x % 5 == 0 {
      completado = true;
      }
      }
   if bandera {
      if bandera {
         println!("verdadero");
         }
      println!("verdadero");
   }
}

fn darla_s() {
   loop {
      println!("Itera por siempre!");
   }
   let result = loop {
      cont = cont + 1;
      if cont == 10 {
         break cont * 2;
      }
   };
   let mut num = 0;
   if x < 61 {
      println!("Reprobado con una nota de: {}", x);
      }
      else if x <= 61{
      println!("Aprobado con una nota de: {}", x);
      }
}

struct Personaje {
   nombre: String,
   edad: i64,
   descripcion: String
   }

fn main () {
   for valor in vector {
      println!("{:?}", arreglo[valor]);
   }
   for letra in ["perro", "gato", "tortuga"] {
      println!("{} es mi favorito, ", letra);
      //Imprime: perro es mi favorito, gato es mi favorito, tortuga es mi favorito,
      }
   let x= [4,6,3];
   let mut x : i64 = (3*5);
   let mut var1 : bool = true;
   var1 = 5/6*7;
   let y = "Hola"; //Correcto
   y = "Adiós";
   y = (6).to_string();
   funcion1(4,"Cadena");
   let mut x = suma(2,5,9);
   arr[2+3][2][1] = arr[2*8][2+5][a*0];
   println! ("lol","listo","loel",a,b [0]);

   let sum = 4+5;
   let res = 4-5;
   let div = 4/5;
   let mul = 4*5;
   let modu = 4%5;
   let exp1 = f64::powf(5.4 , 2.4);
   let exp2 = i64::pow(5,2);
   let string1: String = "hello".to_string();
   let string2: &str = "world";
   let string3 = string1 + string2;
   println!("{}", sum);
   println!("{}", res);
   println!("{}", div);
   println!("{}", mul);
   println!("{}", modu);
   println!("{}", exp1);
   println!("{}", exp2);
   println!("{}", string3);
   let mut vector = vec![1,2,3,4,5];
   let mut arr3: [[[i64; 4];2]; 2] = ["Hola",[sdf,d,[1,2,3]]];
   let arr2 = [
[ [ 1, 3, 5, 7], [ 9, 11, 13, 15] ],
[ [ 2, 4, 6, 8], [10, 12, 14, 16] ]
];
}

pub fn crear_tabla(mut _tabla: String, tamanio: usize) -> i64{
   println!("{}", exp2);
   
}
fn main() {
   let mut varmutable: i64 = 78;

   println!("IF");

   if varmutable > 50 {
       println!("Si sale :3");
   }else if true && (varmutable == 56) {
       println!("Me tengo que esforzar, ya casi :3");
   } else {
       println!("Aún no, pero se puede");
   }

   varmutable = 90;
   if varmutable > 0 {
       println!("Vamos por buen camino");
       if varmutable == 7 {
           println!("Aun no");
       } else if varmutable > 10 && varmutable < 100 {
           println!("Casi casi");
           if varmutable == 90 {
               println!("Excelente ");
               varmutable = 20000;
           }

       } else {
           println!("Sigo intentando");
       }
   }else if varmutable <= 3 {
       println!("Upss, nos pasamos");
       if true && (varmutable == 1) {
           println!("Nop, revisemos los ifs");
       } else if varmutable > 10 {
           println!("Nop, revisemos los ifs");
       } else {
           println!("Solo debemos revisar algunos ifs");
       }
   } else if varmutable != varmutable {
       println!("Upss, nos pasamos");
       if true && (varmutable == -1) {
           println!("Nop, revisemos los ifs");
       } else if varmutable > 10 {
           println!("Nop, revisemos los ifs");
       } else {
           println!("Solo debemos revisar algunos ifs");
       }
   }

   println!("El valor e la variable mutable es : {} y debería ser 20000", varmutable);
   if (varmutable == 20000){
       println!("Excelente, los ifs están correctos");
   }

   let cadena1: String = "imprimir".to_string();
   let aritmetica  = 7 - (5 + 10 * (2 + 4 * (5 + 2 * 3)) - 8 * 3 * 3) + 50 * (6 * 2);
   let booleana = true || false && true && (false || true) && false || (true || true);
   println!("{}", cadena1); // Imprime "imprimir"
   println!("{}", aritmetica); // Imprime 214

   // If's
   let a:i64 = 25;
   let b:i64 = 50;
   let c:i64 = 75;

   if booleana {
       println!("La suma de a + b es {}", a+b); // 75
   }


   if a > c || b < c {
       println!("Imprime");
   }else{
       println!("No imprime");
   }

   let cadena1: String = "Cadena uno".to_string();
   let cadena2: &str = "Cadena dos";
   let cadena3: String = cadena2.to_owned();
   println!("{}",cadena1);
   println!("{}",cadena2);
   println!("{}",cadena3);
   println!("----------------");
   println!("Nativas");

   let bflotante : f64 = 8 as f64;
   let cadenacopia: String = cadena1.clone();
   println!("Absoluto 1: {}", (-1.5 as i64).abs());
   println!("Absoluto 2: {}", (a).abs());
   println!("Raiz 1: {}",(4 as f64).sqrt());
   println!("Raiz 2: {}",bflotante.sqrt());
   println!("Cadena Copia: {}",cadenacopia);

}
