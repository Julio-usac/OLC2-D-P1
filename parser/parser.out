Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    MATCH
    VEC

Grammar

Rule 0     S' -> funciones
Rule 1     funciones -> funcion funciones
Rule 2     funciones -> funcion
Rule 3     funcion -> PUB FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER
Rule 4     funcion -> FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER
Rule 5     funcion -> PUB MODF ID LLAVEIZQ funciones LLAVEDER
Rule 6     funcion -> MODF ID LLAVEIZQ funciones LLAVEDER
Rule 7     funcion -> FN MAIN PARIZQ PARDER LLAVEIZQ instrucciones LLAVEDER
Rule 8     funcion -> STRUCT ID LLAVEIZQ liststruct LLAVEDER
Rule 9     parametros -> parametros2
Rule 10    parametros -> empty
Rule 11    parametros2 -> parametros2 COMA mutable ID DPT tipos
Rule 12    parametros2 -> mutable ID DPT tipos
Rule 13    liststruct -> liststruct COMA ID DPT tipos
Rule 14    liststruct -> ID DPT tipos
Rule 15    tipofun -> MENOS MAYOR tipos
Rule 16    tipofun -> empty
Rule 17    instrucciones -> instruccion instrucciones
Rule 18    instrucciones -> instruccion
Rule 19    instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA
Rule 20    instruccion -> ID listarreglo IGUAL logica PTCOMA
Rule 21    instruccion -> ID PARIZQ listexpr PARDER PTCOMA
Rule 22    instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA
Rule 23    instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse
Rule 24    instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER
Rule 25    instruccion -> RETURN logica PTCOMA
Rule 26    instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER
Rule 27    instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER
Rule 28    instruccion -> BREAK PTCOMA
Rule 29    instruccion -> CONTINUE PTCOMA
Rule 30    instruccion -> BREAK logica PTCOMA
Rule 31    instruccionesexp -> instruccion instruccionesexpfin
Rule 32    instruccionesexp -> instruccionesexpfin
Rule 33    instruccionesexpfin -> instruccionesexp
Rule 34    instruccionesexpfin -> expresion
Rule 35    instruccionesexpfin -> <empty>
Rule 36    instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER
Rule 37    instrif -> IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
Rule 38    instrelse -> ELSE LLAVEIZQ instruccionesexp LLAVEDER
Rule 39    instrelse -> ELSE IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
Rule 40    instrelse -> empty
Rule 41    opcionfor -> logica
Rule 42    opcionfor -> ENTERO PT PT logica
Rule 43    opcionfor -> empty
Rule 44    unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER
Rule 45    unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse
Rule 46    unelse -> empty
Rule 47    logica -> logica AND logica
Rule 48    logica -> logica OR logica
Rule 49    logica -> NOT logica
Rule 50    logica -> rel
Rule 51    rel -> rel IGUAL IGUAL rel
Rule 52    rel -> rel MENOR rel
Rule 53    rel -> rel MAYOR rel
Rule 54    rel -> rel MEIGUAL rel
Rule 55    rel -> rel MAIGUAL rel
Rule 56    rel -> rel DIS rel
Rule 57    rel -> expresion
Rule 58    mutable -> MUT
Rule 59    mutable -> empty
Rule 60    pyc -> DPT
Rule 61    pyc -> empty
Rule 62    arrtipos -> tipos
Rule 63    arrtipos -> arreglos
Rule 64    arrtipos -> empty
Rule 65    vectores -> tipos
Rule 66    vectores -> arreglos
Rule 67    vectores -> empty
Rule 68    arreglos -> CORIZQ arreglos PTCOMA ENTERO CORDER
Rule 69    arreglos -> tipos
Rule 70    arreglos -> ID
Rule 71    tipos -> I64
Rule 72    tipos -> F64
Rule 73    tipos -> BOOL
Rule 74    tipos -> CHAR
Rule 75    tipos -> STRING
Rule 76    tipos -> AMP STR
Rule 77    tipos -> USIZE
Rule 78    expresion -> expresion MAS expresion
Rule 79    expresion -> expresion MENOS expresion
Rule 80    expresion -> expresion POR expresion
Rule 81    expresion -> expresion DIVIDIDO expresion
Rule 82    expresion -> expresion MOD expresion
Rule 83    expresion -> expresion AS tipos
Rule 84    expresion -> instrif
Rule 85    expresion -> MENOS expresion
Rule 86    expresion -> PARIZQ logica PARDER
Rule 87    expresion -> ENTERO
Rule 88    expresion -> DECIMAL
Rule 89    expresion -> FORM
Rule 90    expresion -> TRUE
Rule 91    expresion -> FALSE
Rule 92    expresion -> VECM NOT listarreglo
Rule 93    expresion -> ID listarreglo
Rule 94    expresion -> ID PARIZQ listexpr PARDER
Rule 95    expresion -> listarreglo
Rule 96    expresion -> CHARE
Rule 97    expresion -> opcionpow DPT DPT expresion
Rule 98    opcionpow -> expresion
Rule 99    opcionpow -> tipos
Rule 100   expresion -> POW PARIZQ ENTERO COMA ENTERO PARDER
Rule 101   expresion -> POWF PARIZQ DECIMAL COMA DECIMAL PARDER
Rule 102   expresion -> instrloop
Rule 103   expresion -> expresion PT TOSTRING PARIZQ PARDER
Rule 104   expresion -> expresion PT SQRT PARIZQ PARDER
Rule 105   expresion -> expresion PT ABS PARIZQ PARDER
Rule 106   expresion -> expresion PT CLONE PARIZQ PARDER
Rule 107   expresion -> expresion PT LEN PARIZQ PARDER
Rule 108   expresion -> expresion PT TOOWNED PARIZQ PARDER
Rule 109   listarreglo -> listarreglo CORIZQ listexpr CORDER
Rule 110   listarreglo -> empty
Rule 111   listexpr -> listexpr COMA expresion
Rule 112   listexpr -> expresion
Rule 113   empty -> <empty>

Terminals, with rules where they appear

ABS                  : 105
AMP                  : 76
AND                  : 47
AS                   : 83
BOOL                 : 73
BREAK                : 28 30
CHAR                 : 74
CHARE                : 96
CLONE                : 106
COMA                 : 11 13 100 101 111
CONTINUE             : 29
CORDER               : 68 109
CORIZQ               : 68 109
DECIMAL              : 88 101 101
DIS                  : 56
DIVIDIDO             : 81
DPT                  : 11 12 13 14 60 97 97
ELSE                 : 38 39 44 45
ENTERO               : 42 68 87 100 100
F64                  : 72
FALSE                : 91
FN                   : 3 4 7
FOR                  : 27
FORM                 : 89
I64                  : 71
ID                   : 3 4 5 6 8 11 12 13 14 19 20 21 27 70 93 94
IF                   : 23 37 39 45
IGUAL                : 19 20 51 51
IN                   : 27
LEN                  : 107
LET                  : 19
LLAVEDER             : 3 4 5 6 7 8 23 24 26 27 36 37 38 39 44 45
LLAVEIZQ             : 3 4 5 6 7 8 23 24 26 27 36 37 38 39 44 45
LOOP                 : 24 36
MAIGUAL              : 55
MAIN                 : 7
MAS                  : 78
MATCH                : 
MAYOR                : 15 53
MEIGUAL              : 54
MENOR                : 52
MENOS                : 15 79 85
MOD                  : 82
MODF                 : 5 6
MUT                  : 58
NOT                  : 22 49 92
OR                   : 48
PARDER               : 3 4 7 21 22 86 94 100 101 103 104 105 106 107 108
PARIZQ               : 3 4 7 21 22 86 94 100 101 103 104 105 106 107 108
POR                  : 80
POW                  : 100
POWF                 : 101
PRINT                : 22
PT                   : 42 42 103 104 105 106 107 108
PTCOMA               : 19 20 21 22 25 28 29 30 68
PUB                  : 3 5
RETURN               : 25
SQRT                 : 104
STR                  : 76
STRING               : 75
STRUCT               : 8
TOOWNED              : 108
TOSTRING             : 103
TRUE                 : 90
USIZE                : 77
VEC                  : 
VECM                 : 92
WHILE                : 26
error                : 

Nonterminals, with rules where they appear

arreglos             : 63 66 68
arrtipos             : 19
empty                : 10 16 40 43 46 59 61 64 67 110
expresion            : 34 57 78 78 79 79 80 80 81 81 82 82 83 85 97 98 103 104 105 106 107 108 111 112
funcion              : 1 2
funciones            : 1 5 6 0
instrelse            : 37 39
instrif              : 84
instrloop            : 102
instruccion          : 17 18 31
instrucciones        : 3 4 7 17 23 24 26 27 36 44 45
instruccionesexp     : 33 37 38 39
instruccionesexpfin  : 31 32
listarreglo          : 20 92 93 95 109
listexpr             : 21 22 94 109 111
liststruct           : 8 13
logica               : 19 20 23 25 26 30 37 39 41 42 45 47 47 48 48 49 86
mutable              : 11 12 19
opcionfor            : 27
opcionpow            : 97
parametros           : 3 4
parametros2          : 9 11
pyc                  : 19
rel                  : 50 51 51 52 52 53 53 54 54 55 55 56 56
tipofun              : 3 4
tipos                : 11 12 13 14 15 62 65 69 83 99
unelse               : 23 45
vectores             : 

Parsing method: LALR

state 0

    (0) S' -> . funciones
    (1) funciones -> . funcion funciones
    (2) funciones -> . funcion
    (3) funcion -> . PUB FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER
    (4) funcion -> . FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER
    (5) funcion -> . PUB MODF ID LLAVEIZQ funciones LLAVEDER
    (6) funcion -> . MODF ID LLAVEIZQ funciones LLAVEDER
    (7) funcion -> . FN MAIN PARIZQ PARDER LLAVEIZQ instrucciones LLAVEDER
    (8) funcion -> . STRUCT ID LLAVEIZQ liststruct LLAVEDER

    PUB             shift and go to state 3
    FN              shift and go to state 4
    MODF            shift and go to state 5
    STRUCT          shift and go to state 6

    funciones                      shift and go to state 1
    funcion                        shift and go to state 2

state 1

    (0) S' -> funciones .



state 2

    (1) funciones -> funcion . funciones
    (2) funciones -> funcion .
    (1) funciones -> . funcion funciones
    (2) funciones -> . funcion
    (3) funcion -> . PUB FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER
    (4) funcion -> . FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER
    (5) funcion -> . PUB MODF ID LLAVEIZQ funciones LLAVEDER
    (6) funcion -> . MODF ID LLAVEIZQ funciones LLAVEDER
    (7) funcion -> . FN MAIN PARIZQ PARDER LLAVEIZQ instrucciones LLAVEDER
    (8) funcion -> . STRUCT ID LLAVEIZQ liststruct LLAVEDER

    $end            reduce using rule 2 (funciones -> funcion .)
    LLAVEDER        reduce using rule 2 (funciones -> funcion .)
    PUB             shift and go to state 3
    FN              shift and go to state 4
    MODF            shift and go to state 5
    STRUCT          shift and go to state 6

    funcion                        shift and go to state 2
    funciones                      shift and go to state 7

state 3

    (3) funcion -> PUB . FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER
    (5) funcion -> PUB . MODF ID LLAVEIZQ funciones LLAVEDER

    FN              shift and go to state 8
    MODF            shift and go to state 9


state 4

    (4) funcion -> FN . ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER
    (7) funcion -> FN . MAIN PARIZQ PARDER LLAVEIZQ instrucciones LLAVEDER

    ID              shift and go to state 10
    MAIN            shift and go to state 11


state 5

    (6) funcion -> MODF . ID LLAVEIZQ funciones LLAVEDER

    ID              shift and go to state 12


state 6

    (8) funcion -> STRUCT . ID LLAVEIZQ liststruct LLAVEDER

    ID              shift and go to state 13


state 7

    (1) funciones -> funcion funciones .

    $end            reduce using rule 1 (funciones -> funcion funciones .)
    LLAVEDER        reduce using rule 1 (funciones -> funcion funciones .)


state 8

    (3) funcion -> PUB FN . ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER

    ID              shift and go to state 14


state 9

    (5) funcion -> PUB MODF . ID LLAVEIZQ funciones LLAVEDER

    ID              shift and go to state 15


state 10

    (4) funcion -> FN ID . PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER

    PARIZQ          shift and go to state 16


state 11

    (7) funcion -> FN MAIN . PARIZQ PARDER LLAVEIZQ instrucciones LLAVEDER

    PARIZQ          shift and go to state 17


state 12

    (6) funcion -> MODF ID . LLAVEIZQ funciones LLAVEDER

    LLAVEIZQ        shift and go to state 18


state 13

    (8) funcion -> STRUCT ID . LLAVEIZQ liststruct LLAVEDER

    LLAVEIZQ        shift and go to state 19


state 14

    (3) funcion -> PUB FN ID . PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER

    PARIZQ          shift and go to state 20


state 15

    (5) funcion -> PUB MODF ID . LLAVEIZQ funciones LLAVEDER

    LLAVEIZQ        shift and go to state 21


state 16

    (4) funcion -> FN ID PARIZQ . parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER
    (9) parametros -> . parametros2
    (10) parametros -> . empty
    (11) parametros2 -> . parametros2 COMA mutable ID DPT tipos
    (12) parametros2 -> . mutable ID DPT tipos
    (113) empty -> .
    (58) mutable -> . MUT
    (59) mutable -> . empty

    PARDER          reduce using rule 113 (empty -> .)
    ID              reduce using rule 113 (empty -> .)
    MUT             shift and go to state 26

    parametros                     shift and go to state 22
    parametros2                    shift and go to state 23
    empty                          shift and go to state 24
    mutable                        shift and go to state 25

state 17

    (7) funcion -> FN MAIN PARIZQ . PARDER LLAVEIZQ instrucciones LLAVEDER

    PARDER          shift and go to state 27


state 18

    (6) funcion -> MODF ID LLAVEIZQ . funciones LLAVEDER
    (1) funciones -> . funcion funciones
    (2) funciones -> . funcion
    (3) funcion -> . PUB FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER
    (4) funcion -> . FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER
    (5) funcion -> . PUB MODF ID LLAVEIZQ funciones LLAVEDER
    (6) funcion -> . MODF ID LLAVEIZQ funciones LLAVEDER
    (7) funcion -> . FN MAIN PARIZQ PARDER LLAVEIZQ instrucciones LLAVEDER
    (8) funcion -> . STRUCT ID LLAVEIZQ liststruct LLAVEDER

    PUB             shift and go to state 3
    FN              shift and go to state 4
    MODF            shift and go to state 5
    STRUCT          shift and go to state 6

    funciones                      shift and go to state 28
    funcion                        shift and go to state 2

state 19

    (8) funcion -> STRUCT ID LLAVEIZQ . liststruct LLAVEDER
    (13) liststruct -> . liststruct COMA ID DPT tipos
    (14) liststruct -> . ID DPT tipos

    ID              shift and go to state 29

    liststruct                     shift and go to state 30

state 20

    (3) funcion -> PUB FN ID PARIZQ . parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER
    (9) parametros -> . parametros2
    (10) parametros -> . empty
    (11) parametros2 -> . parametros2 COMA mutable ID DPT tipos
    (12) parametros2 -> . mutable ID DPT tipos
    (113) empty -> .
    (58) mutable -> . MUT
    (59) mutable -> . empty

    PARDER          reduce using rule 113 (empty -> .)
    ID              reduce using rule 113 (empty -> .)
    MUT             shift and go to state 26

    parametros                     shift and go to state 31
    parametros2                    shift and go to state 23
    empty                          shift and go to state 24
    mutable                        shift and go to state 25

state 21

    (5) funcion -> PUB MODF ID LLAVEIZQ . funciones LLAVEDER
    (1) funciones -> . funcion funciones
    (2) funciones -> . funcion
    (3) funcion -> . PUB FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER
    (4) funcion -> . FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER
    (5) funcion -> . PUB MODF ID LLAVEIZQ funciones LLAVEDER
    (6) funcion -> . MODF ID LLAVEIZQ funciones LLAVEDER
    (7) funcion -> . FN MAIN PARIZQ PARDER LLAVEIZQ instrucciones LLAVEDER
    (8) funcion -> . STRUCT ID LLAVEIZQ liststruct LLAVEDER

    PUB             shift and go to state 3
    FN              shift and go to state 4
    MODF            shift and go to state 5
    STRUCT          shift and go to state 6

    funciones                      shift and go to state 32
    funcion                        shift and go to state 2

state 22

    (4) funcion -> FN ID PARIZQ parametros . PARDER tipofun LLAVEIZQ instrucciones LLAVEDER

    PARDER          shift and go to state 33


state 23

    (9) parametros -> parametros2 .
    (11) parametros2 -> parametros2 . COMA mutable ID DPT tipos

    PARDER          reduce using rule 9 (parametros -> parametros2 .)
    COMA            shift and go to state 34


state 24

    (10) parametros -> empty .
    (59) mutable -> empty .

    PARDER          reduce using rule 10 (parametros -> empty .)
    ID              reduce using rule 59 (mutable -> empty .)


state 25

    (12) parametros2 -> mutable . ID DPT tipos

    ID              shift and go to state 35


state 26

    (58) mutable -> MUT .

    ID              reduce using rule 58 (mutable -> MUT .)


state 27

    (7) funcion -> FN MAIN PARIZQ PARDER . LLAVEIZQ instrucciones LLAVEDER

    LLAVEIZQ        shift and go to state 36


state 28

    (6) funcion -> MODF ID LLAVEIZQ funciones . LLAVEDER

    LLAVEDER        shift and go to state 37


state 29

    (14) liststruct -> ID . DPT tipos

    DPT             shift and go to state 38


state 30

    (8) funcion -> STRUCT ID LLAVEIZQ liststruct . LLAVEDER
    (13) liststruct -> liststruct . COMA ID DPT tipos

    LLAVEDER        shift and go to state 39
    COMA            shift and go to state 40


state 31

    (3) funcion -> PUB FN ID PARIZQ parametros . PARDER tipofun LLAVEIZQ instrucciones LLAVEDER

    PARDER          shift and go to state 41


state 32

    (5) funcion -> PUB MODF ID LLAVEIZQ funciones . LLAVEDER

    LLAVEDER        shift and go to state 42


state 33

    (4) funcion -> FN ID PARIZQ parametros PARDER . tipofun LLAVEIZQ instrucciones LLAVEDER
    (15) tipofun -> . MENOS MAYOR tipos
    (16) tipofun -> . empty
    (113) empty -> .

    MENOS           shift and go to state 44
    LLAVEIZQ        reduce using rule 113 (empty -> .)

    tipofun                        shift and go to state 43
    empty                          shift and go to state 45

state 34

    (11) parametros2 -> parametros2 COMA . mutable ID DPT tipos
    (58) mutable -> . MUT
    (59) mutable -> . empty
    (113) empty -> .

    MUT             shift and go to state 26
    ID              reduce using rule 113 (empty -> .)

    mutable                        shift and go to state 46
    empty                          shift and go to state 47

state 35

    (12) parametros2 -> mutable ID . DPT tipos

    DPT             shift and go to state 48


state 36

    (7) funcion -> FN MAIN PARIZQ PARDER LLAVEIZQ . instrucciones LLAVEDER
    (17) instrucciones -> . instruccion instrucciones
    (18) instrucciones -> . instruccion
    (19) instruccion -> . LET mutable ID pyc arrtipos IGUAL logica PTCOMA
    (20) instruccion -> . ID listarreglo IGUAL logica PTCOMA
    (21) instruccion -> . ID PARIZQ listexpr PARDER PTCOMA
    (22) instruccion -> . PRINT NOT PARIZQ listexpr PARDER PTCOMA
    (23) instruccion -> . IF logica LLAVEIZQ instrucciones LLAVEDER unelse
    (24) instruccion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (25) instruccion -> . RETURN logica PTCOMA
    (26) instruccion -> . WHILE logica LLAVEIZQ instrucciones LLAVEDER
    (27) instruccion -> . FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER
    (28) instruccion -> . BREAK PTCOMA
    (29) instruccion -> . CONTINUE PTCOMA
    (30) instruccion -> . BREAK logica PTCOMA

    LET             shift and go to state 51
    ID              shift and go to state 52
    PRINT           shift and go to state 53
    IF              shift and go to state 54
    LOOP            shift and go to state 55
    RETURN          shift and go to state 56
    WHILE           shift and go to state 57
    FOR             shift and go to state 58
    BREAK           shift and go to state 59
    CONTINUE        shift and go to state 60

    instrucciones                  shift and go to state 49
    instruccion                    shift and go to state 50

state 37

    (6) funcion -> MODF ID LLAVEIZQ funciones LLAVEDER .

    PUB             reduce using rule 6 (funcion -> MODF ID LLAVEIZQ funciones LLAVEDER .)
    FN              reduce using rule 6 (funcion -> MODF ID LLAVEIZQ funciones LLAVEDER .)
    MODF            reduce using rule 6 (funcion -> MODF ID LLAVEIZQ funciones LLAVEDER .)
    STRUCT          reduce using rule 6 (funcion -> MODF ID LLAVEIZQ funciones LLAVEDER .)
    $end            reduce using rule 6 (funcion -> MODF ID LLAVEIZQ funciones LLAVEDER .)
    LLAVEDER        reduce using rule 6 (funcion -> MODF ID LLAVEIZQ funciones LLAVEDER .)


state 38

    (14) liststruct -> ID DPT . tipos
    (71) tipos -> . I64
    (72) tipos -> . F64
    (73) tipos -> . BOOL
    (74) tipos -> . CHAR
    (75) tipos -> . STRING
    (76) tipos -> . AMP STR
    (77) tipos -> . USIZE

    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

    tipos                          shift and go to state 61

state 39

    (8) funcion -> STRUCT ID LLAVEIZQ liststruct LLAVEDER .

    PUB             reduce using rule 8 (funcion -> STRUCT ID LLAVEIZQ liststruct LLAVEDER .)
    FN              reduce using rule 8 (funcion -> STRUCT ID LLAVEIZQ liststruct LLAVEDER .)
    MODF            reduce using rule 8 (funcion -> STRUCT ID LLAVEIZQ liststruct LLAVEDER .)
    STRUCT          reduce using rule 8 (funcion -> STRUCT ID LLAVEIZQ liststruct LLAVEDER .)
    $end            reduce using rule 8 (funcion -> STRUCT ID LLAVEIZQ liststruct LLAVEDER .)
    LLAVEDER        reduce using rule 8 (funcion -> STRUCT ID LLAVEIZQ liststruct LLAVEDER .)


state 40

    (13) liststruct -> liststruct COMA . ID DPT tipos

    ID              shift and go to state 69


state 41

    (3) funcion -> PUB FN ID PARIZQ parametros PARDER . tipofun LLAVEIZQ instrucciones LLAVEDER
    (15) tipofun -> . MENOS MAYOR tipos
    (16) tipofun -> . empty
    (113) empty -> .

    MENOS           shift and go to state 44
    LLAVEIZQ        reduce using rule 113 (empty -> .)

    tipofun                        shift and go to state 70
    empty                          shift and go to state 45

state 42

    (5) funcion -> PUB MODF ID LLAVEIZQ funciones LLAVEDER .

    PUB             reduce using rule 5 (funcion -> PUB MODF ID LLAVEIZQ funciones LLAVEDER .)
    FN              reduce using rule 5 (funcion -> PUB MODF ID LLAVEIZQ funciones LLAVEDER .)
    MODF            reduce using rule 5 (funcion -> PUB MODF ID LLAVEIZQ funciones LLAVEDER .)
    STRUCT          reduce using rule 5 (funcion -> PUB MODF ID LLAVEIZQ funciones LLAVEDER .)
    $end            reduce using rule 5 (funcion -> PUB MODF ID LLAVEIZQ funciones LLAVEDER .)
    LLAVEDER        reduce using rule 5 (funcion -> PUB MODF ID LLAVEIZQ funciones LLAVEDER .)


state 43

    (4) funcion -> FN ID PARIZQ parametros PARDER tipofun . LLAVEIZQ instrucciones LLAVEDER

    LLAVEIZQ        shift and go to state 71


state 44

    (15) tipofun -> MENOS . MAYOR tipos

    MAYOR           shift and go to state 72


state 45

    (16) tipofun -> empty .

    LLAVEIZQ        reduce using rule 16 (tipofun -> empty .)


state 46

    (11) parametros2 -> parametros2 COMA mutable . ID DPT tipos

    ID              shift and go to state 73


state 47

    (59) mutable -> empty .

    ID              reduce using rule 59 (mutable -> empty .)


state 48

    (12) parametros2 -> mutable ID DPT . tipos
    (71) tipos -> . I64
    (72) tipos -> . F64
    (73) tipos -> . BOOL
    (74) tipos -> . CHAR
    (75) tipos -> . STRING
    (76) tipos -> . AMP STR
    (77) tipos -> . USIZE

    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

    tipos                          shift and go to state 74

state 49

    (7) funcion -> FN MAIN PARIZQ PARDER LLAVEIZQ instrucciones . LLAVEDER

    LLAVEDER        shift and go to state 75


state 50

    (17) instrucciones -> instruccion . instrucciones
    (18) instrucciones -> instruccion .
    (17) instrucciones -> . instruccion instrucciones
    (18) instrucciones -> . instruccion
    (19) instruccion -> . LET mutable ID pyc arrtipos IGUAL logica PTCOMA
    (20) instruccion -> . ID listarreglo IGUAL logica PTCOMA
    (21) instruccion -> . ID PARIZQ listexpr PARDER PTCOMA
    (22) instruccion -> . PRINT NOT PARIZQ listexpr PARDER PTCOMA
    (23) instruccion -> . IF logica LLAVEIZQ instrucciones LLAVEDER unelse
    (24) instruccion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (25) instruccion -> . RETURN logica PTCOMA
    (26) instruccion -> . WHILE logica LLAVEIZQ instrucciones LLAVEDER
    (27) instruccion -> . FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER
    (28) instruccion -> . BREAK PTCOMA
    (29) instruccion -> . CONTINUE PTCOMA
    (30) instruccion -> . BREAK logica PTCOMA

    LLAVEDER        reduce using rule 18 (instrucciones -> instruccion .)
    LET             shift and go to state 51
    ID              shift and go to state 52
    PRINT           shift and go to state 53
    IF              shift and go to state 54
    LOOP            shift and go to state 55
    RETURN          shift and go to state 56
    WHILE           shift and go to state 57
    FOR             shift and go to state 58
    BREAK           shift and go to state 59
    CONTINUE        shift and go to state 60

    instruccion                    shift and go to state 50
    instrucciones                  shift and go to state 76

state 51

    (19) instruccion -> LET . mutable ID pyc arrtipos IGUAL logica PTCOMA
    (58) mutable -> . MUT
    (59) mutable -> . empty
    (113) empty -> .

    MUT             shift and go to state 26
    ID              reduce using rule 113 (empty -> .)

    mutable                        shift and go to state 77
    empty                          shift and go to state 47

state 52

    (20) instruccion -> ID . listarreglo IGUAL logica PTCOMA
    (21) instruccion -> ID . PARIZQ listexpr PARDER PTCOMA
    (109) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (110) listarreglo -> . empty
    (113) empty -> .

    PARIZQ          shift and go to state 79
    IGUAL           reduce using rule 113 (empty -> .)
    CORIZQ          reduce using rule 113 (empty -> .)

    listarreglo                    shift and go to state 78
    empty                          shift and go to state 80

state 53

    (22) instruccion -> PRINT . NOT PARIZQ listexpr PARDER PTCOMA

    NOT             shift and go to state 81


state 54

    (23) instruccion -> IF . logica LLAVEIZQ instrucciones LLAVEDER unelse
    (47) logica -> . logica AND logica
    (48) logica -> . logica OR logica
    (49) logica -> . NOT logica
    (50) logica -> . rel
    (51) rel -> . rel IGUAL IGUAL rel
    (52) rel -> . rel MENOR rel
    (53) rel -> . rel MAYOR rel
    (54) rel -> . rel MEIGUAL rel
    (55) rel -> . rel MAIGUAL rel
    (56) rel -> . rel DIS rel
    (57) rel -> . expresion
    (78) expresion -> . expresion MAS expresion
    (79) expresion -> . expresion MENOS expresion
    (80) expresion -> . expresion POR expresion
    (81) expresion -> . expresion DIVIDIDO expresion
    (82) expresion -> . expresion MOD expresion
    (83) expresion -> . expresion AS tipos
    (84) expresion -> . instrif
    (85) expresion -> . MENOS expresion
    (86) expresion -> . PARIZQ logica PARDER
    (87) expresion -> . ENTERO
    (88) expresion -> . DECIMAL
    (89) expresion -> . FORM
    (90) expresion -> . TRUE
    (91) expresion -> . FALSE
    (92) expresion -> . VECM NOT listarreglo
    (93) expresion -> . ID listarreglo
    (94) expresion -> . ID PARIZQ listexpr PARDER
    (95) expresion -> . listarreglo
    (96) expresion -> . CHARE
    (97) expresion -> . opcionpow DPT DPT expresion
    (100) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (101) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (102) expresion -> . instrloop
    (103) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (104) expresion -> . expresion PT SQRT PARIZQ PARDER
    (105) expresion -> . expresion PT ABS PARIZQ PARDER
    (106) expresion -> . expresion PT CLONE PARIZQ PARDER
    (107) expresion -> . expresion PT LEN PARIZQ PARDER
    (108) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (37) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (109) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (110) listarreglo -> . empty
    (98) opcionpow -> . expresion
    (99) opcionpow -> . tipos
    (36) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (113) empty -> .
    (71) tipos -> . I64
    (72) tipos -> . F64
    (73) tipos -> . BOOL
    (74) tipos -> . CHAR
    (75) tipos -> . STRING
    (76) tipos -> . AMP STR
    (77) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    NOT             shift and go to state 84
    MENOS           shift and go to state 87
    PARIZQ          shift and go to state 90
    ENTERO          shift and go to state 91
    DECIMAL         shift and go to state 92
    FORM            shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    VECM            shift and go to state 96
    ID              shift and go to state 98
    CHARE           shift and go to state 99
    POW             shift and go to state 101
    POWF            shift and go to state 102
    IF              shift and go to state 82
    LOOP            shift and go to state 104
    CORIZQ          reduce using rule 113 (empty -> .)
    MAS             reduce using rule 113 (empty -> .)
    POR             reduce using rule 113 (empty -> .)
    DIVIDIDO        reduce using rule 113 (empty -> .)
    MOD             reduce using rule 113 (empty -> .)
    AS              reduce using rule 113 (empty -> .)
    PT              reduce using rule 113 (empty -> .)
    IGUAL           reduce using rule 113 (empty -> .)
    MENOR           reduce using rule 113 (empty -> .)
    MAYOR           reduce using rule 113 (empty -> .)
    MEIGUAL         reduce using rule 113 (empty -> .)
    MAIGUAL         reduce using rule 113 (empty -> .)
    DIS             reduce using rule 113 (empty -> .)
    LLAVEIZQ        reduce using rule 113 (empty -> .)
    AND             reduce using rule 113 (empty -> .)
    OR              reduce using rule 113 (empty -> .)
    DPT             reduce using rule 113 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 113 (empty -> .) ]

    logica                         shift and go to state 83
    rel                            shift and go to state 85
    expresion                      shift and go to state 86
    tipos                          shift and go to state 88
    instrif                        shift and go to state 89
    listarreglo                    shift and go to state 97
    opcionpow                      shift and go to state 100
    instrloop                      shift and go to state 103
    empty                          shift and go to state 80

state 55

    (24) instruccion -> LOOP . LLAVEIZQ instrucciones LLAVEDER

    LLAVEIZQ        shift and go to state 105


state 56

    (25) instruccion -> RETURN . logica PTCOMA
    (47) logica -> . logica AND logica
    (48) logica -> . logica OR logica
    (49) logica -> . NOT logica
    (50) logica -> . rel
    (51) rel -> . rel IGUAL IGUAL rel
    (52) rel -> . rel MENOR rel
    (53) rel -> . rel MAYOR rel
    (54) rel -> . rel MEIGUAL rel
    (55) rel -> . rel MAIGUAL rel
    (56) rel -> . rel DIS rel
    (57) rel -> . expresion
    (78) expresion -> . expresion MAS expresion
    (79) expresion -> . expresion MENOS expresion
    (80) expresion -> . expresion POR expresion
    (81) expresion -> . expresion DIVIDIDO expresion
    (82) expresion -> . expresion MOD expresion
    (83) expresion -> . expresion AS tipos
    (84) expresion -> . instrif
    (85) expresion -> . MENOS expresion
    (86) expresion -> . PARIZQ logica PARDER
    (87) expresion -> . ENTERO
    (88) expresion -> . DECIMAL
    (89) expresion -> . FORM
    (90) expresion -> . TRUE
    (91) expresion -> . FALSE
    (92) expresion -> . VECM NOT listarreglo
    (93) expresion -> . ID listarreglo
    (94) expresion -> . ID PARIZQ listexpr PARDER
    (95) expresion -> . listarreglo
    (96) expresion -> . CHARE
    (97) expresion -> . opcionpow DPT DPT expresion
    (100) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (101) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (102) expresion -> . instrloop
    (103) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (104) expresion -> . expresion PT SQRT PARIZQ PARDER
    (105) expresion -> . expresion PT ABS PARIZQ PARDER
    (106) expresion -> . expresion PT CLONE PARIZQ PARDER
    (107) expresion -> . expresion PT LEN PARIZQ PARDER
    (108) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (37) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (109) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (110) listarreglo -> . empty
    (98) opcionpow -> . expresion
    (99) opcionpow -> . tipos
    (36) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (113) empty -> .
    (71) tipos -> . I64
    (72) tipos -> . F64
    (73) tipos -> . BOOL
    (74) tipos -> . CHAR
    (75) tipos -> . STRING
    (76) tipos -> . AMP STR
    (77) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    NOT             shift and go to state 84
    MENOS           shift and go to state 87
    PARIZQ          shift and go to state 90
    ENTERO          shift and go to state 91
    DECIMAL         shift and go to state 92
    FORM            shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    VECM            shift and go to state 96
    ID              shift and go to state 98
    CHARE           shift and go to state 99
    POW             shift and go to state 101
    POWF            shift and go to state 102
    IF              shift and go to state 82
    LOOP            shift and go to state 104
    CORIZQ          reduce using rule 113 (empty -> .)
    MAS             reduce using rule 113 (empty -> .)
    POR             reduce using rule 113 (empty -> .)
    DIVIDIDO        reduce using rule 113 (empty -> .)
    MOD             reduce using rule 113 (empty -> .)
    AS              reduce using rule 113 (empty -> .)
    PT              reduce using rule 113 (empty -> .)
    IGUAL           reduce using rule 113 (empty -> .)
    MENOR           reduce using rule 113 (empty -> .)
    MAYOR           reduce using rule 113 (empty -> .)
    MEIGUAL         reduce using rule 113 (empty -> .)
    MAIGUAL         reduce using rule 113 (empty -> .)
    DIS             reduce using rule 113 (empty -> .)
    PTCOMA          reduce using rule 113 (empty -> .)
    AND             reduce using rule 113 (empty -> .)
    OR              reduce using rule 113 (empty -> .)
    DPT             reduce using rule 113 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 113 (empty -> .) ]

    logica                         shift and go to state 106
    rel                            shift and go to state 85
    expresion                      shift and go to state 86
    tipos                          shift and go to state 88
    instrif                        shift and go to state 89
    listarreglo                    shift and go to state 97
    opcionpow                      shift and go to state 100
    instrloop                      shift and go to state 103
    empty                          shift and go to state 80

state 57

    (26) instruccion -> WHILE . logica LLAVEIZQ instrucciones LLAVEDER
    (47) logica -> . logica AND logica
    (48) logica -> . logica OR logica
    (49) logica -> . NOT logica
    (50) logica -> . rel
    (51) rel -> . rel IGUAL IGUAL rel
    (52) rel -> . rel MENOR rel
    (53) rel -> . rel MAYOR rel
    (54) rel -> . rel MEIGUAL rel
    (55) rel -> . rel MAIGUAL rel
    (56) rel -> . rel DIS rel
    (57) rel -> . expresion
    (78) expresion -> . expresion MAS expresion
    (79) expresion -> . expresion MENOS expresion
    (80) expresion -> . expresion POR expresion
    (81) expresion -> . expresion DIVIDIDO expresion
    (82) expresion -> . expresion MOD expresion
    (83) expresion -> . expresion AS tipos
    (84) expresion -> . instrif
    (85) expresion -> . MENOS expresion
    (86) expresion -> . PARIZQ logica PARDER
    (87) expresion -> . ENTERO
    (88) expresion -> . DECIMAL
    (89) expresion -> . FORM
    (90) expresion -> . TRUE
    (91) expresion -> . FALSE
    (92) expresion -> . VECM NOT listarreglo
    (93) expresion -> . ID listarreglo
    (94) expresion -> . ID PARIZQ listexpr PARDER
    (95) expresion -> . listarreglo
    (96) expresion -> . CHARE
    (97) expresion -> . opcionpow DPT DPT expresion
    (100) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (101) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (102) expresion -> . instrloop
    (103) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (104) expresion -> . expresion PT SQRT PARIZQ PARDER
    (105) expresion -> . expresion PT ABS PARIZQ PARDER
    (106) expresion -> . expresion PT CLONE PARIZQ PARDER
    (107) expresion -> . expresion PT LEN PARIZQ PARDER
    (108) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (37) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (109) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (110) listarreglo -> . empty
    (98) opcionpow -> . expresion
    (99) opcionpow -> . tipos
    (36) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (113) empty -> .
    (71) tipos -> . I64
    (72) tipos -> . F64
    (73) tipos -> . BOOL
    (74) tipos -> . CHAR
    (75) tipos -> . STRING
    (76) tipos -> . AMP STR
    (77) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    NOT             shift and go to state 84
    MENOS           shift and go to state 87
    PARIZQ          shift and go to state 90
    ENTERO          shift and go to state 91
    DECIMAL         shift and go to state 92
    FORM            shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    VECM            shift and go to state 96
    ID              shift and go to state 98
    CHARE           shift and go to state 99
    POW             shift and go to state 101
    POWF            shift and go to state 102
    IF              shift and go to state 82
    LOOP            shift and go to state 104
    CORIZQ          reduce using rule 113 (empty -> .)
    MAS             reduce using rule 113 (empty -> .)
    POR             reduce using rule 113 (empty -> .)
    DIVIDIDO        reduce using rule 113 (empty -> .)
    MOD             reduce using rule 113 (empty -> .)
    AS              reduce using rule 113 (empty -> .)
    PT              reduce using rule 113 (empty -> .)
    IGUAL           reduce using rule 113 (empty -> .)
    MENOR           reduce using rule 113 (empty -> .)
    MAYOR           reduce using rule 113 (empty -> .)
    MEIGUAL         reduce using rule 113 (empty -> .)
    MAIGUAL         reduce using rule 113 (empty -> .)
    DIS             reduce using rule 113 (empty -> .)
    LLAVEIZQ        reduce using rule 113 (empty -> .)
    AND             reduce using rule 113 (empty -> .)
    OR              reduce using rule 113 (empty -> .)
    DPT             reduce using rule 113 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 113 (empty -> .) ]

    logica                         shift and go to state 107
    rel                            shift and go to state 85
    expresion                      shift and go to state 86
    tipos                          shift and go to state 88
    instrif                        shift and go to state 89
    listarreglo                    shift and go to state 97
    opcionpow                      shift and go to state 100
    instrloop                      shift and go to state 103
    empty                          shift and go to state 80

state 58

    (27) instruccion -> FOR . ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER

    ID              shift and go to state 108


state 59

    (28) instruccion -> BREAK . PTCOMA
    (30) instruccion -> BREAK . logica PTCOMA
    (47) logica -> . logica AND logica
    (48) logica -> . logica OR logica
    (49) logica -> . NOT logica
    (50) logica -> . rel
    (51) rel -> . rel IGUAL IGUAL rel
    (52) rel -> . rel MENOR rel
    (53) rel -> . rel MAYOR rel
    (54) rel -> . rel MEIGUAL rel
    (55) rel -> . rel MAIGUAL rel
    (56) rel -> . rel DIS rel
    (57) rel -> . expresion
    (78) expresion -> . expresion MAS expresion
    (79) expresion -> . expresion MENOS expresion
    (80) expresion -> . expresion POR expresion
    (81) expresion -> . expresion DIVIDIDO expresion
    (82) expresion -> . expresion MOD expresion
    (83) expresion -> . expresion AS tipos
    (84) expresion -> . instrif
    (85) expresion -> . MENOS expresion
    (86) expresion -> . PARIZQ logica PARDER
    (87) expresion -> . ENTERO
    (88) expresion -> . DECIMAL
    (89) expresion -> . FORM
    (90) expresion -> . TRUE
    (91) expresion -> . FALSE
    (92) expresion -> . VECM NOT listarreglo
    (93) expresion -> . ID listarreglo
    (94) expresion -> . ID PARIZQ listexpr PARDER
    (95) expresion -> . listarreglo
    (96) expresion -> . CHARE
    (97) expresion -> . opcionpow DPT DPT expresion
    (100) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (101) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (102) expresion -> . instrloop
    (103) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (104) expresion -> . expresion PT SQRT PARIZQ PARDER
    (105) expresion -> . expresion PT ABS PARIZQ PARDER
    (106) expresion -> . expresion PT CLONE PARIZQ PARDER
    (107) expresion -> . expresion PT LEN PARIZQ PARDER
    (108) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (37) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (109) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (110) listarreglo -> . empty
    (98) opcionpow -> . expresion
    (99) opcionpow -> . tipos
    (36) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (113) empty -> .
    (71) tipos -> . I64
    (72) tipos -> . F64
    (73) tipos -> . BOOL
    (74) tipos -> . CHAR
    (75) tipos -> . STRING
    (76) tipos -> . AMP STR
    (77) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for PTCOMA resolved as shift
    PTCOMA          shift and go to state 109
    NOT             shift and go to state 84
    MENOS           shift and go to state 87
    PARIZQ          shift and go to state 90
    ENTERO          shift and go to state 91
    DECIMAL         shift and go to state 92
    FORM            shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    VECM            shift and go to state 96
    ID              shift and go to state 98
    CHARE           shift and go to state 99
    POW             shift and go to state 101
    POWF            shift and go to state 102
    IF              shift and go to state 82
    LOOP            shift and go to state 104
    CORIZQ          reduce using rule 113 (empty -> .)
    MAS             reduce using rule 113 (empty -> .)
    POR             reduce using rule 113 (empty -> .)
    DIVIDIDO        reduce using rule 113 (empty -> .)
    MOD             reduce using rule 113 (empty -> .)
    AS              reduce using rule 113 (empty -> .)
    PT              reduce using rule 113 (empty -> .)
    IGUAL           reduce using rule 113 (empty -> .)
    MENOR           reduce using rule 113 (empty -> .)
    MAYOR           reduce using rule 113 (empty -> .)
    MEIGUAL         reduce using rule 113 (empty -> .)
    MAIGUAL         reduce using rule 113 (empty -> .)
    DIS             reduce using rule 113 (empty -> .)
    AND             reduce using rule 113 (empty -> .)
    OR              reduce using rule 113 (empty -> .)
    DPT             reduce using rule 113 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 113 (empty -> .) ]
  ! PTCOMA          [ reduce using rule 113 (empty -> .) ]

    logica                         shift and go to state 110
    rel                            shift and go to state 85
    expresion                      shift and go to state 86
    tipos                          shift and go to state 88
    instrif                        shift and go to state 89
    listarreglo                    shift and go to state 97
    opcionpow                      shift and go to state 100
    instrloop                      shift and go to state 103
    empty                          shift and go to state 80

state 60

    (29) instruccion -> CONTINUE . PTCOMA

    PTCOMA          shift and go to state 111


state 61

    (14) liststruct -> ID DPT tipos .

    LLAVEDER        reduce using rule 14 (liststruct -> ID DPT tipos .)
    COMA            reduce using rule 14 (liststruct -> ID DPT tipos .)


state 62

    (71) tipos -> I64 .

    LLAVEDER        reduce using rule 71 (tipos -> I64 .)
    COMA            reduce using rule 71 (tipos -> I64 .)
    PARDER          reduce using rule 71 (tipos -> I64 .)
    DPT             reduce using rule 71 (tipos -> I64 .)
    LLAVEIZQ        reduce using rule 71 (tipos -> I64 .)
    MAS             reduce using rule 71 (tipos -> I64 .)
    MENOS           reduce using rule 71 (tipos -> I64 .)
    POR             reduce using rule 71 (tipos -> I64 .)
    DIVIDIDO        reduce using rule 71 (tipos -> I64 .)
    MOD             reduce using rule 71 (tipos -> I64 .)
    AS              reduce using rule 71 (tipos -> I64 .)
    PT              reduce using rule 71 (tipos -> I64 .)
    IGUAL           reduce using rule 71 (tipos -> I64 .)
    MENOR           reduce using rule 71 (tipos -> I64 .)
    MAYOR           reduce using rule 71 (tipos -> I64 .)
    MEIGUAL         reduce using rule 71 (tipos -> I64 .)
    MAIGUAL         reduce using rule 71 (tipos -> I64 .)
    DIS             reduce using rule 71 (tipos -> I64 .)
    AND             reduce using rule 71 (tipos -> I64 .)
    OR              reduce using rule 71 (tipos -> I64 .)
    PTCOMA          reduce using rule 71 (tipos -> I64 .)
    CORDER          reduce using rule 71 (tipos -> I64 .)


state 63

    (72) tipos -> F64 .

    LLAVEDER        reduce using rule 72 (tipos -> F64 .)
    COMA            reduce using rule 72 (tipos -> F64 .)
    PARDER          reduce using rule 72 (tipos -> F64 .)
    DPT             reduce using rule 72 (tipos -> F64 .)
    LLAVEIZQ        reduce using rule 72 (tipos -> F64 .)
    MAS             reduce using rule 72 (tipos -> F64 .)
    MENOS           reduce using rule 72 (tipos -> F64 .)
    POR             reduce using rule 72 (tipos -> F64 .)
    DIVIDIDO        reduce using rule 72 (tipos -> F64 .)
    MOD             reduce using rule 72 (tipos -> F64 .)
    AS              reduce using rule 72 (tipos -> F64 .)
    PT              reduce using rule 72 (tipos -> F64 .)
    IGUAL           reduce using rule 72 (tipos -> F64 .)
    MENOR           reduce using rule 72 (tipos -> F64 .)
    MAYOR           reduce using rule 72 (tipos -> F64 .)
    MEIGUAL         reduce using rule 72 (tipos -> F64 .)
    MAIGUAL         reduce using rule 72 (tipos -> F64 .)
    DIS             reduce using rule 72 (tipos -> F64 .)
    AND             reduce using rule 72 (tipos -> F64 .)
    OR              reduce using rule 72 (tipos -> F64 .)
    PTCOMA          reduce using rule 72 (tipos -> F64 .)
    CORDER          reduce using rule 72 (tipos -> F64 .)


state 64

    (73) tipos -> BOOL .

    LLAVEDER        reduce using rule 73 (tipos -> BOOL .)
    COMA            reduce using rule 73 (tipos -> BOOL .)
    PARDER          reduce using rule 73 (tipos -> BOOL .)
    DPT             reduce using rule 73 (tipos -> BOOL .)
    LLAVEIZQ        reduce using rule 73 (tipos -> BOOL .)
    MAS             reduce using rule 73 (tipos -> BOOL .)
    MENOS           reduce using rule 73 (tipos -> BOOL .)
    POR             reduce using rule 73 (tipos -> BOOL .)
    DIVIDIDO        reduce using rule 73 (tipos -> BOOL .)
    MOD             reduce using rule 73 (tipos -> BOOL .)
    AS              reduce using rule 73 (tipos -> BOOL .)
    PT              reduce using rule 73 (tipos -> BOOL .)
    IGUAL           reduce using rule 73 (tipos -> BOOL .)
    MENOR           reduce using rule 73 (tipos -> BOOL .)
    MAYOR           reduce using rule 73 (tipos -> BOOL .)
    MEIGUAL         reduce using rule 73 (tipos -> BOOL .)
    MAIGUAL         reduce using rule 73 (tipos -> BOOL .)
    DIS             reduce using rule 73 (tipos -> BOOL .)
    AND             reduce using rule 73 (tipos -> BOOL .)
    OR              reduce using rule 73 (tipos -> BOOL .)
    PTCOMA          reduce using rule 73 (tipos -> BOOL .)
    CORDER          reduce using rule 73 (tipos -> BOOL .)


state 65

    (74) tipos -> CHAR .

    LLAVEDER        reduce using rule 74 (tipos -> CHAR .)
    COMA            reduce using rule 74 (tipos -> CHAR .)
    PARDER          reduce using rule 74 (tipos -> CHAR .)
    DPT             reduce using rule 74 (tipos -> CHAR .)
    LLAVEIZQ        reduce using rule 74 (tipos -> CHAR .)
    MAS             reduce using rule 74 (tipos -> CHAR .)
    MENOS           reduce using rule 74 (tipos -> CHAR .)
    POR             reduce using rule 74 (tipos -> CHAR .)
    DIVIDIDO        reduce using rule 74 (tipos -> CHAR .)
    MOD             reduce using rule 74 (tipos -> CHAR .)
    AS              reduce using rule 74 (tipos -> CHAR .)
    PT              reduce using rule 74 (tipos -> CHAR .)
    IGUAL           reduce using rule 74 (tipos -> CHAR .)
    MENOR           reduce using rule 74 (tipos -> CHAR .)
    MAYOR           reduce using rule 74 (tipos -> CHAR .)
    MEIGUAL         reduce using rule 74 (tipos -> CHAR .)
    MAIGUAL         reduce using rule 74 (tipos -> CHAR .)
    DIS             reduce using rule 74 (tipos -> CHAR .)
    AND             reduce using rule 74 (tipos -> CHAR .)
    OR              reduce using rule 74 (tipos -> CHAR .)
    PTCOMA          reduce using rule 74 (tipos -> CHAR .)
    CORDER          reduce using rule 74 (tipos -> CHAR .)


state 66

    (75) tipos -> STRING .

    LLAVEDER        reduce using rule 75 (tipos -> STRING .)
    COMA            reduce using rule 75 (tipos -> STRING .)
    PARDER          reduce using rule 75 (tipos -> STRING .)
    DPT             reduce using rule 75 (tipos -> STRING .)
    LLAVEIZQ        reduce using rule 75 (tipos -> STRING .)
    MAS             reduce using rule 75 (tipos -> STRING .)
    MENOS           reduce using rule 75 (tipos -> STRING .)
    POR             reduce using rule 75 (tipos -> STRING .)
    DIVIDIDO        reduce using rule 75 (tipos -> STRING .)
    MOD             reduce using rule 75 (tipos -> STRING .)
    AS              reduce using rule 75 (tipos -> STRING .)
    PT              reduce using rule 75 (tipos -> STRING .)
    IGUAL           reduce using rule 75 (tipos -> STRING .)
    MENOR           reduce using rule 75 (tipos -> STRING .)
    MAYOR           reduce using rule 75 (tipos -> STRING .)
    MEIGUAL         reduce using rule 75 (tipos -> STRING .)
    MAIGUAL         reduce using rule 75 (tipos -> STRING .)
    DIS             reduce using rule 75 (tipos -> STRING .)
    AND             reduce using rule 75 (tipos -> STRING .)
    OR              reduce using rule 75 (tipos -> STRING .)
    PTCOMA          reduce using rule 75 (tipos -> STRING .)
    CORDER          reduce using rule 75 (tipos -> STRING .)


state 67

    (76) tipos -> AMP . STR

    STR             shift and go to state 112


state 68

    (77) tipos -> USIZE .

    LLAVEDER        reduce using rule 77 (tipos -> USIZE .)
    COMA            reduce using rule 77 (tipos -> USIZE .)
    PARDER          reduce using rule 77 (tipos -> USIZE .)
    DPT             reduce using rule 77 (tipos -> USIZE .)
    LLAVEIZQ        reduce using rule 77 (tipos -> USIZE .)
    MAS             reduce using rule 77 (tipos -> USIZE .)
    MENOS           reduce using rule 77 (tipos -> USIZE .)
    POR             reduce using rule 77 (tipos -> USIZE .)
    DIVIDIDO        reduce using rule 77 (tipos -> USIZE .)
    MOD             reduce using rule 77 (tipos -> USIZE .)
    AS              reduce using rule 77 (tipos -> USIZE .)
    PT              reduce using rule 77 (tipos -> USIZE .)
    IGUAL           reduce using rule 77 (tipos -> USIZE .)
    MENOR           reduce using rule 77 (tipos -> USIZE .)
    MAYOR           reduce using rule 77 (tipos -> USIZE .)
    MEIGUAL         reduce using rule 77 (tipos -> USIZE .)
    MAIGUAL         reduce using rule 77 (tipos -> USIZE .)
    DIS             reduce using rule 77 (tipos -> USIZE .)
    AND             reduce using rule 77 (tipos -> USIZE .)
    OR              reduce using rule 77 (tipos -> USIZE .)
    PTCOMA          reduce using rule 77 (tipos -> USIZE .)
    CORDER          reduce using rule 77 (tipos -> USIZE .)


state 69

    (13) liststruct -> liststruct COMA ID . DPT tipos

    DPT             shift and go to state 113


state 70

    (3) funcion -> PUB FN ID PARIZQ parametros PARDER tipofun . LLAVEIZQ instrucciones LLAVEDER

    LLAVEIZQ        shift and go to state 114


state 71

    (4) funcion -> FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ . instrucciones LLAVEDER
    (17) instrucciones -> . instruccion instrucciones
    (18) instrucciones -> . instruccion
    (19) instruccion -> . LET mutable ID pyc arrtipos IGUAL logica PTCOMA
    (20) instruccion -> . ID listarreglo IGUAL logica PTCOMA
    (21) instruccion -> . ID PARIZQ listexpr PARDER PTCOMA
    (22) instruccion -> . PRINT NOT PARIZQ listexpr PARDER PTCOMA
    (23) instruccion -> . IF logica LLAVEIZQ instrucciones LLAVEDER unelse
    (24) instruccion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (25) instruccion -> . RETURN logica PTCOMA
    (26) instruccion -> . WHILE logica LLAVEIZQ instrucciones LLAVEDER
    (27) instruccion -> . FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER
    (28) instruccion -> . BREAK PTCOMA
    (29) instruccion -> . CONTINUE PTCOMA
    (30) instruccion -> . BREAK logica PTCOMA

    LET             shift and go to state 51
    ID              shift and go to state 52
    PRINT           shift and go to state 53
    IF              shift and go to state 54
    LOOP            shift and go to state 55
    RETURN          shift and go to state 56
    WHILE           shift and go to state 57
    FOR             shift and go to state 58
    BREAK           shift and go to state 59
    CONTINUE        shift and go to state 60

    instrucciones                  shift and go to state 115
    instruccion                    shift and go to state 50

state 72

    (15) tipofun -> MENOS MAYOR . tipos
    (71) tipos -> . I64
    (72) tipos -> . F64
    (73) tipos -> . BOOL
    (74) tipos -> . CHAR
    (75) tipos -> . STRING
    (76) tipos -> . AMP STR
    (77) tipos -> . USIZE

    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

    tipos                          shift and go to state 116

state 73

    (11) parametros2 -> parametros2 COMA mutable ID . DPT tipos

    DPT             shift and go to state 117


state 74

    (12) parametros2 -> mutable ID DPT tipos .

    COMA            reduce using rule 12 (parametros2 -> mutable ID DPT tipos .)
    PARDER          reduce using rule 12 (parametros2 -> mutable ID DPT tipos .)


state 75

    (7) funcion -> FN MAIN PARIZQ PARDER LLAVEIZQ instrucciones LLAVEDER .

    PUB             reduce using rule 7 (funcion -> FN MAIN PARIZQ PARDER LLAVEIZQ instrucciones LLAVEDER .)
    FN              reduce using rule 7 (funcion -> FN MAIN PARIZQ PARDER LLAVEIZQ instrucciones LLAVEDER .)
    MODF            reduce using rule 7 (funcion -> FN MAIN PARIZQ PARDER LLAVEIZQ instrucciones LLAVEDER .)
    STRUCT          reduce using rule 7 (funcion -> FN MAIN PARIZQ PARDER LLAVEIZQ instrucciones LLAVEDER .)
    $end            reduce using rule 7 (funcion -> FN MAIN PARIZQ PARDER LLAVEIZQ instrucciones LLAVEDER .)
    LLAVEDER        reduce using rule 7 (funcion -> FN MAIN PARIZQ PARDER LLAVEIZQ instrucciones LLAVEDER .)


state 76

    (17) instrucciones -> instruccion instrucciones .

    LLAVEDER        reduce using rule 17 (instrucciones -> instruccion instrucciones .)


state 77

    (19) instruccion -> LET mutable . ID pyc arrtipos IGUAL logica PTCOMA

    ID              shift and go to state 118


state 78

    (20) instruccion -> ID listarreglo . IGUAL logica PTCOMA
    (109) listarreglo -> listarreglo . CORIZQ listexpr CORDER

    IGUAL           shift and go to state 119
    CORIZQ          shift and go to state 120


state 79

    (21) instruccion -> ID PARIZQ . listexpr PARDER PTCOMA
    (111) listexpr -> . listexpr COMA expresion
    (112) listexpr -> . expresion
    (78) expresion -> . expresion MAS expresion
    (79) expresion -> . expresion MENOS expresion
    (80) expresion -> . expresion POR expresion
    (81) expresion -> . expresion DIVIDIDO expresion
    (82) expresion -> . expresion MOD expresion
    (83) expresion -> . expresion AS tipos
    (84) expresion -> . instrif
    (85) expresion -> . MENOS expresion
    (86) expresion -> . PARIZQ logica PARDER
    (87) expresion -> . ENTERO
    (88) expresion -> . DECIMAL
    (89) expresion -> . FORM
    (90) expresion -> . TRUE
    (91) expresion -> . FALSE
    (92) expresion -> . VECM NOT listarreglo
    (93) expresion -> . ID listarreglo
    (94) expresion -> . ID PARIZQ listexpr PARDER
    (95) expresion -> . listarreglo
    (96) expresion -> . CHARE
    (97) expresion -> . opcionpow DPT DPT expresion
    (100) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (101) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (102) expresion -> . instrloop
    (103) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (104) expresion -> . expresion PT SQRT PARIZQ PARDER
    (105) expresion -> . expresion PT ABS PARIZQ PARDER
    (106) expresion -> . expresion PT CLONE PARIZQ PARDER
    (107) expresion -> . expresion PT LEN PARIZQ PARDER
    (108) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (37) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (109) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (110) listarreglo -> . empty
    (98) opcionpow -> . expresion
    (99) opcionpow -> . tipos
    (36) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (113) empty -> .
    (71) tipos -> . I64
    (72) tipos -> . F64
    (73) tipos -> . BOOL
    (74) tipos -> . CHAR
    (75) tipos -> . STRING
    (76) tipos -> . AMP STR
    (77) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    MENOS           shift and go to state 87
    PARIZQ          shift and go to state 90
    ENTERO          shift and go to state 91
    DECIMAL         shift and go to state 92
    FORM            shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    VECM            shift and go to state 96
    ID              shift and go to state 98
    CHARE           shift and go to state 99
    POW             shift and go to state 101
    POWF            shift and go to state 102
    IF              shift and go to state 82
    LOOP            shift and go to state 104
    CORIZQ          reduce using rule 113 (empty -> .)
    MAS             reduce using rule 113 (empty -> .)
    POR             reduce using rule 113 (empty -> .)
    DIVIDIDO        reduce using rule 113 (empty -> .)
    MOD             reduce using rule 113 (empty -> .)
    AS              reduce using rule 113 (empty -> .)
    PT              reduce using rule 113 (empty -> .)
    PARDER          reduce using rule 113 (empty -> .)
    COMA            reduce using rule 113 (empty -> .)
    DPT             reduce using rule 113 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 113 (empty -> .) ]

    listexpr                       shift and go to state 121
    expresion                      shift and go to state 122
    tipos                          shift and go to state 88
    instrif                        shift and go to state 89
    listarreglo                    shift and go to state 97
    opcionpow                      shift and go to state 100
    instrloop                      shift and go to state 103
    empty                          shift and go to state 80

state 80

    (110) listarreglo -> empty .

    IGUAL           reduce using rule 110 (listarreglo -> empty .)
    CORIZQ          reduce using rule 110 (listarreglo -> empty .)
    MAS             reduce using rule 110 (listarreglo -> empty .)
    MENOS           reduce using rule 110 (listarreglo -> empty .)
    POR             reduce using rule 110 (listarreglo -> empty .)
    DIVIDIDO        reduce using rule 110 (listarreglo -> empty .)
    MOD             reduce using rule 110 (listarreglo -> empty .)
    AS              reduce using rule 110 (listarreglo -> empty .)
    PT              reduce using rule 110 (listarreglo -> empty .)
    MENOR           reduce using rule 110 (listarreglo -> empty .)
    MAYOR           reduce using rule 110 (listarreglo -> empty .)
    MEIGUAL         reduce using rule 110 (listarreglo -> empty .)
    MAIGUAL         reduce using rule 110 (listarreglo -> empty .)
    DIS             reduce using rule 110 (listarreglo -> empty .)
    LLAVEIZQ        reduce using rule 110 (listarreglo -> empty .)
    AND             reduce using rule 110 (listarreglo -> empty .)
    OR              reduce using rule 110 (listarreglo -> empty .)
    DPT             reduce using rule 110 (listarreglo -> empty .)
    PTCOMA          reduce using rule 110 (listarreglo -> empty .)
    PARDER          reduce using rule 110 (listarreglo -> empty .)
    COMA            reduce using rule 110 (listarreglo -> empty .)
    CORDER          reduce using rule 110 (listarreglo -> empty .)
    LLAVEDER        reduce using rule 110 (listarreglo -> empty .)


state 81

    (22) instruccion -> PRINT NOT . PARIZQ listexpr PARDER PTCOMA

    PARIZQ          shift and go to state 123


state 82

    (37) instrif -> IF . logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (47) logica -> . logica AND logica
    (48) logica -> . logica OR logica
    (49) logica -> . NOT logica
    (50) logica -> . rel
    (51) rel -> . rel IGUAL IGUAL rel
    (52) rel -> . rel MENOR rel
    (53) rel -> . rel MAYOR rel
    (54) rel -> . rel MEIGUAL rel
    (55) rel -> . rel MAIGUAL rel
    (56) rel -> . rel DIS rel
    (57) rel -> . expresion
    (78) expresion -> . expresion MAS expresion
    (79) expresion -> . expresion MENOS expresion
    (80) expresion -> . expresion POR expresion
    (81) expresion -> . expresion DIVIDIDO expresion
    (82) expresion -> . expresion MOD expresion
    (83) expresion -> . expresion AS tipos
    (84) expresion -> . instrif
    (85) expresion -> . MENOS expresion
    (86) expresion -> . PARIZQ logica PARDER
    (87) expresion -> . ENTERO
    (88) expresion -> . DECIMAL
    (89) expresion -> . FORM
    (90) expresion -> . TRUE
    (91) expresion -> . FALSE
    (92) expresion -> . VECM NOT listarreglo
    (93) expresion -> . ID listarreglo
    (94) expresion -> . ID PARIZQ listexpr PARDER
    (95) expresion -> . listarreglo
    (96) expresion -> . CHARE
    (97) expresion -> . opcionpow DPT DPT expresion
    (100) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (101) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (102) expresion -> . instrloop
    (103) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (104) expresion -> . expresion PT SQRT PARIZQ PARDER
    (105) expresion -> . expresion PT ABS PARIZQ PARDER
    (106) expresion -> . expresion PT CLONE PARIZQ PARDER
    (107) expresion -> . expresion PT LEN PARIZQ PARDER
    (108) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (37) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (109) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (110) listarreglo -> . empty
    (98) opcionpow -> . expresion
    (99) opcionpow -> . tipos
    (36) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (113) empty -> .
    (71) tipos -> . I64
    (72) tipos -> . F64
    (73) tipos -> . BOOL
    (74) tipos -> . CHAR
    (75) tipos -> . STRING
    (76) tipos -> . AMP STR
    (77) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    NOT             shift and go to state 84
    MENOS           shift and go to state 87
    PARIZQ          shift and go to state 90
    ENTERO          shift and go to state 91
    DECIMAL         shift and go to state 92
    FORM            shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    VECM            shift and go to state 96
    ID              shift and go to state 98
    CHARE           shift and go to state 99
    POW             shift and go to state 101
    POWF            shift and go to state 102
    IF              shift and go to state 82
    LOOP            shift and go to state 104
    CORIZQ          reduce using rule 113 (empty -> .)
    MAS             reduce using rule 113 (empty -> .)
    POR             reduce using rule 113 (empty -> .)
    DIVIDIDO        reduce using rule 113 (empty -> .)
    MOD             reduce using rule 113 (empty -> .)
    AS              reduce using rule 113 (empty -> .)
    PT              reduce using rule 113 (empty -> .)
    IGUAL           reduce using rule 113 (empty -> .)
    MENOR           reduce using rule 113 (empty -> .)
    MAYOR           reduce using rule 113 (empty -> .)
    MEIGUAL         reduce using rule 113 (empty -> .)
    MAIGUAL         reduce using rule 113 (empty -> .)
    DIS             reduce using rule 113 (empty -> .)
    LLAVEIZQ        reduce using rule 113 (empty -> .)
    AND             reduce using rule 113 (empty -> .)
    OR              reduce using rule 113 (empty -> .)
    DPT             reduce using rule 113 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 113 (empty -> .) ]

    logica                         shift and go to state 124
    rel                            shift and go to state 85
    expresion                      shift and go to state 86
    tipos                          shift and go to state 88
    instrif                        shift and go to state 89
    listarreglo                    shift and go to state 97
    opcionpow                      shift and go to state 100
    instrloop                      shift and go to state 103
    empty                          shift and go to state 80

state 83

    (23) instruccion -> IF logica . LLAVEIZQ instrucciones LLAVEDER unelse
    (47) logica -> logica . AND logica
    (48) logica -> logica . OR logica

    LLAVEIZQ        shift and go to state 125
    AND             shift and go to state 126
    OR              shift and go to state 127


state 84

    (49) logica -> NOT . logica
    (47) logica -> . logica AND logica
    (48) logica -> . logica OR logica
    (49) logica -> . NOT logica
    (50) logica -> . rel
    (51) rel -> . rel IGUAL IGUAL rel
    (52) rel -> . rel MENOR rel
    (53) rel -> . rel MAYOR rel
    (54) rel -> . rel MEIGUAL rel
    (55) rel -> . rel MAIGUAL rel
    (56) rel -> . rel DIS rel
    (57) rel -> . expresion
    (78) expresion -> . expresion MAS expresion
    (79) expresion -> . expresion MENOS expresion
    (80) expresion -> . expresion POR expresion
    (81) expresion -> . expresion DIVIDIDO expresion
    (82) expresion -> . expresion MOD expresion
    (83) expresion -> . expresion AS tipos
    (84) expresion -> . instrif
    (85) expresion -> . MENOS expresion
    (86) expresion -> . PARIZQ logica PARDER
    (87) expresion -> . ENTERO
    (88) expresion -> . DECIMAL
    (89) expresion -> . FORM
    (90) expresion -> . TRUE
    (91) expresion -> . FALSE
    (92) expresion -> . VECM NOT listarreglo
    (93) expresion -> . ID listarreglo
    (94) expresion -> . ID PARIZQ listexpr PARDER
    (95) expresion -> . listarreglo
    (96) expresion -> . CHARE
    (97) expresion -> . opcionpow DPT DPT expresion
    (100) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (101) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (102) expresion -> . instrloop
    (103) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (104) expresion -> . expresion PT SQRT PARIZQ PARDER
    (105) expresion -> . expresion PT ABS PARIZQ PARDER
    (106) expresion -> . expresion PT CLONE PARIZQ PARDER
    (107) expresion -> . expresion PT LEN PARIZQ PARDER
    (108) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (37) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (109) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (110) listarreglo -> . empty
    (98) opcionpow -> . expresion
    (99) opcionpow -> . tipos
    (36) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (113) empty -> .
    (71) tipos -> . I64
    (72) tipos -> . F64
    (73) tipos -> . BOOL
    (74) tipos -> . CHAR
    (75) tipos -> . STRING
    (76) tipos -> . AMP STR
    (77) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    NOT             shift and go to state 84
    MENOS           shift and go to state 87
    PARIZQ          shift and go to state 90
    ENTERO          shift and go to state 91
    DECIMAL         shift and go to state 92
    FORM            shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    VECM            shift and go to state 96
    ID              shift and go to state 98
    CHARE           shift and go to state 99
    POW             shift and go to state 101
    POWF            shift and go to state 102
    IF              shift and go to state 82
    LOOP            shift and go to state 104
    CORIZQ          reduce using rule 113 (empty -> .)
    MAS             reduce using rule 113 (empty -> .)
    POR             reduce using rule 113 (empty -> .)
    DIVIDIDO        reduce using rule 113 (empty -> .)
    MOD             reduce using rule 113 (empty -> .)
    AS              reduce using rule 113 (empty -> .)
    PT              reduce using rule 113 (empty -> .)
    IGUAL           reduce using rule 113 (empty -> .)
    MENOR           reduce using rule 113 (empty -> .)
    MAYOR           reduce using rule 113 (empty -> .)
    MEIGUAL         reduce using rule 113 (empty -> .)
    MAIGUAL         reduce using rule 113 (empty -> .)
    DIS             reduce using rule 113 (empty -> .)
    AND             reduce using rule 113 (empty -> .)
    OR              reduce using rule 113 (empty -> .)
    LLAVEIZQ        reduce using rule 113 (empty -> .)
    PTCOMA          reduce using rule 113 (empty -> .)
    PARDER          reduce using rule 113 (empty -> .)
    DPT             reduce using rule 113 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 113 (empty -> .) ]

    logica                         shift and go to state 128
    rel                            shift and go to state 85
    expresion                      shift and go to state 86
    tipos                          shift and go to state 88
    instrif                        shift and go to state 89
    listarreglo                    shift and go to state 97
    opcionpow                      shift and go to state 100
    instrloop                      shift and go to state 103
    empty                          shift and go to state 80

state 85

    (50) logica -> rel .
    (51) rel -> rel . IGUAL IGUAL rel
    (52) rel -> rel . MENOR rel
    (53) rel -> rel . MAYOR rel
    (54) rel -> rel . MEIGUAL rel
    (55) rel -> rel . MAIGUAL rel
    (56) rel -> rel . DIS rel

    LLAVEIZQ        reduce using rule 50 (logica -> rel .)
    AND             reduce using rule 50 (logica -> rel .)
    OR              reduce using rule 50 (logica -> rel .)
    PTCOMA          reduce using rule 50 (logica -> rel .)
    PARDER          reduce using rule 50 (logica -> rel .)
    IGUAL           shift and go to state 129
    MENOR           shift and go to state 130
    MAYOR           shift and go to state 131
    MEIGUAL         shift and go to state 132
    MAIGUAL         shift and go to state 133
    DIS             shift and go to state 134


state 86

    (57) rel -> expresion .
    (78) expresion -> expresion . MAS expresion
    (79) expresion -> expresion . MENOS expresion
    (80) expresion -> expresion . POR expresion
    (81) expresion -> expresion . DIVIDIDO expresion
    (82) expresion -> expresion . MOD expresion
    (83) expresion -> expresion . AS tipos
    (103) expresion -> expresion . PT TOSTRING PARIZQ PARDER
    (104) expresion -> expresion . PT SQRT PARIZQ PARDER
    (105) expresion -> expresion . PT ABS PARIZQ PARDER
    (106) expresion -> expresion . PT CLONE PARIZQ PARDER
    (107) expresion -> expresion . PT LEN PARIZQ PARDER
    (108) expresion -> expresion . PT TOOWNED PARIZQ PARDER
    (98) opcionpow -> expresion .

    IGUAL           reduce using rule 57 (rel -> expresion .)
    MENOR           reduce using rule 57 (rel -> expresion .)
    MAYOR           reduce using rule 57 (rel -> expresion .)
    MEIGUAL         reduce using rule 57 (rel -> expresion .)
    MAIGUAL         reduce using rule 57 (rel -> expresion .)
    DIS             reduce using rule 57 (rel -> expresion .)
    LLAVEIZQ        reduce using rule 57 (rel -> expresion .)
    AND             reduce using rule 57 (rel -> expresion .)
    OR              reduce using rule 57 (rel -> expresion .)
    PTCOMA          reduce using rule 57 (rel -> expresion .)
    PARDER          reduce using rule 57 (rel -> expresion .)
    MAS             shift and go to state 135
    MENOS           shift and go to state 136
    POR             shift and go to state 137
    DIVIDIDO        shift and go to state 138
    MOD             shift and go to state 139
    AS              shift and go to state 140
    PT              shift and go to state 141
    DPT             reduce using rule 98 (opcionpow -> expresion .)


state 87

    (85) expresion -> MENOS . expresion
    (78) expresion -> . expresion MAS expresion
    (79) expresion -> . expresion MENOS expresion
    (80) expresion -> . expresion POR expresion
    (81) expresion -> . expresion DIVIDIDO expresion
    (82) expresion -> . expresion MOD expresion
    (83) expresion -> . expresion AS tipos
    (84) expresion -> . instrif
    (85) expresion -> . MENOS expresion
    (86) expresion -> . PARIZQ logica PARDER
    (87) expresion -> . ENTERO
    (88) expresion -> . DECIMAL
    (89) expresion -> . FORM
    (90) expresion -> . TRUE
    (91) expresion -> . FALSE
    (92) expresion -> . VECM NOT listarreglo
    (93) expresion -> . ID listarreglo
    (94) expresion -> . ID PARIZQ listexpr PARDER
    (95) expresion -> . listarreglo
    (96) expresion -> . CHARE
    (97) expresion -> . opcionpow DPT DPT expresion
    (100) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (101) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (102) expresion -> . instrloop
    (103) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (104) expresion -> . expresion PT SQRT PARIZQ PARDER
    (105) expresion -> . expresion PT ABS PARIZQ PARDER
    (106) expresion -> . expresion PT CLONE PARIZQ PARDER
    (107) expresion -> . expresion PT LEN PARIZQ PARDER
    (108) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (37) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (109) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (110) listarreglo -> . empty
    (98) opcionpow -> . expresion
    (99) opcionpow -> . tipos
    (36) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (113) empty -> .
    (71) tipos -> . I64
    (72) tipos -> . F64
    (73) tipos -> . BOOL
    (74) tipos -> . CHAR
    (75) tipos -> . STRING
    (76) tipos -> . AMP STR
    (77) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    MENOS           shift and go to state 87
    PARIZQ          shift and go to state 90
    ENTERO          shift and go to state 91
    DECIMAL         shift and go to state 92
    FORM            shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    VECM            shift and go to state 96
    ID              shift and go to state 98
    CHARE           shift and go to state 99
    POW             shift and go to state 101
    POWF            shift and go to state 102
    IF              shift and go to state 82
    LOOP            shift and go to state 104
    CORIZQ          reduce using rule 113 (empty -> .)
    MAS             reduce using rule 113 (empty -> .)
    POR             reduce using rule 113 (empty -> .)
    DIVIDIDO        reduce using rule 113 (empty -> .)
    MOD             reduce using rule 113 (empty -> .)
    AS              reduce using rule 113 (empty -> .)
    PT              reduce using rule 113 (empty -> .)
    IGUAL           reduce using rule 113 (empty -> .)
    MENOR           reduce using rule 113 (empty -> .)
    MAYOR           reduce using rule 113 (empty -> .)
    MEIGUAL         reduce using rule 113 (empty -> .)
    MAIGUAL         reduce using rule 113 (empty -> .)
    DIS             reduce using rule 113 (empty -> .)
    LLAVEIZQ        reduce using rule 113 (empty -> .)
    AND             reduce using rule 113 (empty -> .)
    OR              reduce using rule 113 (empty -> .)
    DPT             reduce using rule 113 (empty -> .)
    PTCOMA          reduce using rule 113 (empty -> .)
    PARDER          reduce using rule 113 (empty -> .)
    COMA            reduce using rule 113 (empty -> .)
    CORDER          reduce using rule 113 (empty -> .)
    LLAVEDER        reduce using rule 113 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 113 (empty -> .) ]

    expresion                      shift and go to state 142
    tipos                          shift and go to state 88
    instrif                        shift and go to state 89
    listarreglo                    shift and go to state 97
    opcionpow                      shift and go to state 100
    instrloop                      shift and go to state 103
    empty                          shift and go to state 80

state 88

    (99) opcionpow -> tipos .

    DPT             reduce using rule 99 (opcionpow -> tipos .)


state 89

    (84) expresion -> instrif .

    MAS             reduce using rule 84 (expresion -> instrif .)
    MENOS           reduce using rule 84 (expresion -> instrif .)
    POR             reduce using rule 84 (expresion -> instrif .)
    DIVIDIDO        reduce using rule 84 (expresion -> instrif .)
    MOD             reduce using rule 84 (expresion -> instrif .)
    AS              reduce using rule 84 (expresion -> instrif .)
    PT              reduce using rule 84 (expresion -> instrif .)
    IGUAL           reduce using rule 84 (expresion -> instrif .)
    MENOR           reduce using rule 84 (expresion -> instrif .)
    MAYOR           reduce using rule 84 (expresion -> instrif .)
    MEIGUAL         reduce using rule 84 (expresion -> instrif .)
    MAIGUAL         reduce using rule 84 (expresion -> instrif .)
    DIS             reduce using rule 84 (expresion -> instrif .)
    LLAVEIZQ        reduce using rule 84 (expresion -> instrif .)
    AND             reduce using rule 84 (expresion -> instrif .)
    OR              reduce using rule 84 (expresion -> instrif .)
    DPT             reduce using rule 84 (expresion -> instrif .)
    PTCOMA          reduce using rule 84 (expresion -> instrif .)
    PARDER          reduce using rule 84 (expresion -> instrif .)
    COMA            reduce using rule 84 (expresion -> instrif .)
    CORDER          reduce using rule 84 (expresion -> instrif .)
    LLAVEDER        reduce using rule 84 (expresion -> instrif .)


state 90

    (86) expresion -> PARIZQ . logica PARDER
    (47) logica -> . logica AND logica
    (48) logica -> . logica OR logica
    (49) logica -> . NOT logica
    (50) logica -> . rel
    (51) rel -> . rel IGUAL IGUAL rel
    (52) rel -> . rel MENOR rel
    (53) rel -> . rel MAYOR rel
    (54) rel -> . rel MEIGUAL rel
    (55) rel -> . rel MAIGUAL rel
    (56) rel -> . rel DIS rel
    (57) rel -> . expresion
    (78) expresion -> . expresion MAS expresion
    (79) expresion -> . expresion MENOS expresion
    (80) expresion -> . expresion POR expresion
    (81) expresion -> . expresion DIVIDIDO expresion
    (82) expresion -> . expresion MOD expresion
    (83) expresion -> . expresion AS tipos
    (84) expresion -> . instrif
    (85) expresion -> . MENOS expresion
    (86) expresion -> . PARIZQ logica PARDER
    (87) expresion -> . ENTERO
    (88) expresion -> . DECIMAL
    (89) expresion -> . FORM
    (90) expresion -> . TRUE
    (91) expresion -> . FALSE
    (92) expresion -> . VECM NOT listarreglo
    (93) expresion -> . ID listarreglo
    (94) expresion -> . ID PARIZQ listexpr PARDER
    (95) expresion -> . listarreglo
    (96) expresion -> . CHARE
    (97) expresion -> . opcionpow DPT DPT expresion
    (100) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (101) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (102) expresion -> . instrloop
    (103) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (104) expresion -> . expresion PT SQRT PARIZQ PARDER
    (105) expresion -> . expresion PT ABS PARIZQ PARDER
    (106) expresion -> . expresion PT CLONE PARIZQ PARDER
    (107) expresion -> . expresion PT LEN PARIZQ PARDER
    (108) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (37) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (109) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (110) listarreglo -> . empty
    (98) opcionpow -> . expresion
    (99) opcionpow -> . tipos
    (36) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (113) empty -> .
    (71) tipos -> . I64
    (72) tipos -> . F64
    (73) tipos -> . BOOL
    (74) tipos -> . CHAR
    (75) tipos -> . STRING
    (76) tipos -> . AMP STR
    (77) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    NOT             shift and go to state 84
    MENOS           shift and go to state 87
    PARIZQ          shift and go to state 90
    ENTERO          shift and go to state 91
    DECIMAL         shift and go to state 92
    FORM            shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    VECM            shift and go to state 96
    ID              shift and go to state 98
    CHARE           shift and go to state 99
    POW             shift and go to state 101
    POWF            shift and go to state 102
    IF              shift and go to state 82
    LOOP            shift and go to state 104
    CORIZQ          reduce using rule 113 (empty -> .)
    MAS             reduce using rule 113 (empty -> .)
    POR             reduce using rule 113 (empty -> .)
    DIVIDIDO        reduce using rule 113 (empty -> .)
    MOD             reduce using rule 113 (empty -> .)
    AS              reduce using rule 113 (empty -> .)
    PT              reduce using rule 113 (empty -> .)
    IGUAL           reduce using rule 113 (empty -> .)
    MENOR           reduce using rule 113 (empty -> .)
    MAYOR           reduce using rule 113 (empty -> .)
    MEIGUAL         reduce using rule 113 (empty -> .)
    MAIGUAL         reduce using rule 113 (empty -> .)
    DIS             reduce using rule 113 (empty -> .)
    PARDER          reduce using rule 113 (empty -> .)
    AND             reduce using rule 113 (empty -> .)
    OR              reduce using rule 113 (empty -> .)
    DPT             reduce using rule 113 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 113 (empty -> .) ]

    logica                         shift and go to state 143
    rel                            shift and go to state 85
    expresion                      shift and go to state 86
    tipos                          shift and go to state 88
    instrif                        shift and go to state 89
    listarreglo                    shift and go to state 97
    opcionpow                      shift and go to state 100
    instrloop                      shift and go to state 103
    empty                          shift and go to state 80

state 91

    (87) expresion -> ENTERO .

    MAS             reduce using rule 87 (expresion -> ENTERO .)
    MENOS           reduce using rule 87 (expresion -> ENTERO .)
    POR             reduce using rule 87 (expresion -> ENTERO .)
    DIVIDIDO        reduce using rule 87 (expresion -> ENTERO .)
    MOD             reduce using rule 87 (expresion -> ENTERO .)
    AS              reduce using rule 87 (expresion -> ENTERO .)
    PT              reduce using rule 87 (expresion -> ENTERO .)
    IGUAL           reduce using rule 87 (expresion -> ENTERO .)
    MENOR           reduce using rule 87 (expresion -> ENTERO .)
    MAYOR           reduce using rule 87 (expresion -> ENTERO .)
    MEIGUAL         reduce using rule 87 (expresion -> ENTERO .)
    MAIGUAL         reduce using rule 87 (expresion -> ENTERO .)
    DIS             reduce using rule 87 (expresion -> ENTERO .)
    LLAVEIZQ        reduce using rule 87 (expresion -> ENTERO .)
    AND             reduce using rule 87 (expresion -> ENTERO .)
    OR              reduce using rule 87 (expresion -> ENTERO .)
    DPT             reduce using rule 87 (expresion -> ENTERO .)
    PTCOMA          reduce using rule 87 (expresion -> ENTERO .)
    PARDER          reduce using rule 87 (expresion -> ENTERO .)
    COMA            reduce using rule 87 (expresion -> ENTERO .)
    CORDER          reduce using rule 87 (expresion -> ENTERO .)
    LLAVEDER        reduce using rule 87 (expresion -> ENTERO .)


state 92

    (88) expresion -> DECIMAL .

    MAS             reduce using rule 88 (expresion -> DECIMAL .)
    MENOS           reduce using rule 88 (expresion -> DECIMAL .)
    POR             reduce using rule 88 (expresion -> DECIMAL .)
    DIVIDIDO        reduce using rule 88 (expresion -> DECIMAL .)
    MOD             reduce using rule 88 (expresion -> DECIMAL .)
    AS              reduce using rule 88 (expresion -> DECIMAL .)
    PT              reduce using rule 88 (expresion -> DECIMAL .)
    IGUAL           reduce using rule 88 (expresion -> DECIMAL .)
    MENOR           reduce using rule 88 (expresion -> DECIMAL .)
    MAYOR           reduce using rule 88 (expresion -> DECIMAL .)
    MEIGUAL         reduce using rule 88 (expresion -> DECIMAL .)
    MAIGUAL         reduce using rule 88 (expresion -> DECIMAL .)
    DIS             reduce using rule 88 (expresion -> DECIMAL .)
    LLAVEIZQ        reduce using rule 88 (expresion -> DECIMAL .)
    AND             reduce using rule 88 (expresion -> DECIMAL .)
    OR              reduce using rule 88 (expresion -> DECIMAL .)
    DPT             reduce using rule 88 (expresion -> DECIMAL .)
    PTCOMA          reduce using rule 88 (expresion -> DECIMAL .)
    PARDER          reduce using rule 88 (expresion -> DECIMAL .)
    COMA            reduce using rule 88 (expresion -> DECIMAL .)
    CORDER          reduce using rule 88 (expresion -> DECIMAL .)
    LLAVEDER        reduce using rule 88 (expresion -> DECIMAL .)


state 93

    (89) expresion -> FORM .

    MAS             reduce using rule 89 (expresion -> FORM .)
    MENOS           reduce using rule 89 (expresion -> FORM .)
    POR             reduce using rule 89 (expresion -> FORM .)
    DIVIDIDO        reduce using rule 89 (expresion -> FORM .)
    MOD             reduce using rule 89 (expresion -> FORM .)
    AS              reduce using rule 89 (expresion -> FORM .)
    PT              reduce using rule 89 (expresion -> FORM .)
    IGUAL           reduce using rule 89 (expresion -> FORM .)
    MENOR           reduce using rule 89 (expresion -> FORM .)
    MAYOR           reduce using rule 89 (expresion -> FORM .)
    MEIGUAL         reduce using rule 89 (expresion -> FORM .)
    MAIGUAL         reduce using rule 89 (expresion -> FORM .)
    DIS             reduce using rule 89 (expresion -> FORM .)
    LLAVEIZQ        reduce using rule 89 (expresion -> FORM .)
    AND             reduce using rule 89 (expresion -> FORM .)
    OR              reduce using rule 89 (expresion -> FORM .)
    DPT             reduce using rule 89 (expresion -> FORM .)
    PTCOMA          reduce using rule 89 (expresion -> FORM .)
    PARDER          reduce using rule 89 (expresion -> FORM .)
    COMA            reduce using rule 89 (expresion -> FORM .)
    CORDER          reduce using rule 89 (expresion -> FORM .)
    LLAVEDER        reduce using rule 89 (expresion -> FORM .)


state 94

    (90) expresion -> TRUE .

    MAS             reduce using rule 90 (expresion -> TRUE .)
    MENOS           reduce using rule 90 (expresion -> TRUE .)
    POR             reduce using rule 90 (expresion -> TRUE .)
    DIVIDIDO        reduce using rule 90 (expresion -> TRUE .)
    MOD             reduce using rule 90 (expresion -> TRUE .)
    AS              reduce using rule 90 (expresion -> TRUE .)
    PT              reduce using rule 90 (expresion -> TRUE .)
    IGUAL           reduce using rule 90 (expresion -> TRUE .)
    MENOR           reduce using rule 90 (expresion -> TRUE .)
    MAYOR           reduce using rule 90 (expresion -> TRUE .)
    MEIGUAL         reduce using rule 90 (expresion -> TRUE .)
    MAIGUAL         reduce using rule 90 (expresion -> TRUE .)
    DIS             reduce using rule 90 (expresion -> TRUE .)
    LLAVEIZQ        reduce using rule 90 (expresion -> TRUE .)
    AND             reduce using rule 90 (expresion -> TRUE .)
    OR              reduce using rule 90 (expresion -> TRUE .)
    DPT             reduce using rule 90 (expresion -> TRUE .)
    PTCOMA          reduce using rule 90 (expresion -> TRUE .)
    PARDER          reduce using rule 90 (expresion -> TRUE .)
    COMA            reduce using rule 90 (expresion -> TRUE .)
    CORDER          reduce using rule 90 (expresion -> TRUE .)
    LLAVEDER        reduce using rule 90 (expresion -> TRUE .)


state 95

    (91) expresion -> FALSE .

    MAS             reduce using rule 91 (expresion -> FALSE .)
    MENOS           reduce using rule 91 (expresion -> FALSE .)
    POR             reduce using rule 91 (expresion -> FALSE .)
    DIVIDIDO        reduce using rule 91 (expresion -> FALSE .)
    MOD             reduce using rule 91 (expresion -> FALSE .)
    AS              reduce using rule 91 (expresion -> FALSE .)
    PT              reduce using rule 91 (expresion -> FALSE .)
    IGUAL           reduce using rule 91 (expresion -> FALSE .)
    MENOR           reduce using rule 91 (expresion -> FALSE .)
    MAYOR           reduce using rule 91 (expresion -> FALSE .)
    MEIGUAL         reduce using rule 91 (expresion -> FALSE .)
    MAIGUAL         reduce using rule 91 (expresion -> FALSE .)
    DIS             reduce using rule 91 (expresion -> FALSE .)
    LLAVEIZQ        reduce using rule 91 (expresion -> FALSE .)
    AND             reduce using rule 91 (expresion -> FALSE .)
    OR              reduce using rule 91 (expresion -> FALSE .)
    DPT             reduce using rule 91 (expresion -> FALSE .)
    PTCOMA          reduce using rule 91 (expresion -> FALSE .)
    PARDER          reduce using rule 91 (expresion -> FALSE .)
    COMA            reduce using rule 91 (expresion -> FALSE .)
    CORDER          reduce using rule 91 (expresion -> FALSE .)
    LLAVEDER        reduce using rule 91 (expresion -> FALSE .)


state 96

    (92) expresion -> VECM . NOT listarreglo

    NOT             shift and go to state 144


state 97

    (95) expresion -> listarreglo .
    (109) listarreglo -> listarreglo . CORIZQ listexpr CORDER

    MAS             reduce using rule 95 (expresion -> listarreglo .)
    MENOS           reduce using rule 95 (expresion -> listarreglo .)
    POR             reduce using rule 95 (expresion -> listarreglo .)
    DIVIDIDO        reduce using rule 95 (expresion -> listarreglo .)
    MOD             reduce using rule 95 (expresion -> listarreglo .)
    AS              reduce using rule 95 (expresion -> listarreglo .)
    PT              reduce using rule 95 (expresion -> listarreglo .)
    IGUAL           reduce using rule 95 (expresion -> listarreglo .)
    MENOR           reduce using rule 95 (expresion -> listarreglo .)
    MAYOR           reduce using rule 95 (expresion -> listarreglo .)
    MEIGUAL         reduce using rule 95 (expresion -> listarreglo .)
    MAIGUAL         reduce using rule 95 (expresion -> listarreglo .)
    DIS             reduce using rule 95 (expresion -> listarreglo .)
    LLAVEIZQ        reduce using rule 95 (expresion -> listarreglo .)
    AND             reduce using rule 95 (expresion -> listarreglo .)
    OR              reduce using rule 95 (expresion -> listarreglo .)
    DPT             reduce using rule 95 (expresion -> listarreglo .)
    PTCOMA          reduce using rule 95 (expresion -> listarreglo .)
    PARDER          reduce using rule 95 (expresion -> listarreglo .)
    COMA            reduce using rule 95 (expresion -> listarreglo .)
    CORDER          reduce using rule 95 (expresion -> listarreglo .)
    LLAVEDER        reduce using rule 95 (expresion -> listarreglo .)
    CORIZQ          shift and go to state 120


state 98

    (93) expresion -> ID . listarreglo
    (94) expresion -> ID . PARIZQ listexpr PARDER
    (109) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (110) listarreglo -> . empty
    (113) empty -> .

    PARIZQ          shift and go to state 146
    CORIZQ          reduce using rule 113 (empty -> .)
    MAS             reduce using rule 113 (empty -> .)
    MENOS           reduce using rule 113 (empty -> .)
    POR             reduce using rule 113 (empty -> .)
    DIVIDIDO        reduce using rule 113 (empty -> .)
    MOD             reduce using rule 113 (empty -> .)
    AS              reduce using rule 113 (empty -> .)
    PT              reduce using rule 113 (empty -> .)
    IGUAL           reduce using rule 113 (empty -> .)
    MENOR           reduce using rule 113 (empty -> .)
    MAYOR           reduce using rule 113 (empty -> .)
    MEIGUAL         reduce using rule 113 (empty -> .)
    MAIGUAL         reduce using rule 113 (empty -> .)
    DIS             reduce using rule 113 (empty -> .)
    LLAVEIZQ        reduce using rule 113 (empty -> .)
    AND             reduce using rule 113 (empty -> .)
    OR              reduce using rule 113 (empty -> .)
    DPT             reduce using rule 113 (empty -> .)
    PTCOMA          reduce using rule 113 (empty -> .)
    PARDER          reduce using rule 113 (empty -> .)
    COMA            reduce using rule 113 (empty -> .)
    CORDER          reduce using rule 113 (empty -> .)
    LLAVEDER        reduce using rule 113 (empty -> .)

    listarreglo                    shift and go to state 145
    empty                          shift and go to state 80

state 99

    (96) expresion -> CHARE .

    MAS             reduce using rule 96 (expresion -> CHARE .)
    MENOS           reduce using rule 96 (expresion -> CHARE .)
    POR             reduce using rule 96 (expresion -> CHARE .)
    DIVIDIDO        reduce using rule 96 (expresion -> CHARE .)
    MOD             reduce using rule 96 (expresion -> CHARE .)
    AS              reduce using rule 96 (expresion -> CHARE .)
    PT              reduce using rule 96 (expresion -> CHARE .)
    IGUAL           reduce using rule 96 (expresion -> CHARE .)
    MENOR           reduce using rule 96 (expresion -> CHARE .)
    MAYOR           reduce using rule 96 (expresion -> CHARE .)
    MEIGUAL         reduce using rule 96 (expresion -> CHARE .)
    MAIGUAL         reduce using rule 96 (expresion -> CHARE .)
    DIS             reduce using rule 96 (expresion -> CHARE .)
    LLAVEIZQ        reduce using rule 96 (expresion -> CHARE .)
    AND             reduce using rule 96 (expresion -> CHARE .)
    OR              reduce using rule 96 (expresion -> CHARE .)
    DPT             reduce using rule 96 (expresion -> CHARE .)
    PTCOMA          reduce using rule 96 (expresion -> CHARE .)
    PARDER          reduce using rule 96 (expresion -> CHARE .)
    COMA            reduce using rule 96 (expresion -> CHARE .)
    CORDER          reduce using rule 96 (expresion -> CHARE .)
    LLAVEDER        reduce using rule 96 (expresion -> CHARE .)


state 100

    (97) expresion -> opcionpow . DPT DPT expresion

    DPT             shift and go to state 147


state 101

    (100) expresion -> POW . PARIZQ ENTERO COMA ENTERO PARDER

    PARIZQ          shift and go to state 148


state 102

    (101) expresion -> POWF . PARIZQ DECIMAL COMA DECIMAL PARDER

    PARIZQ          shift and go to state 149


state 103

    (102) expresion -> instrloop .

    MAS             reduce using rule 102 (expresion -> instrloop .)
    MENOS           reduce using rule 102 (expresion -> instrloop .)
    POR             reduce using rule 102 (expresion -> instrloop .)
    DIVIDIDO        reduce using rule 102 (expresion -> instrloop .)
    MOD             reduce using rule 102 (expresion -> instrloop .)
    AS              reduce using rule 102 (expresion -> instrloop .)
    PT              reduce using rule 102 (expresion -> instrloop .)
    IGUAL           reduce using rule 102 (expresion -> instrloop .)
    MENOR           reduce using rule 102 (expresion -> instrloop .)
    MAYOR           reduce using rule 102 (expresion -> instrloop .)
    MEIGUAL         reduce using rule 102 (expresion -> instrloop .)
    MAIGUAL         reduce using rule 102 (expresion -> instrloop .)
    DIS             reduce using rule 102 (expresion -> instrloop .)
    LLAVEIZQ        reduce using rule 102 (expresion -> instrloop .)
    AND             reduce using rule 102 (expresion -> instrloop .)
    OR              reduce using rule 102 (expresion -> instrloop .)
    DPT             reduce using rule 102 (expresion -> instrloop .)
    PTCOMA          reduce using rule 102 (expresion -> instrloop .)
    PARDER          reduce using rule 102 (expresion -> instrloop .)
    COMA            reduce using rule 102 (expresion -> instrloop .)
    CORDER          reduce using rule 102 (expresion -> instrloop .)
    LLAVEDER        reduce using rule 102 (expresion -> instrloop .)


state 104

    (36) instrloop -> LOOP . LLAVEIZQ instrucciones LLAVEDER

    LLAVEIZQ        shift and go to state 150


state 105

    (24) instruccion -> LOOP LLAVEIZQ . instrucciones LLAVEDER
    (17) instrucciones -> . instruccion instrucciones
    (18) instrucciones -> . instruccion
    (19) instruccion -> . LET mutable ID pyc arrtipos IGUAL logica PTCOMA
    (20) instruccion -> . ID listarreglo IGUAL logica PTCOMA
    (21) instruccion -> . ID PARIZQ listexpr PARDER PTCOMA
    (22) instruccion -> . PRINT NOT PARIZQ listexpr PARDER PTCOMA
    (23) instruccion -> . IF logica LLAVEIZQ instrucciones LLAVEDER unelse
    (24) instruccion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (25) instruccion -> . RETURN logica PTCOMA
    (26) instruccion -> . WHILE logica LLAVEIZQ instrucciones LLAVEDER
    (27) instruccion -> . FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER
    (28) instruccion -> . BREAK PTCOMA
    (29) instruccion -> . CONTINUE PTCOMA
    (30) instruccion -> . BREAK logica PTCOMA

    LET             shift and go to state 51
    ID              shift and go to state 52
    PRINT           shift and go to state 53
    IF              shift and go to state 54
    LOOP            shift and go to state 55
    RETURN          shift and go to state 56
    WHILE           shift and go to state 57
    FOR             shift and go to state 58
    BREAK           shift and go to state 59
    CONTINUE        shift and go to state 60

    instrucciones                  shift and go to state 151
    instruccion                    shift and go to state 50

state 106

    (25) instruccion -> RETURN logica . PTCOMA
    (47) logica -> logica . AND logica
    (48) logica -> logica . OR logica

    PTCOMA          shift and go to state 152
    AND             shift and go to state 126
    OR              shift and go to state 127


state 107

    (26) instruccion -> WHILE logica . LLAVEIZQ instrucciones LLAVEDER
    (47) logica -> logica . AND logica
    (48) logica -> logica . OR logica

    LLAVEIZQ        shift and go to state 153
    AND             shift and go to state 126
    OR              shift and go to state 127


state 108

    (27) instruccion -> FOR ID . IN opcionfor LLAVEIZQ instrucciones LLAVEDER

    IN              shift and go to state 154


state 109

    (28) instruccion -> BREAK PTCOMA .

    LET             reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    ID              reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    PRINT           reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    IF              reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    LOOP            reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    RETURN          reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    WHILE           reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    FOR             reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    BREAK           reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    CONTINUE        reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    LLAVEDER        reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    MENOS           reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    PARIZQ          reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    ENTERO          reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    DECIMAL         reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    FORM            reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    TRUE            reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    FALSE           reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    VECM            reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    CHARE           reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    POW             reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    POWF            reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    I64             reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    F64             reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    BOOL            reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    CHAR            reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    STRING          reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    AMP             reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    USIZE           reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    MAS             reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    POR             reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    DIVIDIDO        reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    MOD             reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    AS              reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    PT              reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    CORIZQ          reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    DPT             reduce using rule 28 (instruccion -> BREAK PTCOMA .)


state 110

    (30) instruccion -> BREAK logica . PTCOMA
    (47) logica -> logica . AND logica
    (48) logica -> logica . OR logica

    PTCOMA          shift and go to state 155
    AND             shift and go to state 126
    OR              shift and go to state 127


state 111

    (29) instruccion -> CONTINUE PTCOMA .

    LET             reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    ID              reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    PRINT           reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    IF              reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    LOOP            reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    RETURN          reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    WHILE           reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    FOR             reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    BREAK           reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    CONTINUE        reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    LLAVEDER        reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    MENOS           reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    PARIZQ          reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    ENTERO          reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    DECIMAL         reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    FORM            reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    TRUE            reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    FALSE           reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    VECM            reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    CHARE           reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    POW             reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    POWF            reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    I64             reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    F64             reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    BOOL            reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    CHAR            reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    STRING          reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    AMP             reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    USIZE           reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    MAS             reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    POR             reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    DIVIDIDO        reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    MOD             reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    AS              reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    PT              reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    CORIZQ          reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    DPT             reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)


state 112

    (76) tipos -> AMP STR .

    LLAVEDER        reduce using rule 76 (tipos -> AMP STR .)
    COMA            reduce using rule 76 (tipos -> AMP STR .)
    PARDER          reduce using rule 76 (tipos -> AMP STR .)
    DPT             reduce using rule 76 (tipos -> AMP STR .)
    LLAVEIZQ        reduce using rule 76 (tipos -> AMP STR .)
    MAS             reduce using rule 76 (tipos -> AMP STR .)
    MENOS           reduce using rule 76 (tipos -> AMP STR .)
    POR             reduce using rule 76 (tipos -> AMP STR .)
    DIVIDIDO        reduce using rule 76 (tipos -> AMP STR .)
    MOD             reduce using rule 76 (tipos -> AMP STR .)
    AS              reduce using rule 76 (tipos -> AMP STR .)
    PT              reduce using rule 76 (tipos -> AMP STR .)
    IGUAL           reduce using rule 76 (tipos -> AMP STR .)
    MENOR           reduce using rule 76 (tipos -> AMP STR .)
    MAYOR           reduce using rule 76 (tipos -> AMP STR .)
    MEIGUAL         reduce using rule 76 (tipos -> AMP STR .)
    MAIGUAL         reduce using rule 76 (tipos -> AMP STR .)
    DIS             reduce using rule 76 (tipos -> AMP STR .)
    AND             reduce using rule 76 (tipos -> AMP STR .)
    OR              reduce using rule 76 (tipos -> AMP STR .)
    PTCOMA          reduce using rule 76 (tipos -> AMP STR .)
    CORDER          reduce using rule 76 (tipos -> AMP STR .)


state 113

    (13) liststruct -> liststruct COMA ID DPT . tipos
    (71) tipos -> . I64
    (72) tipos -> . F64
    (73) tipos -> . BOOL
    (74) tipos -> . CHAR
    (75) tipos -> . STRING
    (76) tipos -> . AMP STR
    (77) tipos -> . USIZE

    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

    tipos                          shift and go to state 156

state 114

    (3) funcion -> PUB FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ . instrucciones LLAVEDER
    (17) instrucciones -> . instruccion instrucciones
    (18) instrucciones -> . instruccion
    (19) instruccion -> . LET mutable ID pyc arrtipos IGUAL logica PTCOMA
    (20) instruccion -> . ID listarreglo IGUAL logica PTCOMA
    (21) instruccion -> . ID PARIZQ listexpr PARDER PTCOMA
    (22) instruccion -> . PRINT NOT PARIZQ listexpr PARDER PTCOMA
    (23) instruccion -> . IF logica LLAVEIZQ instrucciones LLAVEDER unelse
    (24) instruccion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (25) instruccion -> . RETURN logica PTCOMA
    (26) instruccion -> . WHILE logica LLAVEIZQ instrucciones LLAVEDER
    (27) instruccion -> . FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER
    (28) instruccion -> . BREAK PTCOMA
    (29) instruccion -> . CONTINUE PTCOMA
    (30) instruccion -> . BREAK logica PTCOMA

    LET             shift and go to state 51
    ID              shift and go to state 52
    PRINT           shift and go to state 53
    IF              shift and go to state 54
    LOOP            shift and go to state 55
    RETURN          shift and go to state 56
    WHILE           shift and go to state 57
    FOR             shift and go to state 58
    BREAK           shift and go to state 59
    CONTINUE        shift and go to state 60

    instrucciones                  shift and go to state 157
    instruccion                    shift and go to state 50

state 115

    (4) funcion -> FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones . LLAVEDER

    LLAVEDER        shift and go to state 158


state 116

    (15) tipofun -> MENOS MAYOR tipos .

    LLAVEIZQ        reduce using rule 15 (tipofun -> MENOS MAYOR tipos .)


state 117

    (11) parametros2 -> parametros2 COMA mutable ID DPT . tipos
    (71) tipos -> . I64
    (72) tipos -> . F64
    (73) tipos -> . BOOL
    (74) tipos -> . CHAR
    (75) tipos -> . STRING
    (76) tipos -> . AMP STR
    (77) tipos -> . USIZE

    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

    tipos                          shift and go to state 159

state 118

    (19) instruccion -> LET mutable ID . pyc arrtipos IGUAL logica PTCOMA
    (60) pyc -> . DPT
    (61) pyc -> . empty
    (113) empty -> .

    DPT             shift and go to state 161
    I64             reduce using rule 113 (empty -> .)
    F64             reduce using rule 113 (empty -> .)
    BOOL            reduce using rule 113 (empty -> .)
    CHAR            reduce using rule 113 (empty -> .)
    STRING          reduce using rule 113 (empty -> .)
    AMP             reduce using rule 113 (empty -> .)
    USIZE           reduce using rule 113 (empty -> .)
    CORIZQ          reduce using rule 113 (empty -> .)
    ID              reduce using rule 113 (empty -> .)
    IGUAL           reduce using rule 113 (empty -> .)

    pyc                            shift and go to state 160
    empty                          shift and go to state 162

state 119

    (20) instruccion -> ID listarreglo IGUAL . logica PTCOMA
    (47) logica -> . logica AND logica
    (48) logica -> . logica OR logica
    (49) logica -> . NOT logica
    (50) logica -> . rel
    (51) rel -> . rel IGUAL IGUAL rel
    (52) rel -> . rel MENOR rel
    (53) rel -> . rel MAYOR rel
    (54) rel -> . rel MEIGUAL rel
    (55) rel -> . rel MAIGUAL rel
    (56) rel -> . rel DIS rel
    (57) rel -> . expresion
    (78) expresion -> . expresion MAS expresion
    (79) expresion -> . expresion MENOS expresion
    (80) expresion -> . expresion POR expresion
    (81) expresion -> . expresion DIVIDIDO expresion
    (82) expresion -> . expresion MOD expresion
    (83) expresion -> . expresion AS tipos
    (84) expresion -> . instrif
    (85) expresion -> . MENOS expresion
    (86) expresion -> . PARIZQ logica PARDER
    (87) expresion -> . ENTERO
    (88) expresion -> . DECIMAL
    (89) expresion -> . FORM
    (90) expresion -> . TRUE
    (91) expresion -> . FALSE
    (92) expresion -> . VECM NOT listarreglo
    (93) expresion -> . ID listarreglo
    (94) expresion -> . ID PARIZQ listexpr PARDER
    (95) expresion -> . listarreglo
    (96) expresion -> . CHARE
    (97) expresion -> . opcionpow DPT DPT expresion
    (100) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (101) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (102) expresion -> . instrloop
    (103) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (104) expresion -> . expresion PT SQRT PARIZQ PARDER
    (105) expresion -> . expresion PT ABS PARIZQ PARDER
    (106) expresion -> . expresion PT CLONE PARIZQ PARDER
    (107) expresion -> . expresion PT LEN PARIZQ PARDER
    (108) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (37) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (109) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (110) listarreglo -> . empty
    (98) opcionpow -> . expresion
    (99) opcionpow -> . tipos
    (36) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (113) empty -> .
    (71) tipos -> . I64
    (72) tipos -> . F64
    (73) tipos -> . BOOL
    (74) tipos -> . CHAR
    (75) tipos -> . STRING
    (76) tipos -> . AMP STR
    (77) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    NOT             shift and go to state 84
    MENOS           shift and go to state 87
    PARIZQ          shift and go to state 90
    ENTERO          shift and go to state 91
    DECIMAL         shift and go to state 92
    FORM            shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    VECM            shift and go to state 96
    ID              shift and go to state 98
    CHARE           shift and go to state 99
    POW             shift and go to state 101
    POWF            shift and go to state 102
    IF              shift and go to state 82
    LOOP            shift and go to state 104
    CORIZQ          reduce using rule 113 (empty -> .)
    MAS             reduce using rule 113 (empty -> .)
    POR             reduce using rule 113 (empty -> .)
    DIVIDIDO        reduce using rule 113 (empty -> .)
    MOD             reduce using rule 113 (empty -> .)
    AS              reduce using rule 113 (empty -> .)
    PT              reduce using rule 113 (empty -> .)
    IGUAL           reduce using rule 113 (empty -> .)
    MENOR           reduce using rule 113 (empty -> .)
    MAYOR           reduce using rule 113 (empty -> .)
    MEIGUAL         reduce using rule 113 (empty -> .)
    MAIGUAL         reduce using rule 113 (empty -> .)
    DIS             reduce using rule 113 (empty -> .)
    PTCOMA          reduce using rule 113 (empty -> .)
    AND             reduce using rule 113 (empty -> .)
    OR              reduce using rule 113 (empty -> .)
    DPT             reduce using rule 113 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 113 (empty -> .) ]

    listarreglo                    shift and go to state 97
    logica                         shift and go to state 163
    rel                            shift and go to state 85
    expresion                      shift and go to state 86
    tipos                          shift and go to state 88
    instrif                        shift and go to state 89
    opcionpow                      shift and go to state 100
    instrloop                      shift and go to state 103
    empty                          shift and go to state 80

state 120

    (109) listarreglo -> listarreglo CORIZQ . listexpr CORDER
    (111) listexpr -> . listexpr COMA expresion
    (112) listexpr -> . expresion
    (78) expresion -> . expresion MAS expresion
    (79) expresion -> . expresion MENOS expresion
    (80) expresion -> . expresion POR expresion
    (81) expresion -> . expresion DIVIDIDO expresion
    (82) expresion -> . expresion MOD expresion
    (83) expresion -> . expresion AS tipos
    (84) expresion -> . instrif
    (85) expresion -> . MENOS expresion
    (86) expresion -> . PARIZQ logica PARDER
    (87) expresion -> . ENTERO
    (88) expresion -> . DECIMAL
    (89) expresion -> . FORM
    (90) expresion -> . TRUE
    (91) expresion -> . FALSE
    (92) expresion -> . VECM NOT listarreglo
    (93) expresion -> . ID listarreglo
    (94) expresion -> . ID PARIZQ listexpr PARDER
    (95) expresion -> . listarreglo
    (96) expresion -> . CHARE
    (97) expresion -> . opcionpow DPT DPT expresion
    (100) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (101) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (102) expresion -> . instrloop
    (103) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (104) expresion -> . expresion PT SQRT PARIZQ PARDER
    (105) expresion -> . expresion PT ABS PARIZQ PARDER
    (106) expresion -> . expresion PT CLONE PARIZQ PARDER
    (107) expresion -> . expresion PT LEN PARIZQ PARDER
    (108) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (37) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (109) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (110) listarreglo -> . empty
    (98) opcionpow -> . expresion
    (99) opcionpow -> . tipos
    (36) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (113) empty -> .
    (71) tipos -> . I64
    (72) tipos -> . F64
    (73) tipos -> . BOOL
    (74) tipos -> . CHAR
    (75) tipos -> . STRING
    (76) tipos -> . AMP STR
    (77) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    MENOS           shift and go to state 87
    PARIZQ          shift and go to state 90
    ENTERO          shift and go to state 91
    DECIMAL         shift and go to state 92
    FORM            shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    VECM            shift and go to state 96
    ID              shift and go to state 98
    CHARE           shift and go to state 99
    POW             shift and go to state 101
    POWF            shift and go to state 102
    IF              shift and go to state 82
    LOOP            shift and go to state 104
    CORIZQ          reduce using rule 113 (empty -> .)
    MAS             reduce using rule 113 (empty -> .)
    POR             reduce using rule 113 (empty -> .)
    DIVIDIDO        reduce using rule 113 (empty -> .)
    MOD             reduce using rule 113 (empty -> .)
    AS              reduce using rule 113 (empty -> .)
    PT              reduce using rule 113 (empty -> .)
    CORDER          reduce using rule 113 (empty -> .)
    COMA            reduce using rule 113 (empty -> .)
    DPT             reduce using rule 113 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 113 (empty -> .) ]

    listarreglo                    shift and go to state 97
    listexpr                       shift and go to state 164
    expresion                      shift and go to state 122
    tipos                          shift and go to state 88
    instrif                        shift and go to state 89
    opcionpow                      shift and go to state 100
    instrloop                      shift and go to state 103
    empty                          shift and go to state 80

state 121

    (21) instruccion -> ID PARIZQ listexpr . PARDER PTCOMA
    (111) listexpr -> listexpr . COMA expresion

    PARDER          shift and go to state 165
    COMA            shift and go to state 166


state 122

    (112) listexpr -> expresion .
    (78) expresion -> expresion . MAS expresion
    (79) expresion -> expresion . MENOS expresion
    (80) expresion -> expresion . POR expresion
    (81) expresion -> expresion . DIVIDIDO expresion
    (82) expresion -> expresion . MOD expresion
    (83) expresion -> expresion . AS tipos
    (103) expresion -> expresion . PT TOSTRING PARIZQ PARDER
    (104) expresion -> expresion . PT SQRT PARIZQ PARDER
    (105) expresion -> expresion . PT ABS PARIZQ PARDER
    (106) expresion -> expresion . PT CLONE PARIZQ PARDER
    (107) expresion -> expresion . PT LEN PARIZQ PARDER
    (108) expresion -> expresion . PT TOOWNED PARIZQ PARDER
    (98) opcionpow -> expresion .

    PARDER          reduce using rule 112 (listexpr -> expresion .)
    COMA            reduce using rule 112 (listexpr -> expresion .)
    CORDER          reduce using rule 112 (listexpr -> expresion .)
    MAS             shift and go to state 135
    MENOS           shift and go to state 136
    POR             shift and go to state 137
    DIVIDIDO        shift and go to state 138
    MOD             shift and go to state 139
    AS              shift and go to state 140
    PT              shift and go to state 141
    DPT             reduce using rule 98 (opcionpow -> expresion .)


state 123

    (22) instruccion -> PRINT NOT PARIZQ . listexpr PARDER PTCOMA
    (111) listexpr -> . listexpr COMA expresion
    (112) listexpr -> . expresion
    (78) expresion -> . expresion MAS expresion
    (79) expresion -> . expresion MENOS expresion
    (80) expresion -> . expresion POR expresion
    (81) expresion -> . expresion DIVIDIDO expresion
    (82) expresion -> . expresion MOD expresion
    (83) expresion -> . expresion AS tipos
    (84) expresion -> . instrif
    (85) expresion -> . MENOS expresion
    (86) expresion -> . PARIZQ logica PARDER
    (87) expresion -> . ENTERO
    (88) expresion -> . DECIMAL
    (89) expresion -> . FORM
    (90) expresion -> . TRUE
    (91) expresion -> . FALSE
    (92) expresion -> . VECM NOT listarreglo
    (93) expresion -> . ID listarreglo
    (94) expresion -> . ID PARIZQ listexpr PARDER
    (95) expresion -> . listarreglo
    (96) expresion -> . CHARE
    (97) expresion -> . opcionpow DPT DPT expresion
    (100) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (101) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (102) expresion -> . instrloop
    (103) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (104) expresion -> . expresion PT SQRT PARIZQ PARDER
    (105) expresion -> . expresion PT ABS PARIZQ PARDER
    (106) expresion -> . expresion PT CLONE PARIZQ PARDER
    (107) expresion -> . expresion PT LEN PARIZQ PARDER
    (108) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (37) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (109) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (110) listarreglo -> . empty
    (98) opcionpow -> . expresion
    (99) opcionpow -> . tipos
    (36) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (113) empty -> .
    (71) tipos -> . I64
    (72) tipos -> . F64
    (73) tipos -> . BOOL
    (74) tipos -> . CHAR
    (75) tipos -> . STRING
    (76) tipos -> . AMP STR
    (77) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    MENOS           shift and go to state 87
    PARIZQ          shift and go to state 90
    ENTERO          shift and go to state 91
    DECIMAL         shift and go to state 92
    FORM            shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    VECM            shift and go to state 96
    ID              shift and go to state 98
    CHARE           shift and go to state 99
    POW             shift and go to state 101
    POWF            shift and go to state 102
    IF              shift and go to state 82
    LOOP            shift and go to state 104
    CORIZQ          reduce using rule 113 (empty -> .)
    MAS             reduce using rule 113 (empty -> .)
    POR             reduce using rule 113 (empty -> .)
    DIVIDIDO        reduce using rule 113 (empty -> .)
    MOD             reduce using rule 113 (empty -> .)
    AS              reduce using rule 113 (empty -> .)
    PT              reduce using rule 113 (empty -> .)
    PARDER          reduce using rule 113 (empty -> .)
    COMA            reduce using rule 113 (empty -> .)
    DPT             reduce using rule 113 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 113 (empty -> .) ]

    listexpr                       shift and go to state 167
    expresion                      shift and go to state 122
    tipos                          shift and go to state 88
    instrif                        shift and go to state 89
    listarreglo                    shift and go to state 97
    opcionpow                      shift and go to state 100
    instrloop                      shift and go to state 103
    empty                          shift and go to state 80

state 124

    (37) instrif -> IF logica . LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (47) logica -> logica . AND logica
    (48) logica -> logica . OR logica

    LLAVEIZQ        shift and go to state 168
    AND             shift and go to state 126
    OR              shift and go to state 127


state 125

    (23) instruccion -> IF logica LLAVEIZQ . instrucciones LLAVEDER unelse
    (17) instrucciones -> . instruccion instrucciones
    (18) instrucciones -> . instruccion
    (19) instruccion -> . LET mutable ID pyc arrtipos IGUAL logica PTCOMA
    (20) instruccion -> . ID listarreglo IGUAL logica PTCOMA
    (21) instruccion -> . ID PARIZQ listexpr PARDER PTCOMA
    (22) instruccion -> . PRINT NOT PARIZQ listexpr PARDER PTCOMA
    (23) instruccion -> . IF logica LLAVEIZQ instrucciones LLAVEDER unelse
    (24) instruccion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (25) instruccion -> . RETURN logica PTCOMA
    (26) instruccion -> . WHILE logica LLAVEIZQ instrucciones LLAVEDER
    (27) instruccion -> . FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER
    (28) instruccion -> . BREAK PTCOMA
    (29) instruccion -> . CONTINUE PTCOMA
    (30) instruccion -> . BREAK logica PTCOMA

    LET             shift and go to state 51
    ID              shift and go to state 52
    PRINT           shift and go to state 53
    IF              shift and go to state 54
    LOOP            shift and go to state 55
    RETURN          shift and go to state 56
    WHILE           shift and go to state 57
    FOR             shift and go to state 58
    BREAK           shift and go to state 59
    CONTINUE        shift and go to state 60

    instrucciones                  shift and go to state 169
    instruccion                    shift and go to state 50

state 126

    (47) logica -> logica AND . logica
    (47) logica -> . logica AND logica
    (48) logica -> . logica OR logica
    (49) logica -> . NOT logica
    (50) logica -> . rel
    (51) rel -> . rel IGUAL IGUAL rel
    (52) rel -> . rel MENOR rel
    (53) rel -> . rel MAYOR rel
    (54) rel -> . rel MEIGUAL rel
    (55) rel -> . rel MAIGUAL rel
    (56) rel -> . rel DIS rel
    (57) rel -> . expresion
    (78) expresion -> . expresion MAS expresion
    (79) expresion -> . expresion MENOS expresion
    (80) expresion -> . expresion POR expresion
    (81) expresion -> . expresion DIVIDIDO expresion
    (82) expresion -> . expresion MOD expresion
    (83) expresion -> . expresion AS tipos
    (84) expresion -> . instrif
    (85) expresion -> . MENOS expresion
    (86) expresion -> . PARIZQ logica PARDER
    (87) expresion -> . ENTERO
    (88) expresion -> . DECIMAL
    (89) expresion -> . FORM
    (90) expresion -> . TRUE
    (91) expresion -> . FALSE
    (92) expresion -> . VECM NOT listarreglo
    (93) expresion -> . ID listarreglo
    (94) expresion -> . ID PARIZQ listexpr PARDER
    (95) expresion -> . listarreglo
    (96) expresion -> . CHARE
    (97) expresion -> . opcionpow DPT DPT expresion
    (100) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (101) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (102) expresion -> . instrloop
    (103) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (104) expresion -> . expresion PT SQRT PARIZQ PARDER
    (105) expresion -> . expresion PT ABS PARIZQ PARDER
    (106) expresion -> . expresion PT CLONE PARIZQ PARDER
    (107) expresion -> . expresion PT LEN PARIZQ PARDER
    (108) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (37) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (109) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (110) listarreglo -> . empty
    (98) opcionpow -> . expresion
    (99) opcionpow -> . tipos
    (36) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (113) empty -> .
    (71) tipos -> . I64
    (72) tipos -> . F64
    (73) tipos -> . BOOL
    (74) tipos -> . CHAR
    (75) tipos -> . STRING
    (76) tipos -> . AMP STR
    (77) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    NOT             shift and go to state 84
    MENOS           shift and go to state 87
    PARIZQ          shift and go to state 90
    ENTERO          shift and go to state 91
    DECIMAL         shift and go to state 92
    FORM            shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    VECM            shift and go to state 96
    ID              shift and go to state 98
    CHARE           shift and go to state 99
    POW             shift and go to state 101
    POWF            shift and go to state 102
    IF              shift and go to state 82
    LOOP            shift and go to state 104
    CORIZQ          reduce using rule 113 (empty -> .)
    MAS             reduce using rule 113 (empty -> .)
    POR             reduce using rule 113 (empty -> .)
    DIVIDIDO        reduce using rule 113 (empty -> .)
    MOD             reduce using rule 113 (empty -> .)
    AS              reduce using rule 113 (empty -> .)
    PT              reduce using rule 113 (empty -> .)
    IGUAL           reduce using rule 113 (empty -> .)
    MENOR           reduce using rule 113 (empty -> .)
    MAYOR           reduce using rule 113 (empty -> .)
    MEIGUAL         reduce using rule 113 (empty -> .)
    MAIGUAL         reduce using rule 113 (empty -> .)
    DIS             reduce using rule 113 (empty -> .)
    AND             reduce using rule 113 (empty -> .)
    OR              reduce using rule 113 (empty -> .)
    LLAVEIZQ        reduce using rule 113 (empty -> .)
    PTCOMA          reduce using rule 113 (empty -> .)
    PARDER          reduce using rule 113 (empty -> .)
    DPT             reduce using rule 113 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 113 (empty -> .) ]

    logica                         shift and go to state 170
    rel                            shift and go to state 85
    expresion                      shift and go to state 86
    tipos                          shift and go to state 88
    instrif                        shift and go to state 89
    listarreglo                    shift and go to state 97
    opcionpow                      shift and go to state 100
    instrloop                      shift and go to state 103
    empty                          shift and go to state 80

state 127

    (48) logica -> logica OR . logica
    (47) logica -> . logica AND logica
    (48) logica -> . logica OR logica
    (49) logica -> . NOT logica
    (50) logica -> . rel
    (51) rel -> . rel IGUAL IGUAL rel
    (52) rel -> . rel MENOR rel
    (53) rel -> . rel MAYOR rel
    (54) rel -> . rel MEIGUAL rel
    (55) rel -> . rel MAIGUAL rel
    (56) rel -> . rel DIS rel
    (57) rel -> . expresion
    (78) expresion -> . expresion MAS expresion
    (79) expresion -> . expresion MENOS expresion
    (80) expresion -> . expresion POR expresion
    (81) expresion -> . expresion DIVIDIDO expresion
    (82) expresion -> . expresion MOD expresion
    (83) expresion -> . expresion AS tipos
    (84) expresion -> . instrif
    (85) expresion -> . MENOS expresion
    (86) expresion -> . PARIZQ logica PARDER
    (87) expresion -> . ENTERO
    (88) expresion -> . DECIMAL
    (89) expresion -> . FORM
    (90) expresion -> . TRUE
    (91) expresion -> . FALSE
    (92) expresion -> . VECM NOT listarreglo
    (93) expresion -> . ID listarreglo
    (94) expresion -> . ID PARIZQ listexpr PARDER
    (95) expresion -> . listarreglo
    (96) expresion -> . CHARE
    (97) expresion -> . opcionpow DPT DPT expresion
    (100) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (101) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (102) expresion -> . instrloop
    (103) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (104) expresion -> . expresion PT SQRT PARIZQ PARDER
    (105) expresion -> . expresion PT ABS PARIZQ PARDER
    (106) expresion -> . expresion PT CLONE PARIZQ PARDER
    (107) expresion -> . expresion PT LEN PARIZQ PARDER
    (108) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (37) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (109) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (110) listarreglo -> . empty
    (98) opcionpow -> . expresion
    (99) opcionpow -> . tipos
    (36) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (113) empty -> .
    (71) tipos -> . I64
    (72) tipos -> . F64
    (73) tipos -> . BOOL
    (74) tipos -> . CHAR
    (75) tipos -> . STRING
    (76) tipos -> . AMP STR
    (77) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    NOT             shift and go to state 84
    MENOS           shift and go to state 87
    PARIZQ          shift and go to state 90
    ENTERO          shift and go to state 91
    DECIMAL         shift and go to state 92
    FORM            shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    VECM            shift and go to state 96
    ID              shift and go to state 98
    CHARE           shift and go to state 99
    POW             shift and go to state 101
    POWF            shift and go to state 102
    IF              shift and go to state 82
    LOOP            shift and go to state 104
    CORIZQ          reduce using rule 113 (empty -> .)
    MAS             reduce using rule 113 (empty -> .)
    POR             reduce using rule 113 (empty -> .)
    DIVIDIDO        reduce using rule 113 (empty -> .)
    MOD             reduce using rule 113 (empty -> .)
    AS              reduce using rule 113 (empty -> .)
    PT              reduce using rule 113 (empty -> .)
    IGUAL           reduce using rule 113 (empty -> .)
    MENOR           reduce using rule 113 (empty -> .)
    MAYOR           reduce using rule 113 (empty -> .)
    MEIGUAL         reduce using rule 113 (empty -> .)
    MAIGUAL         reduce using rule 113 (empty -> .)
    DIS             reduce using rule 113 (empty -> .)
    AND             reduce using rule 113 (empty -> .)
    OR              reduce using rule 113 (empty -> .)
    LLAVEIZQ        reduce using rule 113 (empty -> .)
    PTCOMA          reduce using rule 113 (empty -> .)
    PARDER          reduce using rule 113 (empty -> .)
    DPT             reduce using rule 113 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 113 (empty -> .) ]

    logica                         shift and go to state 171
    rel                            shift and go to state 85
    expresion                      shift and go to state 86
    tipos                          shift and go to state 88
    instrif                        shift and go to state 89
    listarreglo                    shift and go to state 97
    opcionpow                      shift and go to state 100
    instrloop                      shift and go to state 103
    empty                          shift and go to state 80

state 128

    (49) logica -> NOT logica .
    (47) logica -> logica . AND logica
    (48) logica -> logica . OR logica

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    LLAVEIZQ        reduce using rule 49 (logica -> NOT logica .)
    PTCOMA          reduce using rule 49 (logica -> NOT logica .)
    PARDER          reduce using rule 49 (logica -> NOT logica .)
    AND             shift and go to state 126
    OR              shift and go to state 127

  ! AND             [ reduce using rule 49 (logica -> NOT logica .) ]
  ! OR              [ reduce using rule 49 (logica -> NOT logica .) ]


state 129

    (51) rel -> rel IGUAL . IGUAL rel

    IGUAL           shift and go to state 172


state 130

    (52) rel -> rel MENOR . rel
    (51) rel -> . rel IGUAL IGUAL rel
    (52) rel -> . rel MENOR rel
    (53) rel -> . rel MAYOR rel
    (54) rel -> . rel MEIGUAL rel
    (55) rel -> . rel MAIGUAL rel
    (56) rel -> . rel DIS rel
    (57) rel -> . expresion
    (78) expresion -> . expresion MAS expresion
    (79) expresion -> . expresion MENOS expresion
    (80) expresion -> . expresion POR expresion
    (81) expresion -> . expresion DIVIDIDO expresion
    (82) expresion -> . expresion MOD expresion
    (83) expresion -> . expresion AS tipos
    (84) expresion -> . instrif
    (85) expresion -> . MENOS expresion
    (86) expresion -> . PARIZQ logica PARDER
    (87) expresion -> . ENTERO
    (88) expresion -> . DECIMAL
    (89) expresion -> . FORM
    (90) expresion -> . TRUE
    (91) expresion -> . FALSE
    (92) expresion -> . VECM NOT listarreglo
    (93) expresion -> . ID listarreglo
    (94) expresion -> . ID PARIZQ listexpr PARDER
    (95) expresion -> . listarreglo
    (96) expresion -> . CHARE
    (97) expresion -> . opcionpow DPT DPT expresion
    (100) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (101) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (102) expresion -> . instrloop
    (103) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (104) expresion -> . expresion PT SQRT PARIZQ PARDER
    (105) expresion -> . expresion PT ABS PARIZQ PARDER
    (106) expresion -> . expresion PT CLONE PARIZQ PARDER
    (107) expresion -> . expresion PT LEN PARIZQ PARDER
    (108) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (37) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (109) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (110) listarreglo -> . empty
    (98) opcionpow -> . expresion
    (99) opcionpow -> . tipos
    (36) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (113) empty -> .
    (71) tipos -> . I64
    (72) tipos -> . F64
    (73) tipos -> . BOOL
    (74) tipos -> . CHAR
    (75) tipos -> . STRING
    (76) tipos -> . AMP STR
    (77) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    MENOS           shift and go to state 87
    PARIZQ          shift and go to state 90
    ENTERO          shift and go to state 91
    DECIMAL         shift and go to state 92
    FORM            shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    VECM            shift and go to state 96
    ID              shift and go to state 98
    CHARE           shift and go to state 99
    POW             shift and go to state 101
    POWF            shift and go to state 102
    IF              shift and go to state 82
    LOOP            shift and go to state 104
    CORIZQ          reduce using rule 113 (empty -> .)
    MAS             reduce using rule 113 (empty -> .)
    POR             reduce using rule 113 (empty -> .)
    DIVIDIDO        reduce using rule 113 (empty -> .)
    MOD             reduce using rule 113 (empty -> .)
    AS              reduce using rule 113 (empty -> .)
    PT              reduce using rule 113 (empty -> .)
    IGUAL           reduce using rule 113 (empty -> .)
    MENOR           reduce using rule 113 (empty -> .)
    MAYOR           reduce using rule 113 (empty -> .)
    MEIGUAL         reduce using rule 113 (empty -> .)
    MAIGUAL         reduce using rule 113 (empty -> .)
    DIS             reduce using rule 113 (empty -> .)
    LLAVEIZQ        reduce using rule 113 (empty -> .)
    AND             reduce using rule 113 (empty -> .)
    OR              reduce using rule 113 (empty -> .)
    PTCOMA          reduce using rule 113 (empty -> .)
    PARDER          reduce using rule 113 (empty -> .)
    DPT             reduce using rule 113 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 113 (empty -> .) ]

    rel                            shift and go to state 173
    expresion                      shift and go to state 86
    tipos                          shift and go to state 88
    instrif                        shift and go to state 89
    listarreglo                    shift and go to state 97
    opcionpow                      shift and go to state 100
    instrloop                      shift and go to state 103
    empty                          shift and go to state 80

state 131

    (53) rel -> rel MAYOR . rel
    (51) rel -> . rel IGUAL IGUAL rel
    (52) rel -> . rel MENOR rel
    (53) rel -> . rel MAYOR rel
    (54) rel -> . rel MEIGUAL rel
    (55) rel -> . rel MAIGUAL rel
    (56) rel -> . rel DIS rel
    (57) rel -> . expresion
    (78) expresion -> . expresion MAS expresion
    (79) expresion -> . expresion MENOS expresion
    (80) expresion -> . expresion POR expresion
    (81) expresion -> . expresion DIVIDIDO expresion
    (82) expresion -> . expresion MOD expresion
    (83) expresion -> . expresion AS tipos
    (84) expresion -> . instrif
    (85) expresion -> . MENOS expresion
    (86) expresion -> . PARIZQ logica PARDER
    (87) expresion -> . ENTERO
    (88) expresion -> . DECIMAL
    (89) expresion -> . FORM
    (90) expresion -> . TRUE
    (91) expresion -> . FALSE
    (92) expresion -> . VECM NOT listarreglo
    (93) expresion -> . ID listarreglo
    (94) expresion -> . ID PARIZQ listexpr PARDER
    (95) expresion -> . listarreglo
    (96) expresion -> . CHARE
    (97) expresion -> . opcionpow DPT DPT expresion
    (100) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (101) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (102) expresion -> . instrloop
    (103) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (104) expresion -> . expresion PT SQRT PARIZQ PARDER
    (105) expresion -> . expresion PT ABS PARIZQ PARDER
    (106) expresion -> . expresion PT CLONE PARIZQ PARDER
    (107) expresion -> . expresion PT LEN PARIZQ PARDER
    (108) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (37) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (109) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (110) listarreglo -> . empty
    (98) opcionpow -> . expresion
    (99) opcionpow -> . tipos
    (36) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (113) empty -> .
    (71) tipos -> . I64
    (72) tipos -> . F64
    (73) tipos -> . BOOL
    (74) tipos -> . CHAR
    (75) tipos -> . STRING
    (76) tipos -> . AMP STR
    (77) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    MENOS           shift and go to state 87
    PARIZQ          shift and go to state 90
    ENTERO          shift and go to state 91
    DECIMAL         shift and go to state 92
    FORM            shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    VECM            shift and go to state 96
    ID              shift and go to state 98
    CHARE           shift and go to state 99
    POW             shift and go to state 101
    POWF            shift and go to state 102
    IF              shift and go to state 82
    LOOP            shift and go to state 104
    CORIZQ          reduce using rule 113 (empty -> .)
    MAS             reduce using rule 113 (empty -> .)
    POR             reduce using rule 113 (empty -> .)
    DIVIDIDO        reduce using rule 113 (empty -> .)
    MOD             reduce using rule 113 (empty -> .)
    AS              reduce using rule 113 (empty -> .)
    PT              reduce using rule 113 (empty -> .)
    IGUAL           reduce using rule 113 (empty -> .)
    MENOR           reduce using rule 113 (empty -> .)
    MAYOR           reduce using rule 113 (empty -> .)
    MEIGUAL         reduce using rule 113 (empty -> .)
    MAIGUAL         reduce using rule 113 (empty -> .)
    DIS             reduce using rule 113 (empty -> .)
    LLAVEIZQ        reduce using rule 113 (empty -> .)
    AND             reduce using rule 113 (empty -> .)
    OR              reduce using rule 113 (empty -> .)
    PTCOMA          reduce using rule 113 (empty -> .)
    PARDER          reduce using rule 113 (empty -> .)
    DPT             reduce using rule 113 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 113 (empty -> .) ]

    rel                            shift and go to state 174
    expresion                      shift and go to state 86
    tipos                          shift and go to state 88
    instrif                        shift and go to state 89
    listarreglo                    shift and go to state 97
    opcionpow                      shift and go to state 100
    instrloop                      shift and go to state 103
    empty                          shift and go to state 80

state 132

    (54) rel -> rel MEIGUAL . rel
    (51) rel -> . rel IGUAL IGUAL rel
    (52) rel -> . rel MENOR rel
    (53) rel -> . rel MAYOR rel
    (54) rel -> . rel MEIGUAL rel
    (55) rel -> . rel MAIGUAL rel
    (56) rel -> . rel DIS rel
    (57) rel -> . expresion
    (78) expresion -> . expresion MAS expresion
    (79) expresion -> . expresion MENOS expresion
    (80) expresion -> . expresion POR expresion
    (81) expresion -> . expresion DIVIDIDO expresion
    (82) expresion -> . expresion MOD expresion
    (83) expresion -> . expresion AS tipos
    (84) expresion -> . instrif
    (85) expresion -> . MENOS expresion
    (86) expresion -> . PARIZQ logica PARDER
    (87) expresion -> . ENTERO
    (88) expresion -> . DECIMAL
    (89) expresion -> . FORM
    (90) expresion -> . TRUE
    (91) expresion -> . FALSE
    (92) expresion -> . VECM NOT listarreglo
    (93) expresion -> . ID listarreglo
    (94) expresion -> . ID PARIZQ listexpr PARDER
    (95) expresion -> . listarreglo
    (96) expresion -> . CHARE
    (97) expresion -> . opcionpow DPT DPT expresion
    (100) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (101) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (102) expresion -> . instrloop
    (103) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (104) expresion -> . expresion PT SQRT PARIZQ PARDER
    (105) expresion -> . expresion PT ABS PARIZQ PARDER
    (106) expresion -> . expresion PT CLONE PARIZQ PARDER
    (107) expresion -> . expresion PT LEN PARIZQ PARDER
    (108) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (37) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (109) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (110) listarreglo -> . empty
    (98) opcionpow -> . expresion
    (99) opcionpow -> . tipos
    (36) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (113) empty -> .
    (71) tipos -> . I64
    (72) tipos -> . F64
    (73) tipos -> . BOOL
    (74) tipos -> . CHAR
    (75) tipos -> . STRING
    (76) tipos -> . AMP STR
    (77) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    MENOS           shift and go to state 87
    PARIZQ          shift and go to state 90
    ENTERO          shift and go to state 91
    DECIMAL         shift and go to state 92
    FORM            shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    VECM            shift and go to state 96
    ID              shift and go to state 98
    CHARE           shift and go to state 99
    POW             shift and go to state 101
    POWF            shift and go to state 102
    IF              shift and go to state 82
    LOOP            shift and go to state 104
    CORIZQ          reduce using rule 113 (empty -> .)
    MAS             reduce using rule 113 (empty -> .)
    POR             reduce using rule 113 (empty -> .)
    DIVIDIDO        reduce using rule 113 (empty -> .)
    MOD             reduce using rule 113 (empty -> .)
    AS              reduce using rule 113 (empty -> .)
    PT              reduce using rule 113 (empty -> .)
    IGUAL           reduce using rule 113 (empty -> .)
    MENOR           reduce using rule 113 (empty -> .)
    MAYOR           reduce using rule 113 (empty -> .)
    MEIGUAL         reduce using rule 113 (empty -> .)
    MAIGUAL         reduce using rule 113 (empty -> .)
    DIS             reduce using rule 113 (empty -> .)
    LLAVEIZQ        reduce using rule 113 (empty -> .)
    AND             reduce using rule 113 (empty -> .)
    OR              reduce using rule 113 (empty -> .)
    PTCOMA          reduce using rule 113 (empty -> .)
    PARDER          reduce using rule 113 (empty -> .)
    DPT             reduce using rule 113 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 113 (empty -> .) ]

    rel                            shift and go to state 175
    expresion                      shift and go to state 86
    tipos                          shift and go to state 88
    instrif                        shift and go to state 89
    listarreglo                    shift and go to state 97
    opcionpow                      shift and go to state 100
    instrloop                      shift and go to state 103
    empty                          shift and go to state 80

state 133

    (55) rel -> rel MAIGUAL . rel
    (51) rel -> . rel IGUAL IGUAL rel
    (52) rel -> . rel MENOR rel
    (53) rel -> . rel MAYOR rel
    (54) rel -> . rel MEIGUAL rel
    (55) rel -> . rel MAIGUAL rel
    (56) rel -> . rel DIS rel
    (57) rel -> . expresion
    (78) expresion -> . expresion MAS expresion
    (79) expresion -> . expresion MENOS expresion
    (80) expresion -> . expresion POR expresion
    (81) expresion -> . expresion DIVIDIDO expresion
    (82) expresion -> . expresion MOD expresion
    (83) expresion -> . expresion AS tipos
    (84) expresion -> . instrif
    (85) expresion -> . MENOS expresion
    (86) expresion -> . PARIZQ logica PARDER
    (87) expresion -> . ENTERO
    (88) expresion -> . DECIMAL
    (89) expresion -> . FORM
    (90) expresion -> . TRUE
    (91) expresion -> . FALSE
    (92) expresion -> . VECM NOT listarreglo
    (93) expresion -> . ID listarreglo
    (94) expresion -> . ID PARIZQ listexpr PARDER
    (95) expresion -> . listarreglo
    (96) expresion -> . CHARE
    (97) expresion -> . opcionpow DPT DPT expresion
    (100) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (101) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (102) expresion -> . instrloop
    (103) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (104) expresion -> . expresion PT SQRT PARIZQ PARDER
    (105) expresion -> . expresion PT ABS PARIZQ PARDER
    (106) expresion -> . expresion PT CLONE PARIZQ PARDER
    (107) expresion -> . expresion PT LEN PARIZQ PARDER
    (108) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (37) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (109) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (110) listarreglo -> . empty
    (98) opcionpow -> . expresion
    (99) opcionpow -> . tipos
    (36) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (113) empty -> .
    (71) tipos -> . I64
    (72) tipos -> . F64
    (73) tipos -> . BOOL
    (74) tipos -> . CHAR
    (75) tipos -> . STRING
    (76) tipos -> . AMP STR
    (77) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    MENOS           shift and go to state 87
    PARIZQ          shift and go to state 90
    ENTERO          shift and go to state 91
    DECIMAL         shift and go to state 92
    FORM            shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    VECM            shift and go to state 96
    ID              shift and go to state 98
    CHARE           shift and go to state 99
    POW             shift and go to state 101
    POWF            shift and go to state 102
    IF              shift and go to state 82
    LOOP            shift and go to state 104
    CORIZQ          reduce using rule 113 (empty -> .)
    MAS             reduce using rule 113 (empty -> .)
    POR             reduce using rule 113 (empty -> .)
    DIVIDIDO        reduce using rule 113 (empty -> .)
    MOD             reduce using rule 113 (empty -> .)
    AS              reduce using rule 113 (empty -> .)
    PT              reduce using rule 113 (empty -> .)
    IGUAL           reduce using rule 113 (empty -> .)
    MENOR           reduce using rule 113 (empty -> .)
    MAYOR           reduce using rule 113 (empty -> .)
    MEIGUAL         reduce using rule 113 (empty -> .)
    MAIGUAL         reduce using rule 113 (empty -> .)
    DIS             reduce using rule 113 (empty -> .)
    LLAVEIZQ        reduce using rule 113 (empty -> .)
    AND             reduce using rule 113 (empty -> .)
    OR              reduce using rule 113 (empty -> .)
    PTCOMA          reduce using rule 113 (empty -> .)
    PARDER          reduce using rule 113 (empty -> .)
    DPT             reduce using rule 113 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 113 (empty -> .) ]

    rel                            shift and go to state 176
    expresion                      shift and go to state 86
    tipos                          shift and go to state 88
    instrif                        shift and go to state 89
    listarreglo                    shift and go to state 97
    opcionpow                      shift and go to state 100
    instrloop                      shift and go to state 103
    empty                          shift and go to state 80

state 134

    (56) rel -> rel DIS . rel
    (51) rel -> . rel IGUAL IGUAL rel
    (52) rel -> . rel MENOR rel
    (53) rel -> . rel MAYOR rel
    (54) rel -> . rel MEIGUAL rel
    (55) rel -> . rel MAIGUAL rel
    (56) rel -> . rel DIS rel
    (57) rel -> . expresion
    (78) expresion -> . expresion MAS expresion
    (79) expresion -> . expresion MENOS expresion
    (80) expresion -> . expresion POR expresion
    (81) expresion -> . expresion DIVIDIDO expresion
    (82) expresion -> . expresion MOD expresion
    (83) expresion -> . expresion AS tipos
    (84) expresion -> . instrif
    (85) expresion -> . MENOS expresion
    (86) expresion -> . PARIZQ logica PARDER
    (87) expresion -> . ENTERO
    (88) expresion -> . DECIMAL
    (89) expresion -> . FORM
    (90) expresion -> . TRUE
    (91) expresion -> . FALSE
    (92) expresion -> . VECM NOT listarreglo
    (93) expresion -> . ID listarreglo
    (94) expresion -> . ID PARIZQ listexpr PARDER
    (95) expresion -> . listarreglo
    (96) expresion -> . CHARE
    (97) expresion -> . opcionpow DPT DPT expresion
    (100) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (101) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (102) expresion -> . instrloop
    (103) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (104) expresion -> . expresion PT SQRT PARIZQ PARDER
    (105) expresion -> . expresion PT ABS PARIZQ PARDER
    (106) expresion -> . expresion PT CLONE PARIZQ PARDER
    (107) expresion -> . expresion PT LEN PARIZQ PARDER
    (108) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (37) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (109) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (110) listarreglo -> . empty
    (98) opcionpow -> . expresion
    (99) opcionpow -> . tipos
    (36) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (113) empty -> .
    (71) tipos -> . I64
    (72) tipos -> . F64
    (73) tipos -> . BOOL
    (74) tipos -> . CHAR
    (75) tipos -> . STRING
    (76) tipos -> . AMP STR
    (77) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    MENOS           shift and go to state 87
    PARIZQ          shift and go to state 90
    ENTERO          shift and go to state 91
    DECIMAL         shift and go to state 92
    FORM            shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    VECM            shift and go to state 96
    ID              shift and go to state 98
    CHARE           shift and go to state 99
    POW             shift and go to state 101
    POWF            shift and go to state 102
    IF              shift and go to state 82
    LOOP            shift and go to state 104
    CORIZQ          reduce using rule 113 (empty -> .)
    MAS             reduce using rule 113 (empty -> .)
    POR             reduce using rule 113 (empty -> .)
    DIVIDIDO        reduce using rule 113 (empty -> .)
    MOD             reduce using rule 113 (empty -> .)
    AS              reduce using rule 113 (empty -> .)
    PT              reduce using rule 113 (empty -> .)
    IGUAL           reduce using rule 113 (empty -> .)
    MENOR           reduce using rule 113 (empty -> .)
    MAYOR           reduce using rule 113 (empty -> .)
    MEIGUAL         reduce using rule 113 (empty -> .)
    MAIGUAL         reduce using rule 113 (empty -> .)
    DIS             reduce using rule 113 (empty -> .)
    LLAVEIZQ        reduce using rule 113 (empty -> .)
    AND             reduce using rule 113 (empty -> .)
    OR              reduce using rule 113 (empty -> .)
    PTCOMA          reduce using rule 113 (empty -> .)
    PARDER          reduce using rule 113 (empty -> .)
    DPT             reduce using rule 113 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 113 (empty -> .) ]

    rel                            shift and go to state 177
    expresion                      shift and go to state 86
    tipos                          shift and go to state 88
    instrif                        shift and go to state 89
    listarreglo                    shift and go to state 97
    opcionpow                      shift and go to state 100
    instrloop                      shift and go to state 103
    empty                          shift and go to state 80

state 135

    (78) expresion -> expresion MAS . expresion
    (78) expresion -> . expresion MAS expresion
    (79) expresion -> . expresion MENOS expresion
    (80) expresion -> . expresion POR expresion
    (81) expresion -> . expresion DIVIDIDO expresion
    (82) expresion -> . expresion MOD expresion
    (83) expresion -> . expresion AS tipos
    (84) expresion -> . instrif
    (85) expresion -> . MENOS expresion
    (86) expresion -> . PARIZQ logica PARDER
    (87) expresion -> . ENTERO
    (88) expresion -> . DECIMAL
    (89) expresion -> . FORM
    (90) expresion -> . TRUE
    (91) expresion -> . FALSE
    (92) expresion -> . VECM NOT listarreglo
    (93) expresion -> . ID listarreglo
    (94) expresion -> . ID PARIZQ listexpr PARDER
    (95) expresion -> . listarreglo
    (96) expresion -> . CHARE
    (97) expresion -> . opcionpow DPT DPT expresion
    (100) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (101) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (102) expresion -> . instrloop
    (103) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (104) expresion -> . expresion PT SQRT PARIZQ PARDER
    (105) expresion -> . expresion PT ABS PARIZQ PARDER
    (106) expresion -> . expresion PT CLONE PARIZQ PARDER
    (107) expresion -> . expresion PT LEN PARIZQ PARDER
    (108) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (37) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (109) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (110) listarreglo -> . empty
    (98) opcionpow -> . expresion
    (99) opcionpow -> . tipos
    (36) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (113) empty -> .
    (71) tipos -> . I64
    (72) tipos -> . F64
    (73) tipos -> . BOOL
    (74) tipos -> . CHAR
    (75) tipos -> . STRING
    (76) tipos -> . AMP STR
    (77) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    MENOS           shift and go to state 87
    PARIZQ          shift and go to state 90
    ENTERO          shift and go to state 91
    DECIMAL         shift and go to state 92
    FORM            shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    VECM            shift and go to state 96
    ID              shift and go to state 98
    CHARE           shift and go to state 99
    POW             shift and go to state 101
    POWF            shift and go to state 102
    IF              shift and go to state 82
    LOOP            shift and go to state 104
    CORIZQ          reduce using rule 113 (empty -> .)
    MAS             reduce using rule 113 (empty -> .)
    POR             reduce using rule 113 (empty -> .)
    DIVIDIDO        reduce using rule 113 (empty -> .)
    MOD             reduce using rule 113 (empty -> .)
    AS              reduce using rule 113 (empty -> .)
    PT              reduce using rule 113 (empty -> .)
    IGUAL           reduce using rule 113 (empty -> .)
    MENOR           reduce using rule 113 (empty -> .)
    MAYOR           reduce using rule 113 (empty -> .)
    MEIGUAL         reduce using rule 113 (empty -> .)
    MAIGUAL         reduce using rule 113 (empty -> .)
    DIS             reduce using rule 113 (empty -> .)
    LLAVEIZQ        reduce using rule 113 (empty -> .)
    AND             reduce using rule 113 (empty -> .)
    OR              reduce using rule 113 (empty -> .)
    DPT             reduce using rule 113 (empty -> .)
    PTCOMA          reduce using rule 113 (empty -> .)
    PARDER          reduce using rule 113 (empty -> .)
    COMA            reduce using rule 113 (empty -> .)
    CORDER          reduce using rule 113 (empty -> .)
    LLAVEDER        reduce using rule 113 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 113 (empty -> .) ]

    expresion                      shift and go to state 178
    tipos                          shift and go to state 88
    instrif                        shift and go to state 89
    listarreglo                    shift and go to state 97
    opcionpow                      shift and go to state 100
    instrloop                      shift and go to state 103
    empty                          shift and go to state 80

state 136

    (79) expresion -> expresion MENOS . expresion
    (78) expresion -> . expresion MAS expresion
    (79) expresion -> . expresion MENOS expresion
    (80) expresion -> . expresion POR expresion
    (81) expresion -> . expresion DIVIDIDO expresion
    (82) expresion -> . expresion MOD expresion
    (83) expresion -> . expresion AS tipos
    (84) expresion -> . instrif
    (85) expresion -> . MENOS expresion
    (86) expresion -> . PARIZQ logica PARDER
    (87) expresion -> . ENTERO
    (88) expresion -> . DECIMAL
    (89) expresion -> . FORM
    (90) expresion -> . TRUE
    (91) expresion -> . FALSE
    (92) expresion -> . VECM NOT listarreglo
    (93) expresion -> . ID listarreglo
    (94) expresion -> . ID PARIZQ listexpr PARDER
    (95) expresion -> . listarreglo
    (96) expresion -> . CHARE
    (97) expresion -> . opcionpow DPT DPT expresion
    (100) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (101) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (102) expresion -> . instrloop
    (103) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (104) expresion -> . expresion PT SQRT PARIZQ PARDER
    (105) expresion -> . expresion PT ABS PARIZQ PARDER
    (106) expresion -> . expresion PT CLONE PARIZQ PARDER
    (107) expresion -> . expresion PT LEN PARIZQ PARDER
    (108) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (37) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (109) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (110) listarreglo -> . empty
    (98) opcionpow -> . expresion
    (99) opcionpow -> . tipos
    (36) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (113) empty -> .
    (71) tipos -> . I64
    (72) tipos -> . F64
    (73) tipos -> . BOOL
    (74) tipos -> . CHAR
    (75) tipos -> . STRING
    (76) tipos -> . AMP STR
    (77) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    MENOS           shift and go to state 87
    PARIZQ          shift and go to state 90
    ENTERO          shift and go to state 91
    DECIMAL         shift and go to state 92
    FORM            shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    VECM            shift and go to state 96
    ID              shift and go to state 98
    CHARE           shift and go to state 99
    POW             shift and go to state 101
    POWF            shift and go to state 102
    IF              shift and go to state 82
    LOOP            shift and go to state 104
    CORIZQ          reduce using rule 113 (empty -> .)
    MAS             reduce using rule 113 (empty -> .)
    POR             reduce using rule 113 (empty -> .)
    DIVIDIDO        reduce using rule 113 (empty -> .)
    MOD             reduce using rule 113 (empty -> .)
    AS              reduce using rule 113 (empty -> .)
    PT              reduce using rule 113 (empty -> .)
    IGUAL           reduce using rule 113 (empty -> .)
    MENOR           reduce using rule 113 (empty -> .)
    MAYOR           reduce using rule 113 (empty -> .)
    MEIGUAL         reduce using rule 113 (empty -> .)
    MAIGUAL         reduce using rule 113 (empty -> .)
    DIS             reduce using rule 113 (empty -> .)
    LLAVEIZQ        reduce using rule 113 (empty -> .)
    AND             reduce using rule 113 (empty -> .)
    OR              reduce using rule 113 (empty -> .)
    DPT             reduce using rule 113 (empty -> .)
    PTCOMA          reduce using rule 113 (empty -> .)
    PARDER          reduce using rule 113 (empty -> .)
    COMA            reduce using rule 113 (empty -> .)
    CORDER          reduce using rule 113 (empty -> .)
    LLAVEDER        reduce using rule 113 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 113 (empty -> .) ]

    expresion                      shift and go to state 179
    tipos                          shift and go to state 88
    instrif                        shift and go to state 89
    listarreglo                    shift and go to state 97
    opcionpow                      shift and go to state 100
    instrloop                      shift and go to state 103
    empty                          shift and go to state 80

state 137

    (80) expresion -> expresion POR . expresion
    (78) expresion -> . expresion MAS expresion
    (79) expresion -> . expresion MENOS expresion
    (80) expresion -> . expresion POR expresion
    (81) expresion -> . expresion DIVIDIDO expresion
    (82) expresion -> . expresion MOD expresion
    (83) expresion -> . expresion AS tipos
    (84) expresion -> . instrif
    (85) expresion -> . MENOS expresion
    (86) expresion -> . PARIZQ logica PARDER
    (87) expresion -> . ENTERO
    (88) expresion -> . DECIMAL
    (89) expresion -> . FORM
    (90) expresion -> . TRUE
    (91) expresion -> . FALSE
    (92) expresion -> . VECM NOT listarreglo
    (93) expresion -> . ID listarreglo
    (94) expresion -> . ID PARIZQ listexpr PARDER
    (95) expresion -> . listarreglo
    (96) expresion -> . CHARE
    (97) expresion -> . opcionpow DPT DPT expresion
    (100) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (101) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (102) expresion -> . instrloop
    (103) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (104) expresion -> . expresion PT SQRT PARIZQ PARDER
    (105) expresion -> . expresion PT ABS PARIZQ PARDER
    (106) expresion -> . expresion PT CLONE PARIZQ PARDER
    (107) expresion -> . expresion PT LEN PARIZQ PARDER
    (108) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (37) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (109) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (110) listarreglo -> . empty
    (98) opcionpow -> . expresion
    (99) opcionpow -> . tipos
    (36) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (113) empty -> .
    (71) tipos -> . I64
    (72) tipos -> . F64
    (73) tipos -> . BOOL
    (74) tipos -> . CHAR
    (75) tipos -> . STRING
    (76) tipos -> . AMP STR
    (77) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    MENOS           shift and go to state 87
    PARIZQ          shift and go to state 90
    ENTERO          shift and go to state 91
    DECIMAL         shift and go to state 92
    FORM            shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    VECM            shift and go to state 96
    ID              shift and go to state 98
    CHARE           shift and go to state 99
    POW             shift and go to state 101
    POWF            shift and go to state 102
    IF              shift and go to state 82
    LOOP            shift and go to state 104
    CORIZQ          reduce using rule 113 (empty -> .)
    MAS             reduce using rule 113 (empty -> .)
    POR             reduce using rule 113 (empty -> .)
    DIVIDIDO        reduce using rule 113 (empty -> .)
    MOD             reduce using rule 113 (empty -> .)
    AS              reduce using rule 113 (empty -> .)
    PT              reduce using rule 113 (empty -> .)
    IGUAL           reduce using rule 113 (empty -> .)
    MENOR           reduce using rule 113 (empty -> .)
    MAYOR           reduce using rule 113 (empty -> .)
    MEIGUAL         reduce using rule 113 (empty -> .)
    MAIGUAL         reduce using rule 113 (empty -> .)
    DIS             reduce using rule 113 (empty -> .)
    LLAVEIZQ        reduce using rule 113 (empty -> .)
    AND             reduce using rule 113 (empty -> .)
    OR              reduce using rule 113 (empty -> .)
    DPT             reduce using rule 113 (empty -> .)
    PTCOMA          reduce using rule 113 (empty -> .)
    PARDER          reduce using rule 113 (empty -> .)
    COMA            reduce using rule 113 (empty -> .)
    CORDER          reduce using rule 113 (empty -> .)
    LLAVEDER        reduce using rule 113 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 113 (empty -> .) ]

    expresion                      shift and go to state 180
    tipos                          shift and go to state 88
    instrif                        shift and go to state 89
    listarreglo                    shift and go to state 97
    opcionpow                      shift and go to state 100
    instrloop                      shift and go to state 103
    empty                          shift and go to state 80

state 138

    (81) expresion -> expresion DIVIDIDO . expresion
    (78) expresion -> . expresion MAS expresion
    (79) expresion -> . expresion MENOS expresion
    (80) expresion -> . expresion POR expresion
    (81) expresion -> . expresion DIVIDIDO expresion
    (82) expresion -> . expresion MOD expresion
    (83) expresion -> . expresion AS tipos
    (84) expresion -> . instrif
    (85) expresion -> . MENOS expresion
    (86) expresion -> . PARIZQ logica PARDER
    (87) expresion -> . ENTERO
    (88) expresion -> . DECIMAL
    (89) expresion -> . FORM
    (90) expresion -> . TRUE
    (91) expresion -> . FALSE
    (92) expresion -> . VECM NOT listarreglo
    (93) expresion -> . ID listarreglo
    (94) expresion -> . ID PARIZQ listexpr PARDER
    (95) expresion -> . listarreglo
    (96) expresion -> . CHARE
    (97) expresion -> . opcionpow DPT DPT expresion
    (100) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (101) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (102) expresion -> . instrloop
    (103) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (104) expresion -> . expresion PT SQRT PARIZQ PARDER
    (105) expresion -> . expresion PT ABS PARIZQ PARDER
    (106) expresion -> . expresion PT CLONE PARIZQ PARDER
    (107) expresion -> . expresion PT LEN PARIZQ PARDER
    (108) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (37) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (109) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (110) listarreglo -> . empty
    (98) opcionpow -> . expresion
    (99) opcionpow -> . tipos
    (36) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (113) empty -> .
    (71) tipos -> . I64
    (72) tipos -> . F64
    (73) tipos -> . BOOL
    (74) tipos -> . CHAR
    (75) tipos -> . STRING
    (76) tipos -> . AMP STR
    (77) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    MENOS           shift and go to state 87
    PARIZQ          shift and go to state 90
    ENTERO          shift and go to state 91
    DECIMAL         shift and go to state 92
    FORM            shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    VECM            shift and go to state 96
    ID              shift and go to state 98
    CHARE           shift and go to state 99
    POW             shift and go to state 101
    POWF            shift and go to state 102
    IF              shift and go to state 82
    LOOP            shift and go to state 104
    CORIZQ          reduce using rule 113 (empty -> .)
    MAS             reduce using rule 113 (empty -> .)
    POR             reduce using rule 113 (empty -> .)
    DIVIDIDO        reduce using rule 113 (empty -> .)
    MOD             reduce using rule 113 (empty -> .)
    AS              reduce using rule 113 (empty -> .)
    PT              reduce using rule 113 (empty -> .)
    IGUAL           reduce using rule 113 (empty -> .)
    MENOR           reduce using rule 113 (empty -> .)
    MAYOR           reduce using rule 113 (empty -> .)
    MEIGUAL         reduce using rule 113 (empty -> .)
    MAIGUAL         reduce using rule 113 (empty -> .)
    DIS             reduce using rule 113 (empty -> .)
    LLAVEIZQ        reduce using rule 113 (empty -> .)
    AND             reduce using rule 113 (empty -> .)
    OR              reduce using rule 113 (empty -> .)
    DPT             reduce using rule 113 (empty -> .)
    PTCOMA          reduce using rule 113 (empty -> .)
    PARDER          reduce using rule 113 (empty -> .)
    COMA            reduce using rule 113 (empty -> .)
    CORDER          reduce using rule 113 (empty -> .)
    LLAVEDER        reduce using rule 113 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 113 (empty -> .) ]

    expresion                      shift and go to state 181
    tipos                          shift and go to state 88
    instrif                        shift and go to state 89
    listarreglo                    shift and go to state 97
    opcionpow                      shift and go to state 100
    instrloop                      shift and go to state 103
    empty                          shift and go to state 80

state 139

    (82) expresion -> expresion MOD . expresion
    (78) expresion -> . expresion MAS expresion
    (79) expresion -> . expresion MENOS expresion
    (80) expresion -> . expresion POR expresion
    (81) expresion -> . expresion DIVIDIDO expresion
    (82) expresion -> . expresion MOD expresion
    (83) expresion -> . expresion AS tipos
    (84) expresion -> . instrif
    (85) expresion -> . MENOS expresion
    (86) expresion -> . PARIZQ logica PARDER
    (87) expresion -> . ENTERO
    (88) expresion -> . DECIMAL
    (89) expresion -> . FORM
    (90) expresion -> . TRUE
    (91) expresion -> . FALSE
    (92) expresion -> . VECM NOT listarreglo
    (93) expresion -> . ID listarreglo
    (94) expresion -> . ID PARIZQ listexpr PARDER
    (95) expresion -> . listarreglo
    (96) expresion -> . CHARE
    (97) expresion -> . opcionpow DPT DPT expresion
    (100) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (101) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (102) expresion -> . instrloop
    (103) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (104) expresion -> . expresion PT SQRT PARIZQ PARDER
    (105) expresion -> . expresion PT ABS PARIZQ PARDER
    (106) expresion -> . expresion PT CLONE PARIZQ PARDER
    (107) expresion -> . expresion PT LEN PARIZQ PARDER
    (108) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (37) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (109) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (110) listarreglo -> . empty
    (98) opcionpow -> . expresion
    (99) opcionpow -> . tipos
    (36) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (113) empty -> .
    (71) tipos -> . I64
    (72) tipos -> . F64
    (73) tipos -> . BOOL
    (74) tipos -> . CHAR
    (75) tipos -> . STRING
    (76) tipos -> . AMP STR
    (77) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    MENOS           shift and go to state 87
    PARIZQ          shift and go to state 90
    ENTERO          shift and go to state 91
    DECIMAL         shift and go to state 92
    FORM            shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    VECM            shift and go to state 96
    ID              shift and go to state 98
    CHARE           shift and go to state 99
    POW             shift and go to state 101
    POWF            shift and go to state 102
    IF              shift and go to state 82
    LOOP            shift and go to state 104
    CORIZQ          reduce using rule 113 (empty -> .)
    MAS             reduce using rule 113 (empty -> .)
    POR             reduce using rule 113 (empty -> .)
    DIVIDIDO        reduce using rule 113 (empty -> .)
    MOD             reduce using rule 113 (empty -> .)
    AS              reduce using rule 113 (empty -> .)
    PT              reduce using rule 113 (empty -> .)
    IGUAL           reduce using rule 113 (empty -> .)
    MENOR           reduce using rule 113 (empty -> .)
    MAYOR           reduce using rule 113 (empty -> .)
    MEIGUAL         reduce using rule 113 (empty -> .)
    MAIGUAL         reduce using rule 113 (empty -> .)
    DIS             reduce using rule 113 (empty -> .)
    LLAVEIZQ        reduce using rule 113 (empty -> .)
    AND             reduce using rule 113 (empty -> .)
    OR              reduce using rule 113 (empty -> .)
    DPT             reduce using rule 113 (empty -> .)
    PTCOMA          reduce using rule 113 (empty -> .)
    PARDER          reduce using rule 113 (empty -> .)
    COMA            reduce using rule 113 (empty -> .)
    CORDER          reduce using rule 113 (empty -> .)
    LLAVEDER        reduce using rule 113 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 113 (empty -> .) ]

    expresion                      shift and go to state 182
    tipos                          shift and go to state 88
    instrif                        shift and go to state 89
    listarreglo                    shift and go to state 97
    opcionpow                      shift and go to state 100
    instrloop                      shift and go to state 103
    empty                          shift and go to state 80

state 140

    (83) expresion -> expresion AS . tipos
    (71) tipos -> . I64
    (72) tipos -> . F64
    (73) tipos -> . BOOL
    (74) tipos -> . CHAR
    (75) tipos -> . STRING
    (76) tipos -> . AMP STR
    (77) tipos -> . USIZE

    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

    tipos                          shift and go to state 183

state 141

    (103) expresion -> expresion PT . TOSTRING PARIZQ PARDER
    (104) expresion -> expresion PT . SQRT PARIZQ PARDER
    (105) expresion -> expresion PT . ABS PARIZQ PARDER
    (106) expresion -> expresion PT . CLONE PARIZQ PARDER
    (107) expresion -> expresion PT . LEN PARIZQ PARDER
    (108) expresion -> expresion PT . TOOWNED PARIZQ PARDER

    TOSTRING        shift and go to state 184
    SQRT            shift and go to state 185
    ABS             shift and go to state 186
    CLONE           shift and go to state 187
    LEN             shift and go to state 188
    TOOWNED         shift and go to state 189


state 142

    (85) expresion -> MENOS expresion .
    (78) expresion -> expresion . MAS expresion
    (79) expresion -> expresion . MENOS expresion
    (80) expresion -> expresion . POR expresion
    (81) expresion -> expresion . DIVIDIDO expresion
    (82) expresion -> expresion . MOD expresion
    (83) expresion -> expresion . AS tipos
    (103) expresion -> expresion . PT TOSTRING PARIZQ PARDER
    (104) expresion -> expresion . PT SQRT PARIZQ PARDER
    (105) expresion -> expresion . PT ABS PARIZQ PARDER
    (106) expresion -> expresion . PT CLONE PARIZQ PARDER
    (107) expresion -> expresion . PT LEN PARIZQ PARDER
    (108) expresion -> expresion . PT TOOWNED PARIZQ PARDER
    (98) opcionpow -> expresion .

  ! reduce/reduce conflict for DPT resolved using rule 85 (expresion -> MENOS expresion .)
    MAS             reduce using rule 85 (expresion -> MENOS expresion .)
    MENOS           reduce using rule 85 (expresion -> MENOS expresion .)
    POR             reduce using rule 85 (expresion -> MENOS expresion .)
    DIVIDIDO        reduce using rule 85 (expresion -> MENOS expresion .)
    MOD             reduce using rule 85 (expresion -> MENOS expresion .)
    AS              reduce using rule 85 (expresion -> MENOS expresion .)
    PT              reduce using rule 85 (expresion -> MENOS expresion .)
    IGUAL           reduce using rule 85 (expresion -> MENOS expresion .)
    MENOR           reduce using rule 85 (expresion -> MENOS expresion .)
    MAYOR           reduce using rule 85 (expresion -> MENOS expresion .)
    MEIGUAL         reduce using rule 85 (expresion -> MENOS expresion .)
    MAIGUAL         reduce using rule 85 (expresion -> MENOS expresion .)
    DIS             reduce using rule 85 (expresion -> MENOS expresion .)
    LLAVEIZQ        reduce using rule 85 (expresion -> MENOS expresion .)
    AND             reduce using rule 85 (expresion -> MENOS expresion .)
    OR              reduce using rule 85 (expresion -> MENOS expresion .)
    DPT             reduce using rule 85 (expresion -> MENOS expresion .)
    PTCOMA          reduce using rule 85 (expresion -> MENOS expresion .)
    PARDER          reduce using rule 85 (expresion -> MENOS expresion .)
    COMA            reduce using rule 85 (expresion -> MENOS expresion .)
    CORDER          reduce using rule 85 (expresion -> MENOS expresion .)
    LLAVEDER        reduce using rule 85 (expresion -> MENOS expresion .)

  ! MAS             [ shift and go to state 135 ]
  ! MENOS           [ shift and go to state 136 ]
  ! POR             [ shift and go to state 137 ]
  ! DIVIDIDO        [ shift and go to state 138 ]
  ! MOD             [ shift and go to state 139 ]
  ! AS              [ shift and go to state 140 ]
  ! PT              [ shift and go to state 141 ]
  ! DPT             [ reduce using rule 98 (opcionpow -> expresion .) ]


state 143

    (86) expresion -> PARIZQ logica . PARDER
    (47) logica -> logica . AND logica
    (48) logica -> logica . OR logica

    PARDER          shift and go to state 190
    AND             shift and go to state 126
    OR              shift and go to state 127


state 144

    (92) expresion -> VECM NOT . listarreglo
    (109) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (110) listarreglo -> . empty
    (113) empty -> .

    CORIZQ          reduce using rule 113 (empty -> .)
    MAS             reduce using rule 113 (empty -> .)
    MENOS           reduce using rule 113 (empty -> .)
    POR             reduce using rule 113 (empty -> .)
    DIVIDIDO        reduce using rule 113 (empty -> .)
    MOD             reduce using rule 113 (empty -> .)
    AS              reduce using rule 113 (empty -> .)
    PT              reduce using rule 113 (empty -> .)
    IGUAL           reduce using rule 113 (empty -> .)
    MENOR           reduce using rule 113 (empty -> .)
    MAYOR           reduce using rule 113 (empty -> .)
    MEIGUAL         reduce using rule 113 (empty -> .)
    MAIGUAL         reduce using rule 113 (empty -> .)
    DIS             reduce using rule 113 (empty -> .)
    LLAVEIZQ        reduce using rule 113 (empty -> .)
    AND             reduce using rule 113 (empty -> .)
    OR              reduce using rule 113 (empty -> .)
    DPT             reduce using rule 113 (empty -> .)
    PTCOMA          reduce using rule 113 (empty -> .)
    PARDER          reduce using rule 113 (empty -> .)
    COMA            reduce using rule 113 (empty -> .)
    CORDER          reduce using rule 113 (empty -> .)
    LLAVEDER        reduce using rule 113 (empty -> .)

    listarreglo                    shift and go to state 191
    empty                          shift and go to state 80

state 145

    (93) expresion -> ID listarreglo .
    (109) listarreglo -> listarreglo . CORIZQ listexpr CORDER

    MAS             reduce using rule 93 (expresion -> ID listarreglo .)
    MENOS           reduce using rule 93 (expresion -> ID listarreglo .)
    POR             reduce using rule 93 (expresion -> ID listarreglo .)
    DIVIDIDO        reduce using rule 93 (expresion -> ID listarreglo .)
    MOD             reduce using rule 93 (expresion -> ID listarreglo .)
    AS              reduce using rule 93 (expresion -> ID listarreglo .)
    PT              reduce using rule 93 (expresion -> ID listarreglo .)
    IGUAL           reduce using rule 93 (expresion -> ID listarreglo .)
    MENOR           reduce using rule 93 (expresion -> ID listarreglo .)
    MAYOR           reduce using rule 93 (expresion -> ID listarreglo .)
    MEIGUAL         reduce using rule 93 (expresion -> ID listarreglo .)
    MAIGUAL         reduce using rule 93 (expresion -> ID listarreglo .)
    DIS             reduce using rule 93 (expresion -> ID listarreglo .)
    LLAVEIZQ        reduce using rule 93 (expresion -> ID listarreglo .)
    AND             reduce using rule 93 (expresion -> ID listarreglo .)
    OR              reduce using rule 93 (expresion -> ID listarreglo .)
    DPT             reduce using rule 93 (expresion -> ID listarreglo .)
    PTCOMA          reduce using rule 93 (expresion -> ID listarreglo .)
    PARDER          reduce using rule 93 (expresion -> ID listarreglo .)
    COMA            reduce using rule 93 (expresion -> ID listarreglo .)
    CORDER          reduce using rule 93 (expresion -> ID listarreglo .)
    LLAVEDER        reduce using rule 93 (expresion -> ID listarreglo .)
    CORIZQ          shift and go to state 120


state 146

    (94) expresion -> ID PARIZQ . listexpr PARDER
    (111) listexpr -> . listexpr COMA expresion
    (112) listexpr -> . expresion
    (78) expresion -> . expresion MAS expresion
    (79) expresion -> . expresion MENOS expresion
    (80) expresion -> . expresion POR expresion
    (81) expresion -> . expresion DIVIDIDO expresion
    (82) expresion -> . expresion MOD expresion
    (83) expresion -> . expresion AS tipos
    (84) expresion -> . instrif
    (85) expresion -> . MENOS expresion
    (86) expresion -> . PARIZQ logica PARDER
    (87) expresion -> . ENTERO
    (88) expresion -> . DECIMAL
    (89) expresion -> . FORM
    (90) expresion -> . TRUE
    (91) expresion -> . FALSE
    (92) expresion -> . VECM NOT listarreglo
    (93) expresion -> . ID listarreglo
    (94) expresion -> . ID PARIZQ listexpr PARDER
    (95) expresion -> . listarreglo
    (96) expresion -> . CHARE
    (97) expresion -> . opcionpow DPT DPT expresion
    (100) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (101) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (102) expresion -> . instrloop
    (103) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (104) expresion -> . expresion PT SQRT PARIZQ PARDER
    (105) expresion -> . expresion PT ABS PARIZQ PARDER
    (106) expresion -> . expresion PT CLONE PARIZQ PARDER
    (107) expresion -> . expresion PT LEN PARIZQ PARDER
    (108) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (37) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (109) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (110) listarreglo -> . empty
    (98) opcionpow -> . expresion
    (99) opcionpow -> . tipos
    (36) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (113) empty -> .
    (71) tipos -> . I64
    (72) tipos -> . F64
    (73) tipos -> . BOOL
    (74) tipos -> . CHAR
    (75) tipos -> . STRING
    (76) tipos -> . AMP STR
    (77) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    MENOS           shift and go to state 87
    PARIZQ          shift and go to state 90
    ENTERO          shift and go to state 91
    DECIMAL         shift and go to state 92
    FORM            shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    VECM            shift and go to state 96
    ID              shift and go to state 98
    CHARE           shift and go to state 99
    POW             shift and go to state 101
    POWF            shift and go to state 102
    IF              shift and go to state 82
    LOOP            shift and go to state 104
    CORIZQ          reduce using rule 113 (empty -> .)
    MAS             reduce using rule 113 (empty -> .)
    POR             reduce using rule 113 (empty -> .)
    DIVIDIDO        reduce using rule 113 (empty -> .)
    MOD             reduce using rule 113 (empty -> .)
    AS              reduce using rule 113 (empty -> .)
    PT              reduce using rule 113 (empty -> .)
    PARDER          reduce using rule 113 (empty -> .)
    COMA            reduce using rule 113 (empty -> .)
    DPT             reduce using rule 113 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 113 (empty -> .) ]

    listexpr                       shift and go to state 192
    expresion                      shift and go to state 122
    tipos                          shift and go to state 88
    instrif                        shift and go to state 89
    listarreglo                    shift and go to state 97
    opcionpow                      shift and go to state 100
    instrloop                      shift and go to state 103
    empty                          shift and go to state 80

state 147

    (97) expresion -> opcionpow DPT . DPT expresion

    DPT             shift and go to state 193


state 148

    (100) expresion -> POW PARIZQ . ENTERO COMA ENTERO PARDER

    ENTERO          shift and go to state 194


state 149

    (101) expresion -> POWF PARIZQ . DECIMAL COMA DECIMAL PARDER

    DECIMAL         shift and go to state 195


state 150

    (36) instrloop -> LOOP LLAVEIZQ . instrucciones LLAVEDER
    (17) instrucciones -> . instruccion instrucciones
    (18) instrucciones -> . instruccion
    (19) instruccion -> . LET mutable ID pyc arrtipos IGUAL logica PTCOMA
    (20) instruccion -> . ID listarreglo IGUAL logica PTCOMA
    (21) instruccion -> . ID PARIZQ listexpr PARDER PTCOMA
    (22) instruccion -> . PRINT NOT PARIZQ listexpr PARDER PTCOMA
    (23) instruccion -> . IF logica LLAVEIZQ instrucciones LLAVEDER unelse
    (24) instruccion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (25) instruccion -> . RETURN logica PTCOMA
    (26) instruccion -> . WHILE logica LLAVEIZQ instrucciones LLAVEDER
    (27) instruccion -> . FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER
    (28) instruccion -> . BREAK PTCOMA
    (29) instruccion -> . CONTINUE PTCOMA
    (30) instruccion -> . BREAK logica PTCOMA

    LET             shift and go to state 51
    ID              shift and go to state 52
    PRINT           shift and go to state 53
    IF              shift and go to state 54
    LOOP            shift and go to state 55
    RETURN          shift and go to state 56
    WHILE           shift and go to state 57
    FOR             shift and go to state 58
    BREAK           shift and go to state 59
    CONTINUE        shift and go to state 60

    instrucciones                  shift and go to state 196
    instruccion                    shift and go to state 50

state 151

    (24) instruccion -> LOOP LLAVEIZQ instrucciones . LLAVEDER

    LLAVEDER        shift and go to state 197


state 152

    (25) instruccion -> RETURN logica PTCOMA .

    LET             reduce using rule 25 (instruccion -> RETURN logica PTCOMA .)
    ID              reduce using rule 25 (instruccion -> RETURN logica PTCOMA .)
    PRINT           reduce using rule 25 (instruccion -> RETURN logica PTCOMA .)
    IF              reduce using rule 25 (instruccion -> RETURN logica PTCOMA .)
    LOOP            reduce using rule 25 (instruccion -> RETURN logica PTCOMA .)
    RETURN          reduce using rule 25 (instruccion -> RETURN logica PTCOMA .)
    WHILE           reduce using rule 25 (instruccion -> RETURN logica PTCOMA .)
    FOR             reduce using rule 25 (instruccion -> RETURN logica PTCOMA .)
    BREAK           reduce using rule 25 (instruccion -> RETURN logica PTCOMA .)
    CONTINUE        reduce using rule 25 (instruccion -> RETURN logica PTCOMA .)
    LLAVEDER        reduce using rule 25 (instruccion -> RETURN logica PTCOMA .)
    MENOS           reduce using rule 25 (instruccion -> RETURN logica PTCOMA .)
    PARIZQ          reduce using rule 25 (instruccion -> RETURN logica PTCOMA .)
    ENTERO          reduce using rule 25 (instruccion -> RETURN logica PTCOMA .)
    DECIMAL         reduce using rule 25 (instruccion -> RETURN logica PTCOMA .)
    FORM            reduce using rule 25 (instruccion -> RETURN logica PTCOMA .)
    TRUE            reduce using rule 25 (instruccion -> RETURN logica PTCOMA .)
    FALSE           reduce using rule 25 (instruccion -> RETURN logica PTCOMA .)
    VECM            reduce using rule 25 (instruccion -> RETURN logica PTCOMA .)
    CHARE           reduce using rule 25 (instruccion -> RETURN logica PTCOMA .)
    POW             reduce using rule 25 (instruccion -> RETURN logica PTCOMA .)
    POWF            reduce using rule 25 (instruccion -> RETURN logica PTCOMA .)
    I64             reduce using rule 25 (instruccion -> RETURN logica PTCOMA .)
    F64             reduce using rule 25 (instruccion -> RETURN logica PTCOMA .)
    BOOL            reduce using rule 25 (instruccion -> RETURN logica PTCOMA .)
    CHAR            reduce using rule 25 (instruccion -> RETURN logica PTCOMA .)
    STRING          reduce using rule 25 (instruccion -> RETURN logica PTCOMA .)
    AMP             reduce using rule 25 (instruccion -> RETURN logica PTCOMA .)
    USIZE           reduce using rule 25 (instruccion -> RETURN logica PTCOMA .)
    MAS             reduce using rule 25 (instruccion -> RETURN logica PTCOMA .)
    POR             reduce using rule 25 (instruccion -> RETURN logica PTCOMA .)
    DIVIDIDO        reduce using rule 25 (instruccion -> RETURN logica PTCOMA .)
    MOD             reduce using rule 25 (instruccion -> RETURN logica PTCOMA .)
    AS              reduce using rule 25 (instruccion -> RETURN logica PTCOMA .)
    PT              reduce using rule 25 (instruccion -> RETURN logica PTCOMA .)
    CORIZQ          reduce using rule 25 (instruccion -> RETURN logica PTCOMA .)
    DPT             reduce using rule 25 (instruccion -> RETURN logica PTCOMA .)


state 153

    (26) instruccion -> WHILE logica LLAVEIZQ . instrucciones LLAVEDER
    (17) instrucciones -> . instruccion instrucciones
    (18) instrucciones -> . instruccion
    (19) instruccion -> . LET mutable ID pyc arrtipos IGUAL logica PTCOMA
    (20) instruccion -> . ID listarreglo IGUAL logica PTCOMA
    (21) instruccion -> . ID PARIZQ listexpr PARDER PTCOMA
    (22) instruccion -> . PRINT NOT PARIZQ listexpr PARDER PTCOMA
    (23) instruccion -> . IF logica LLAVEIZQ instrucciones LLAVEDER unelse
    (24) instruccion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (25) instruccion -> . RETURN logica PTCOMA
    (26) instruccion -> . WHILE logica LLAVEIZQ instrucciones LLAVEDER
    (27) instruccion -> . FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER
    (28) instruccion -> . BREAK PTCOMA
    (29) instruccion -> . CONTINUE PTCOMA
    (30) instruccion -> . BREAK logica PTCOMA

    LET             shift and go to state 51
    ID              shift and go to state 52
    PRINT           shift and go to state 53
    IF              shift and go to state 54
    LOOP            shift and go to state 55
    RETURN          shift and go to state 56
    WHILE           shift and go to state 57
    FOR             shift and go to state 58
    BREAK           shift and go to state 59
    CONTINUE        shift and go to state 60

    instrucciones                  shift and go to state 198
    instruccion                    shift and go to state 50

state 154

    (27) instruccion -> FOR ID IN . opcionfor LLAVEIZQ instrucciones LLAVEDER
    (41) opcionfor -> . logica
    (42) opcionfor -> . ENTERO PT PT logica
    (43) opcionfor -> . empty
    (47) logica -> . logica AND logica
    (48) logica -> . logica OR logica
    (49) logica -> . NOT logica
    (50) logica -> . rel
    (113) empty -> .
    (51) rel -> . rel IGUAL IGUAL rel
    (52) rel -> . rel MENOR rel
    (53) rel -> . rel MAYOR rel
    (54) rel -> . rel MEIGUAL rel
    (55) rel -> . rel MAIGUAL rel
    (56) rel -> . rel DIS rel
    (57) rel -> . expresion
    (78) expresion -> . expresion MAS expresion
    (79) expresion -> . expresion MENOS expresion
    (80) expresion -> . expresion POR expresion
    (81) expresion -> . expresion DIVIDIDO expresion
    (82) expresion -> . expresion MOD expresion
    (83) expresion -> . expresion AS tipos
    (84) expresion -> . instrif
    (85) expresion -> . MENOS expresion
    (86) expresion -> . PARIZQ logica PARDER
    (87) expresion -> . ENTERO
    (88) expresion -> . DECIMAL
    (89) expresion -> . FORM
    (90) expresion -> . TRUE
    (91) expresion -> . FALSE
    (92) expresion -> . VECM NOT listarreglo
    (93) expresion -> . ID listarreglo
    (94) expresion -> . ID PARIZQ listexpr PARDER
    (95) expresion -> . listarreglo
    (96) expresion -> . CHARE
    (97) expresion -> . opcionpow DPT DPT expresion
    (100) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (101) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (102) expresion -> . instrloop
    (103) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (104) expresion -> . expresion PT SQRT PARIZQ PARDER
    (105) expresion -> . expresion PT ABS PARIZQ PARDER
    (106) expresion -> . expresion PT CLONE PARIZQ PARDER
    (107) expresion -> . expresion PT LEN PARIZQ PARDER
    (108) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (37) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (109) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (110) listarreglo -> . empty
    (98) opcionpow -> . expresion
    (99) opcionpow -> . tipos
    (36) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (71) tipos -> . I64
    (72) tipos -> . F64
    (73) tipos -> . BOOL
    (74) tipos -> . CHAR
    (75) tipos -> . STRING
    (76) tipos -> . AMP STR
    (77) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    ENTERO          shift and go to state 201
    NOT             shift and go to state 84
    LLAVEIZQ        reduce using rule 113 (empty -> .)
    CORIZQ          reduce using rule 113 (empty -> .)
    MAS             reduce using rule 113 (empty -> .)
    POR             reduce using rule 113 (empty -> .)
    DIVIDIDO        reduce using rule 113 (empty -> .)
    MOD             reduce using rule 113 (empty -> .)
    AS              reduce using rule 113 (empty -> .)
    PT              reduce using rule 113 (empty -> .)
    IGUAL           reduce using rule 113 (empty -> .)
    MENOR           reduce using rule 113 (empty -> .)
    MAYOR           reduce using rule 113 (empty -> .)
    MEIGUAL         reduce using rule 113 (empty -> .)
    MAIGUAL         reduce using rule 113 (empty -> .)
    DIS             reduce using rule 113 (empty -> .)
    AND             reduce using rule 113 (empty -> .)
    OR              reduce using rule 113 (empty -> .)
    DPT             reduce using rule 113 (empty -> .)
    MENOS           shift and go to state 87
    PARIZQ          shift and go to state 90
    DECIMAL         shift and go to state 92
    FORM            shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    VECM            shift and go to state 96
    ID              shift and go to state 98
    CHARE           shift and go to state 99
    POW             shift and go to state 101
    POWF            shift and go to state 102
    IF              shift and go to state 82
    LOOP            shift and go to state 104
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 113 (empty -> .) ]

    opcionfor                      shift and go to state 199
    logica                         shift and go to state 200
    empty                          shift and go to state 202
    rel                            shift and go to state 85
    expresion                      shift and go to state 86
    tipos                          shift and go to state 88
    instrif                        shift and go to state 89
    listarreglo                    shift and go to state 97
    opcionpow                      shift and go to state 100
    instrloop                      shift and go to state 103

state 155

    (30) instruccion -> BREAK logica PTCOMA .

    LET             reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    ID              reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    PRINT           reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    IF              reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    LOOP            reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    RETURN          reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    WHILE           reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    FOR             reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    BREAK           reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    CONTINUE        reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    LLAVEDER        reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    MENOS           reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    PARIZQ          reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    ENTERO          reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    DECIMAL         reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    FORM            reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    TRUE            reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    FALSE           reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    VECM            reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    CHARE           reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    POW             reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    POWF            reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    I64             reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    F64             reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    BOOL            reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    CHAR            reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    STRING          reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    AMP             reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    USIZE           reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    MAS             reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    POR             reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    DIVIDIDO        reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    MOD             reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    AS              reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    PT              reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    CORIZQ          reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    DPT             reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)


state 156

    (13) liststruct -> liststruct COMA ID DPT tipos .

    LLAVEDER        reduce using rule 13 (liststruct -> liststruct COMA ID DPT tipos .)
    COMA            reduce using rule 13 (liststruct -> liststruct COMA ID DPT tipos .)


state 157

    (3) funcion -> PUB FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones . LLAVEDER

    LLAVEDER        shift and go to state 203


state 158

    (4) funcion -> FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER .

    PUB             reduce using rule 4 (funcion -> FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER .)
    FN              reduce using rule 4 (funcion -> FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER .)
    MODF            reduce using rule 4 (funcion -> FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER .)
    STRUCT          reduce using rule 4 (funcion -> FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER .)
    $end            reduce using rule 4 (funcion -> FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER .)
    LLAVEDER        reduce using rule 4 (funcion -> FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER .)


state 159

    (11) parametros2 -> parametros2 COMA mutable ID DPT tipos .

    COMA            reduce using rule 11 (parametros2 -> parametros2 COMA mutable ID DPT tipos .)
    PARDER          reduce using rule 11 (parametros2 -> parametros2 COMA mutable ID DPT tipos .)


state 160

    (19) instruccion -> LET mutable ID pyc . arrtipos IGUAL logica PTCOMA
    (62) arrtipos -> . tipos
    (63) arrtipos -> . arreglos
    (64) arrtipos -> . empty
    (71) tipos -> . I64
    (72) tipos -> . F64
    (73) tipos -> . BOOL
    (74) tipos -> . CHAR
    (75) tipos -> . STRING
    (76) tipos -> . AMP STR
    (77) tipos -> . USIZE
    (68) arreglos -> . CORIZQ arreglos PTCOMA ENTERO CORDER
    (69) arreglos -> . tipos
    (70) arreglos -> . ID
    (113) empty -> .

    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68
    CORIZQ          shift and go to state 209
    ID              shift and go to state 204
    IGUAL           reduce using rule 113 (empty -> .)

    arrtipos                       shift and go to state 205
    tipos                          shift and go to state 206
    arreglos                       shift and go to state 207
    empty                          shift and go to state 208

state 161

    (60) pyc -> DPT .

    I64             reduce using rule 60 (pyc -> DPT .)
    F64             reduce using rule 60 (pyc -> DPT .)
    BOOL            reduce using rule 60 (pyc -> DPT .)
    CHAR            reduce using rule 60 (pyc -> DPT .)
    STRING          reduce using rule 60 (pyc -> DPT .)
    AMP             reduce using rule 60 (pyc -> DPT .)
    USIZE           reduce using rule 60 (pyc -> DPT .)
    CORIZQ          reduce using rule 60 (pyc -> DPT .)
    ID              reduce using rule 60 (pyc -> DPT .)
    IGUAL           reduce using rule 60 (pyc -> DPT .)


state 162

    (61) pyc -> empty .

    I64             reduce using rule 61 (pyc -> empty .)
    F64             reduce using rule 61 (pyc -> empty .)
    BOOL            reduce using rule 61 (pyc -> empty .)
    CHAR            reduce using rule 61 (pyc -> empty .)
    STRING          reduce using rule 61 (pyc -> empty .)
    AMP             reduce using rule 61 (pyc -> empty .)
    USIZE           reduce using rule 61 (pyc -> empty .)
    CORIZQ          reduce using rule 61 (pyc -> empty .)
    ID              reduce using rule 61 (pyc -> empty .)
    IGUAL           reduce using rule 61 (pyc -> empty .)


state 163

    (20) instruccion -> ID listarreglo IGUAL logica . PTCOMA
    (47) logica -> logica . AND logica
    (48) logica -> logica . OR logica

    PTCOMA          shift and go to state 210
    AND             shift and go to state 126
    OR              shift and go to state 127


state 164

    (109) listarreglo -> listarreglo CORIZQ listexpr . CORDER
    (111) listexpr -> listexpr . COMA expresion

    CORDER          shift and go to state 211
    COMA            shift and go to state 166


state 165

    (21) instruccion -> ID PARIZQ listexpr PARDER . PTCOMA

    PTCOMA          shift and go to state 212


state 166

    (111) listexpr -> listexpr COMA . expresion
    (78) expresion -> . expresion MAS expresion
    (79) expresion -> . expresion MENOS expresion
    (80) expresion -> . expresion POR expresion
    (81) expresion -> . expresion DIVIDIDO expresion
    (82) expresion -> . expresion MOD expresion
    (83) expresion -> . expresion AS tipos
    (84) expresion -> . instrif
    (85) expresion -> . MENOS expresion
    (86) expresion -> . PARIZQ logica PARDER
    (87) expresion -> . ENTERO
    (88) expresion -> . DECIMAL
    (89) expresion -> . FORM
    (90) expresion -> . TRUE
    (91) expresion -> . FALSE
    (92) expresion -> . VECM NOT listarreglo
    (93) expresion -> . ID listarreglo
    (94) expresion -> . ID PARIZQ listexpr PARDER
    (95) expresion -> . listarreglo
    (96) expresion -> . CHARE
    (97) expresion -> . opcionpow DPT DPT expresion
    (100) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (101) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (102) expresion -> . instrloop
    (103) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (104) expresion -> . expresion PT SQRT PARIZQ PARDER
    (105) expresion -> . expresion PT ABS PARIZQ PARDER
    (106) expresion -> . expresion PT CLONE PARIZQ PARDER
    (107) expresion -> . expresion PT LEN PARIZQ PARDER
    (108) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (37) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (109) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (110) listarreglo -> . empty
    (98) opcionpow -> . expresion
    (99) opcionpow -> . tipos
    (36) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (113) empty -> .
    (71) tipos -> . I64
    (72) tipos -> . F64
    (73) tipos -> . BOOL
    (74) tipos -> . CHAR
    (75) tipos -> . STRING
    (76) tipos -> . AMP STR
    (77) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    MENOS           shift and go to state 87
    PARIZQ          shift and go to state 90
    ENTERO          shift and go to state 91
    DECIMAL         shift and go to state 92
    FORM            shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    VECM            shift and go to state 96
    ID              shift and go to state 98
    CHARE           shift and go to state 99
    POW             shift and go to state 101
    POWF            shift and go to state 102
    IF              shift and go to state 82
    LOOP            shift and go to state 104
    CORIZQ          reduce using rule 113 (empty -> .)
    MAS             reduce using rule 113 (empty -> .)
    POR             reduce using rule 113 (empty -> .)
    DIVIDIDO        reduce using rule 113 (empty -> .)
    MOD             reduce using rule 113 (empty -> .)
    AS              reduce using rule 113 (empty -> .)
    PT              reduce using rule 113 (empty -> .)
    PARDER          reduce using rule 113 (empty -> .)
    COMA            reduce using rule 113 (empty -> .)
    CORDER          reduce using rule 113 (empty -> .)
    DPT             reduce using rule 113 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 113 (empty -> .) ]

    expresion                      shift and go to state 213
    tipos                          shift and go to state 88
    instrif                        shift and go to state 89
    listarreglo                    shift and go to state 97
    opcionpow                      shift and go to state 100
    instrloop                      shift and go to state 103
    empty                          shift and go to state 80

state 167

    (22) instruccion -> PRINT NOT PARIZQ listexpr . PARDER PTCOMA
    (111) listexpr -> listexpr . COMA expresion

    PARDER          shift and go to state 214
    COMA            shift and go to state 166


state 168

    (37) instrif -> IF logica LLAVEIZQ . instruccionesexp LLAVEDER instrelse
    (31) instruccionesexp -> . instruccion instruccionesexpfin
    (32) instruccionesexp -> . instruccionesexpfin
    (19) instruccion -> . LET mutable ID pyc arrtipos IGUAL logica PTCOMA
    (20) instruccion -> . ID listarreglo IGUAL logica PTCOMA
    (21) instruccion -> . ID PARIZQ listexpr PARDER PTCOMA
    (22) instruccion -> . PRINT NOT PARIZQ listexpr PARDER PTCOMA
    (23) instruccion -> . IF logica LLAVEIZQ instrucciones LLAVEDER unelse
    (24) instruccion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (25) instruccion -> . RETURN logica PTCOMA
    (26) instruccion -> . WHILE logica LLAVEIZQ instrucciones LLAVEDER
    (27) instruccion -> . FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER
    (28) instruccion -> . BREAK PTCOMA
    (29) instruccion -> . CONTINUE PTCOMA
    (30) instruccion -> . BREAK logica PTCOMA
    (33) instruccionesexpfin -> . instruccionesexp
    (34) instruccionesexpfin -> . expresion
    (35) instruccionesexpfin -> .
    (78) expresion -> . expresion MAS expresion
    (79) expresion -> . expresion MENOS expresion
    (80) expresion -> . expresion POR expresion
    (81) expresion -> . expresion DIVIDIDO expresion
    (82) expresion -> . expresion MOD expresion
    (83) expresion -> . expresion AS tipos
    (84) expresion -> . instrif
    (85) expresion -> . MENOS expresion
    (86) expresion -> . PARIZQ logica PARDER
    (87) expresion -> . ENTERO
    (88) expresion -> . DECIMAL
    (89) expresion -> . FORM
    (90) expresion -> . TRUE
    (91) expresion -> . FALSE
    (92) expresion -> . VECM NOT listarreglo
    (93) expresion -> . ID listarreglo
    (94) expresion -> . ID PARIZQ listexpr PARDER
    (95) expresion -> . listarreglo
    (96) expresion -> . CHARE
    (97) expresion -> . opcionpow DPT DPT expresion
    (100) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (101) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (102) expresion -> . instrloop
    (103) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (104) expresion -> . expresion PT SQRT PARIZQ PARDER
    (105) expresion -> . expresion PT ABS PARIZQ PARDER
    (106) expresion -> . expresion PT CLONE PARIZQ PARDER
    (107) expresion -> . expresion PT LEN PARIZQ PARDER
    (108) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (37) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (109) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (110) listarreglo -> . empty
    (98) opcionpow -> . expresion
    (99) opcionpow -> . tipos
    (36) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (113) empty -> .
    (71) tipos -> . I64
    (72) tipos -> . F64
    (73) tipos -> . BOOL
    (74) tipos -> . CHAR
    (75) tipos -> . STRING
    (76) tipos -> . AMP STR
    (77) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
  ! reduce/reduce conflict for LLAVEDER resolved using rule 35 (instruccionesexpfin -> .)
    LET             shift and go to state 51
    ID              shift and go to state 219
    PRINT           shift and go to state 53
    IF              shift and go to state 215
    LOOP            shift and go to state 220
    RETURN          shift and go to state 56
    WHILE           shift and go to state 57
    FOR             shift and go to state 58
    BREAK           shift and go to state 59
    CONTINUE        shift and go to state 60
    LLAVEDER        reduce using rule 35 (instruccionesexpfin -> .)
    MENOS           shift and go to state 87
    PARIZQ          shift and go to state 90
    ENTERO          shift and go to state 91
    DECIMAL         shift and go to state 92
    FORM            shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    VECM            shift and go to state 96
    CHARE           shift and go to state 99
    POW             shift and go to state 101
    POWF            shift and go to state 102
    CORIZQ          reduce using rule 113 (empty -> .)
    MAS             reduce using rule 113 (empty -> .)
    POR             reduce using rule 113 (empty -> .)
    DIVIDIDO        reduce using rule 113 (empty -> .)
    MOD             reduce using rule 113 (empty -> .)
    AS              reduce using rule 113 (empty -> .)
    PT              reduce using rule 113 (empty -> .)
    DPT             reduce using rule 113 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 113 (empty -> .) ]
  ! LLAVEDER        [ reduce using rule 113 (empty -> .) ]

    instruccionesexp               shift and go to state 216
    instruccion                    shift and go to state 217
    instruccionesexpfin            shift and go to state 218
    listarreglo                    shift and go to state 97
    expresion                      shift and go to state 221
    tipos                          shift and go to state 88
    instrif                        shift and go to state 89
    opcionpow                      shift and go to state 100
    instrloop                      shift and go to state 103
    empty                          shift and go to state 80

state 169

    (23) instruccion -> IF logica LLAVEIZQ instrucciones . LLAVEDER unelse

    LLAVEDER        shift and go to state 222


state 170

    (47) logica -> logica AND logica .
    (47) logica -> logica . AND logica
    (48) logica -> logica . OR logica

    LLAVEIZQ        reduce using rule 47 (logica -> logica AND logica .)
    AND             reduce using rule 47 (logica -> logica AND logica .)
    OR              reduce using rule 47 (logica -> logica AND logica .)
    PTCOMA          reduce using rule 47 (logica -> logica AND logica .)
    PARDER          reduce using rule 47 (logica -> logica AND logica .)

  ! AND             [ shift and go to state 126 ]
  ! OR              [ shift and go to state 127 ]


state 171

    (48) logica -> logica OR logica .
    (47) logica -> logica . AND logica
    (48) logica -> logica . OR logica

    LLAVEIZQ        reduce using rule 48 (logica -> logica OR logica .)
    OR              reduce using rule 48 (logica -> logica OR logica .)
    PTCOMA          reduce using rule 48 (logica -> logica OR logica .)
    PARDER          reduce using rule 48 (logica -> logica OR logica .)
    AND             shift and go to state 126

  ! AND             [ reduce using rule 48 (logica -> logica OR logica .) ]
  ! OR              [ shift and go to state 127 ]


state 172

    (51) rel -> rel IGUAL IGUAL . rel
    (51) rel -> . rel IGUAL IGUAL rel
    (52) rel -> . rel MENOR rel
    (53) rel -> . rel MAYOR rel
    (54) rel -> . rel MEIGUAL rel
    (55) rel -> . rel MAIGUAL rel
    (56) rel -> . rel DIS rel
    (57) rel -> . expresion
    (78) expresion -> . expresion MAS expresion
    (79) expresion -> . expresion MENOS expresion
    (80) expresion -> . expresion POR expresion
    (81) expresion -> . expresion DIVIDIDO expresion
    (82) expresion -> . expresion MOD expresion
    (83) expresion -> . expresion AS tipos
    (84) expresion -> . instrif
    (85) expresion -> . MENOS expresion
    (86) expresion -> . PARIZQ logica PARDER
    (87) expresion -> . ENTERO
    (88) expresion -> . DECIMAL
    (89) expresion -> . FORM
    (90) expresion -> . TRUE
    (91) expresion -> . FALSE
    (92) expresion -> . VECM NOT listarreglo
    (93) expresion -> . ID listarreglo
    (94) expresion -> . ID PARIZQ listexpr PARDER
    (95) expresion -> . listarreglo
    (96) expresion -> . CHARE
    (97) expresion -> . opcionpow DPT DPT expresion
    (100) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (101) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (102) expresion -> . instrloop
    (103) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (104) expresion -> . expresion PT SQRT PARIZQ PARDER
    (105) expresion -> . expresion PT ABS PARIZQ PARDER
    (106) expresion -> . expresion PT CLONE PARIZQ PARDER
    (107) expresion -> . expresion PT LEN PARIZQ PARDER
    (108) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (37) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (109) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (110) listarreglo -> . empty
    (98) opcionpow -> . expresion
    (99) opcionpow -> . tipos
    (36) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (113) empty -> .
    (71) tipos -> . I64
    (72) tipos -> . F64
    (73) tipos -> . BOOL
    (74) tipos -> . CHAR
    (75) tipos -> . STRING
    (76) tipos -> . AMP STR
    (77) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    MENOS           shift and go to state 87
    PARIZQ          shift and go to state 90
    ENTERO          shift and go to state 91
    DECIMAL         shift and go to state 92
    FORM            shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    VECM            shift and go to state 96
    ID              shift and go to state 98
    CHARE           shift and go to state 99
    POW             shift and go to state 101
    POWF            shift and go to state 102
    IF              shift and go to state 82
    LOOP            shift and go to state 104
    CORIZQ          reduce using rule 113 (empty -> .)
    MAS             reduce using rule 113 (empty -> .)
    POR             reduce using rule 113 (empty -> .)
    DIVIDIDO        reduce using rule 113 (empty -> .)
    MOD             reduce using rule 113 (empty -> .)
    AS              reduce using rule 113 (empty -> .)
    PT              reduce using rule 113 (empty -> .)
    IGUAL           reduce using rule 113 (empty -> .)
    MENOR           reduce using rule 113 (empty -> .)
    MAYOR           reduce using rule 113 (empty -> .)
    MEIGUAL         reduce using rule 113 (empty -> .)
    MAIGUAL         reduce using rule 113 (empty -> .)
    DIS             reduce using rule 113 (empty -> .)
    LLAVEIZQ        reduce using rule 113 (empty -> .)
    AND             reduce using rule 113 (empty -> .)
    OR              reduce using rule 113 (empty -> .)
    PTCOMA          reduce using rule 113 (empty -> .)
    PARDER          reduce using rule 113 (empty -> .)
    DPT             reduce using rule 113 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 113 (empty -> .) ]

    rel                            shift and go to state 223
    expresion                      shift and go to state 86
    tipos                          shift and go to state 88
    instrif                        shift and go to state 89
    listarreglo                    shift and go to state 97
    opcionpow                      shift and go to state 100
    instrloop                      shift and go to state 103
    empty                          shift and go to state 80

state 173

    (52) rel -> rel MENOR rel .
    (51) rel -> rel . IGUAL IGUAL rel
    (52) rel -> rel . MENOR rel
    (53) rel -> rel . MAYOR rel
    (54) rel -> rel . MEIGUAL rel
    (55) rel -> rel . MAIGUAL rel
    (56) rel -> rel . DIS rel

  ! shift/reduce conflict for IGUAL resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for MEIGUAL resolved as shift
  ! shift/reduce conflict for MAIGUAL resolved as shift
  ! shift/reduce conflict for DIS resolved as shift
    LLAVEIZQ        reduce using rule 52 (rel -> rel MENOR rel .)
    AND             reduce using rule 52 (rel -> rel MENOR rel .)
    OR              reduce using rule 52 (rel -> rel MENOR rel .)
    PTCOMA          reduce using rule 52 (rel -> rel MENOR rel .)
    PARDER          reduce using rule 52 (rel -> rel MENOR rel .)
    IGUAL           shift and go to state 129
    MENOR           shift and go to state 130
    MAYOR           shift and go to state 131
    MEIGUAL         shift and go to state 132
    MAIGUAL         shift and go to state 133
    DIS             shift and go to state 134

  ! IGUAL           [ reduce using rule 52 (rel -> rel MENOR rel .) ]
  ! MENOR           [ reduce using rule 52 (rel -> rel MENOR rel .) ]
  ! MAYOR           [ reduce using rule 52 (rel -> rel MENOR rel .) ]
  ! MEIGUAL         [ reduce using rule 52 (rel -> rel MENOR rel .) ]
  ! MAIGUAL         [ reduce using rule 52 (rel -> rel MENOR rel .) ]
  ! DIS             [ reduce using rule 52 (rel -> rel MENOR rel .) ]


state 174

    (53) rel -> rel MAYOR rel .
    (51) rel -> rel . IGUAL IGUAL rel
    (52) rel -> rel . MENOR rel
    (53) rel -> rel . MAYOR rel
    (54) rel -> rel . MEIGUAL rel
    (55) rel -> rel . MAIGUAL rel
    (56) rel -> rel . DIS rel

  ! shift/reduce conflict for IGUAL resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for MEIGUAL resolved as shift
  ! shift/reduce conflict for MAIGUAL resolved as shift
  ! shift/reduce conflict for DIS resolved as shift
    LLAVEIZQ        reduce using rule 53 (rel -> rel MAYOR rel .)
    AND             reduce using rule 53 (rel -> rel MAYOR rel .)
    OR              reduce using rule 53 (rel -> rel MAYOR rel .)
    PTCOMA          reduce using rule 53 (rel -> rel MAYOR rel .)
    PARDER          reduce using rule 53 (rel -> rel MAYOR rel .)
    IGUAL           shift and go to state 129
    MENOR           shift and go to state 130
    MAYOR           shift and go to state 131
    MEIGUAL         shift and go to state 132
    MAIGUAL         shift and go to state 133
    DIS             shift and go to state 134

  ! IGUAL           [ reduce using rule 53 (rel -> rel MAYOR rel .) ]
  ! MENOR           [ reduce using rule 53 (rel -> rel MAYOR rel .) ]
  ! MAYOR           [ reduce using rule 53 (rel -> rel MAYOR rel .) ]
  ! MEIGUAL         [ reduce using rule 53 (rel -> rel MAYOR rel .) ]
  ! MAIGUAL         [ reduce using rule 53 (rel -> rel MAYOR rel .) ]
  ! DIS             [ reduce using rule 53 (rel -> rel MAYOR rel .) ]


state 175

    (54) rel -> rel MEIGUAL rel .
    (51) rel -> rel . IGUAL IGUAL rel
    (52) rel -> rel . MENOR rel
    (53) rel -> rel . MAYOR rel
    (54) rel -> rel . MEIGUAL rel
    (55) rel -> rel . MAIGUAL rel
    (56) rel -> rel . DIS rel

  ! shift/reduce conflict for IGUAL resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for MEIGUAL resolved as shift
  ! shift/reduce conflict for MAIGUAL resolved as shift
  ! shift/reduce conflict for DIS resolved as shift
    LLAVEIZQ        reduce using rule 54 (rel -> rel MEIGUAL rel .)
    AND             reduce using rule 54 (rel -> rel MEIGUAL rel .)
    OR              reduce using rule 54 (rel -> rel MEIGUAL rel .)
    PTCOMA          reduce using rule 54 (rel -> rel MEIGUAL rel .)
    PARDER          reduce using rule 54 (rel -> rel MEIGUAL rel .)
    IGUAL           shift and go to state 129
    MENOR           shift and go to state 130
    MAYOR           shift and go to state 131
    MEIGUAL         shift and go to state 132
    MAIGUAL         shift and go to state 133
    DIS             shift and go to state 134

  ! IGUAL           [ reduce using rule 54 (rel -> rel MEIGUAL rel .) ]
  ! MENOR           [ reduce using rule 54 (rel -> rel MEIGUAL rel .) ]
  ! MAYOR           [ reduce using rule 54 (rel -> rel MEIGUAL rel .) ]
  ! MEIGUAL         [ reduce using rule 54 (rel -> rel MEIGUAL rel .) ]
  ! MAIGUAL         [ reduce using rule 54 (rel -> rel MEIGUAL rel .) ]
  ! DIS             [ reduce using rule 54 (rel -> rel MEIGUAL rel .) ]


state 176

    (55) rel -> rel MAIGUAL rel .
    (51) rel -> rel . IGUAL IGUAL rel
    (52) rel -> rel . MENOR rel
    (53) rel -> rel . MAYOR rel
    (54) rel -> rel . MEIGUAL rel
    (55) rel -> rel . MAIGUAL rel
    (56) rel -> rel . DIS rel

  ! shift/reduce conflict for IGUAL resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for MEIGUAL resolved as shift
  ! shift/reduce conflict for MAIGUAL resolved as shift
  ! shift/reduce conflict for DIS resolved as shift
    LLAVEIZQ        reduce using rule 55 (rel -> rel MAIGUAL rel .)
    AND             reduce using rule 55 (rel -> rel MAIGUAL rel .)
    OR              reduce using rule 55 (rel -> rel MAIGUAL rel .)
    PTCOMA          reduce using rule 55 (rel -> rel MAIGUAL rel .)
    PARDER          reduce using rule 55 (rel -> rel MAIGUAL rel .)
    IGUAL           shift and go to state 129
    MENOR           shift and go to state 130
    MAYOR           shift and go to state 131
    MEIGUAL         shift and go to state 132
    MAIGUAL         shift and go to state 133
    DIS             shift and go to state 134

  ! IGUAL           [ reduce using rule 55 (rel -> rel MAIGUAL rel .) ]
  ! MENOR           [ reduce using rule 55 (rel -> rel MAIGUAL rel .) ]
  ! MAYOR           [ reduce using rule 55 (rel -> rel MAIGUAL rel .) ]
  ! MEIGUAL         [ reduce using rule 55 (rel -> rel MAIGUAL rel .) ]
  ! MAIGUAL         [ reduce using rule 55 (rel -> rel MAIGUAL rel .) ]
  ! DIS             [ reduce using rule 55 (rel -> rel MAIGUAL rel .) ]


state 177

    (56) rel -> rel DIS rel .
    (51) rel -> rel . IGUAL IGUAL rel
    (52) rel -> rel . MENOR rel
    (53) rel -> rel . MAYOR rel
    (54) rel -> rel . MEIGUAL rel
    (55) rel -> rel . MAIGUAL rel
    (56) rel -> rel . DIS rel

  ! shift/reduce conflict for IGUAL resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for MEIGUAL resolved as shift
  ! shift/reduce conflict for MAIGUAL resolved as shift
  ! shift/reduce conflict for DIS resolved as shift
    LLAVEIZQ        reduce using rule 56 (rel -> rel DIS rel .)
    AND             reduce using rule 56 (rel -> rel DIS rel .)
    OR              reduce using rule 56 (rel -> rel DIS rel .)
    PTCOMA          reduce using rule 56 (rel -> rel DIS rel .)
    PARDER          reduce using rule 56 (rel -> rel DIS rel .)
    IGUAL           shift and go to state 129
    MENOR           shift and go to state 130
    MAYOR           shift and go to state 131
    MEIGUAL         shift and go to state 132
    MAIGUAL         shift and go to state 133
    DIS             shift and go to state 134

  ! IGUAL           [ reduce using rule 56 (rel -> rel DIS rel .) ]
  ! MENOR           [ reduce using rule 56 (rel -> rel DIS rel .) ]
  ! MAYOR           [ reduce using rule 56 (rel -> rel DIS rel .) ]
  ! MEIGUAL         [ reduce using rule 56 (rel -> rel DIS rel .) ]
  ! MAIGUAL         [ reduce using rule 56 (rel -> rel DIS rel .) ]
  ! DIS             [ reduce using rule 56 (rel -> rel DIS rel .) ]


state 178

    (78) expresion -> expresion MAS expresion .
    (78) expresion -> expresion . MAS expresion
    (79) expresion -> expresion . MENOS expresion
    (80) expresion -> expresion . POR expresion
    (81) expresion -> expresion . DIVIDIDO expresion
    (82) expresion -> expresion . MOD expresion
    (83) expresion -> expresion . AS tipos
    (103) expresion -> expresion . PT TOSTRING PARIZQ PARDER
    (104) expresion -> expresion . PT SQRT PARIZQ PARDER
    (105) expresion -> expresion . PT ABS PARIZQ PARDER
    (106) expresion -> expresion . PT CLONE PARIZQ PARDER
    (107) expresion -> expresion . PT LEN PARIZQ PARDER
    (108) expresion -> expresion . PT TOOWNED PARIZQ PARDER
    (98) opcionpow -> expresion .

  ! reduce/reduce conflict for DPT resolved using rule 78 (expresion -> expresion MAS expresion .)
    MAS             reduce using rule 78 (expresion -> expresion MAS expresion .)
    MENOS           reduce using rule 78 (expresion -> expresion MAS expresion .)
    AS              reduce using rule 78 (expresion -> expresion MAS expresion .)
    PT              reduce using rule 78 (expresion -> expresion MAS expresion .)
    IGUAL           reduce using rule 78 (expresion -> expresion MAS expresion .)
    MENOR           reduce using rule 78 (expresion -> expresion MAS expresion .)
    MAYOR           reduce using rule 78 (expresion -> expresion MAS expresion .)
    MEIGUAL         reduce using rule 78 (expresion -> expresion MAS expresion .)
    MAIGUAL         reduce using rule 78 (expresion -> expresion MAS expresion .)
    DIS             reduce using rule 78 (expresion -> expresion MAS expresion .)
    LLAVEIZQ        reduce using rule 78 (expresion -> expresion MAS expresion .)
    AND             reduce using rule 78 (expresion -> expresion MAS expresion .)
    OR              reduce using rule 78 (expresion -> expresion MAS expresion .)
    DPT             reduce using rule 78 (expresion -> expresion MAS expresion .)
    PTCOMA          reduce using rule 78 (expresion -> expresion MAS expresion .)
    PARDER          reduce using rule 78 (expresion -> expresion MAS expresion .)
    COMA            reduce using rule 78 (expresion -> expresion MAS expresion .)
    CORDER          reduce using rule 78 (expresion -> expresion MAS expresion .)
    LLAVEDER        reduce using rule 78 (expresion -> expresion MAS expresion .)
    POR             shift and go to state 137
    DIVIDIDO        shift and go to state 138
    MOD             shift and go to state 139

  ! POR             [ reduce using rule 78 (expresion -> expresion MAS expresion .) ]
  ! DIVIDIDO        [ reduce using rule 78 (expresion -> expresion MAS expresion .) ]
  ! MOD             [ reduce using rule 78 (expresion -> expresion MAS expresion .) ]
  ! MAS             [ shift and go to state 135 ]
  ! MENOS           [ shift and go to state 136 ]
  ! AS              [ shift and go to state 140 ]
  ! PT              [ shift and go to state 141 ]
  ! DPT             [ reduce using rule 98 (opcionpow -> expresion .) ]


state 179

    (79) expresion -> expresion MENOS expresion .
    (78) expresion -> expresion . MAS expresion
    (79) expresion -> expresion . MENOS expresion
    (80) expresion -> expresion . POR expresion
    (81) expresion -> expresion . DIVIDIDO expresion
    (82) expresion -> expresion . MOD expresion
    (83) expresion -> expresion . AS tipos
    (103) expresion -> expresion . PT TOSTRING PARIZQ PARDER
    (104) expresion -> expresion . PT SQRT PARIZQ PARDER
    (105) expresion -> expresion . PT ABS PARIZQ PARDER
    (106) expresion -> expresion . PT CLONE PARIZQ PARDER
    (107) expresion -> expresion . PT LEN PARIZQ PARDER
    (108) expresion -> expresion . PT TOOWNED PARIZQ PARDER
    (98) opcionpow -> expresion .

  ! reduce/reduce conflict for DPT resolved using rule 79 (expresion -> expresion MENOS expresion .)
    MAS             reduce using rule 79 (expresion -> expresion MENOS expresion .)
    MENOS           reduce using rule 79 (expresion -> expresion MENOS expresion .)
    AS              reduce using rule 79 (expresion -> expresion MENOS expresion .)
    PT              reduce using rule 79 (expresion -> expresion MENOS expresion .)
    IGUAL           reduce using rule 79 (expresion -> expresion MENOS expresion .)
    MENOR           reduce using rule 79 (expresion -> expresion MENOS expresion .)
    MAYOR           reduce using rule 79 (expresion -> expresion MENOS expresion .)
    MEIGUAL         reduce using rule 79 (expresion -> expresion MENOS expresion .)
    MAIGUAL         reduce using rule 79 (expresion -> expresion MENOS expresion .)
    DIS             reduce using rule 79 (expresion -> expresion MENOS expresion .)
    LLAVEIZQ        reduce using rule 79 (expresion -> expresion MENOS expresion .)
    AND             reduce using rule 79 (expresion -> expresion MENOS expresion .)
    OR              reduce using rule 79 (expresion -> expresion MENOS expresion .)
    DPT             reduce using rule 79 (expresion -> expresion MENOS expresion .)
    PTCOMA          reduce using rule 79 (expresion -> expresion MENOS expresion .)
    PARDER          reduce using rule 79 (expresion -> expresion MENOS expresion .)
    COMA            reduce using rule 79 (expresion -> expresion MENOS expresion .)
    CORDER          reduce using rule 79 (expresion -> expresion MENOS expresion .)
    LLAVEDER        reduce using rule 79 (expresion -> expresion MENOS expresion .)
    POR             shift and go to state 137
    DIVIDIDO        shift and go to state 138
    MOD             shift and go to state 139

  ! POR             [ reduce using rule 79 (expresion -> expresion MENOS expresion .) ]
  ! DIVIDIDO        [ reduce using rule 79 (expresion -> expresion MENOS expresion .) ]
  ! MOD             [ reduce using rule 79 (expresion -> expresion MENOS expresion .) ]
  ! MAS             [ shift and go to state 135 ]
  ! MENOS           [ shift and go to state 136 ]
  ! AS              [ shift and go to state 140 ]
  ! PT              [ shift and go to state 141 ]
  ! DPT             [ reduce using rule 98 (opcionpow -> expresion .) ]


state 180

    (80) expresion -> expresion POR expresion .
    (78) expresion -> expresion . MAS expresion
    (79) expresion -> expresion . MENOS expresion
    (80) expresion -> expresion . POR expresion
    (81) expresion -> expresion . DIVIDIDO expresion
    (82) expresion -> expresion . MOD expresion
    (83) expresion -> expresion . AS tipos
    (103) expresion -> expresion . PT TOSTRING PARIZQ PARDER
    (104) expresion -> expresion . PT SQRT PARIZQ PARDER
    (105) expresion -> expresion . PT ABS PARIZQ PARDER
    (106) expresion -> expresion . PT CLONE PARIZQ PARDER
    (107) expresion -> expresion . PT LEN PARIZQ PARDER
    (108) expresion -> expresion . PT TOOWNED PARIZQ PARDER
    (98) opcionpow -> expresion .

  ! reduce/reduce conflict for DPT resolved using rule 80 (expresion -> expresion POR expresion .)
    MAS             reduce using rule 80 (expresion -> expresion POR expresion .)
    MENOS           reduce using rule 80 (expresion -> expresion POR expresion .)
    POR             reduce using rule 80 (expresion -> expresion POR expresion .)
    DIVIDIDO        reduce using rule 80 (expresion -> expresion POR expresion .)
    MOD             reduce using rule 80 (expresion -> expresion POR expresion .)
    AS              reduce using rule 80 (expresion -> expresion POR expresion .)
    PT              reduce using rule 80 (expresion -> expresion POR expresion .)
    IGUAL           reduce using rule 80 (expresion -> expresion POR expresion .)
    MENOR           reduce using rule 80 (expresion -> expresion POR expresion .)
    MAYOR           reduce using rule 80 (expresion -> expresion POR expresion .)
    MEIGUAL         reduce using rule 80 (expresion -> expresion POR expresion .)
    MAIGUAL         reduce using rule 80 (expresion -> expresion POR expresion .)
    DIS             reduce using rule 80 (expresion -> expresion POR expresion .)
    LLAVEIZQ        reduce using rule 80 (expresion -> expresion POR expresion .)
    AND             reduce using rule 80 (expresion -> expresion POR expresion .)
    OR              reduce using rule 80 (expresion -> expresion POR expresion .)
    DPT             reduce using rule 80 (expresion -> expresion POR expresion .)
    PTCOMA          reduce using rule 80 (expresion -> expresion POR expresion .)
    PARDER          reduce using rule 80 (expresion -> expresion POR expresion .)
    COMA            reduce using rule 80 (expresion -> expresion POR expresion .)
    CORDER          reduce using rule 80 (expresion -> expresion POR expresion .)
    LLAVEDER        reduce using rule 80 (expresion -> expresion POR expresion .)

  ! MAS             [ shift and go to state 135 ]
  ! MENOS           [ shift and go to state 136 ]
  ! POR             [ shift and go to state 137 ]
  ! DIVIDIDO        [ shift and go to state 138 ]
  ! MOD             [ shift and go to state 139 ]
  ! AS              [ shift and go to state 140 ]
  ! PT              [ shift and go to state 141 ]
  ! DPT             [ reduce using rule 98 (opcionpow -> expresion .) ]


state 181

    (81) expresion -> expresion DIVIDIDO expresion .
    (78) expresion -> expresion . MAS expresion
    (79) expresion -> expresion . MENOS expresion
    (80) expresion -> expresion . POR expresion
    (81) expresion -> expresion . DIVIDIDO expresion
    (82) expresion -> expresion . MOD expresion
    (83) expresion -> expresion . AS tipos
    (103) expresion -> expresion . PT TOSTRING PARIZQ PARDER
    (104) expresion -> expresion . PT SQRT PARIZQ PARDER
    (105) expresion -> expresion . PT ABS PARIZQ PARDER
    (106) expresion -> expresion . PT CLONE PARIZQ PARDER
    (107) expresion -> expresion . PT LEN PARIZQ PARDER
    (108) expresion -> expresion . PT TOOWNED PARIZQ PARDER
    (98) opcionpow -> expresion .

  ! reduce/reduce conflict for DPT resolved using rule 81 (expresion -> expresion DIVIDIDO expresion .)
    MAS             reduce using rule 81 (expresion -> expresion DIVIDIDO expresion .)
    MENOS           reduce using rule 81 (expresion -> expresion DIVIDIDO expresion .)
    POR             reduce using rule 81 (expresion -> expresion DIVIDIDO expresion .)
    DIVIDIDO        reduce using rule 81 (expresion -> expresion DIVIDIDO expresion .)
    MOD             reduce using rule 81 (expresion -> expresion DIVIDIDO expresion .)
    AS              reduce using rule 81 (expresion -> expresion DIVIDIDO expresion .)
    PT              reduce using rule 81 (expresion -> expresion DIVIDIDO expresion .)
    IGUAL           reduce using rule 81 (expresion -> expresion DIVIDIDO expresion .)
    MENOR           reduce using rule 81 (expresion -> expresion DIVIDIDO expresion .)
    MAYOR           reduce using rule 81 (expresion -> expresion DIVIDIDO expresion .)
    MEIGUAL         reduce using rule 81 (expresion -> expresion DIVIDIDO expresion .)
    MAIGUAL         reduce using rule 81 (expresion -> expresion DIVIDIDO expresion .)
    DIS             reduce using rule 81 (expresion -> expresion DIVIDIDO expresion .)
    LLAVEIZQ        reduce using rule 81 (expresion -> expresion DIVIDIDO expresion .)
    AND             reduce using rule 81 (expresion -> expresion DIVIDIDO expresion .)
    OR              reduce using rule 81 (expresion -> expresion DIVIDIDO expresion .)
    DPT             reduce using rule 81 (expresion -> expresion DIVIDIDO expresion .)
    PTCOMA          reduce using rule 81 (expresion -> expresion DIVIDIDO expresion .)
    PARDER          reduce using rule 81 (expresion -> expresion DIVIDIDO expresion .)
    COMA            reduce using rule 81 (expresion -> expresion DIVIDIDO expresion .)
    CORDER          reduce using rule 81 (expresion -> expresion DIVIDIDO expresion .)
    LLAVEDER        reduce using rule 81 (expresion -> expresion DIVIDIDO expresion .)

  ! MAS             [ shift and go to state 135 ]
  ! MENOS           [ shift and go to state 136 ]
  ! POR             [ shift and go to state 137 ]
  ! DIVIDIDO        [ shift and go to state 138 ]
  ! MOD             [ shift and go to state 139 ]
  ! AS              [ shift and go to state 140 ]
  ! PT              [ shift and go to state 141 ]
  ! DPT             [ reduce using rule 98 (opcionpow -> expresion .) ]


state 182

    (82) expresion -> expresion MOD expresion .
    (78) expresion -> expresion . MAS expresion
    (79) expresion -> expresion . MENOS expresion
    (80) expresion -> expresion . POR expresion
    (81) expresion -> expresion . DIVIDIDO expresion
    (82) expresion -> expresion . MOD expresion
    (83) expresion -> expresion . AS tipos
    (103) expresion -> expresion . PT TOSTRING PARIZQ PARDER
    (104) expresion -> expresion . PT SQRT PARIZQ PARDER
    (105) expresion -> expresion . PT ABS PARIZQ PARDER
    (106) expresion -> expresion . PT CLONE PARIZQ PARDER
    (107) expresion -> expresion . PT LEN PARIZQ PARDER
    (108) expresion -> expresion . PT TOOWNED PARIZQ PARDER
    (98) opcionpow -> expresion .

  ! reduce/reduce conflict for DPT resolved using rule 82 (expresion -> expresion MOD expresion .)
    MAS             reduce using rule 82 (expresion -> expresion MOD expresion .)
    MENOS           reduce using rule 82 (expresion -> expresion MOD expresion .)
    POR             reduce using rule 82 (expresion -> expresion MOD expresion .)
    DIVIDIDO        reduce using rule 82 (expresion -> expresion MOD expresion .)
    MOD             reduce using rule 82 (expresion -> expresion MOD expresion .)
    AS              reduce using rule 82 (expresion -> expresion MOD expresion .)
    PT              reduce using rule 82 (expresion -> expresion MOD expresion .)
    IGUAL           reduce using rule 82 (expresion -> expresion MOD expresion .)
    MENOR           reduce using rule 82 (expresion -> expresion MOD expresion .)
    MAYOR           reduce using rule 82 (expresion -> expresion MOD expresion .)
    MEIGUAL         reduce using rule 82 (expresion -> expresion MOD expresion .)
    MAIGUAL         reduce using rule 82 (expresion -> expresion MOD expresion .)
    DIS             reduce using rule 82 (expresion -> expresion MOD expresion .)
    LLAVEIZQ        reduce using rule 82 (expresion -> expresion MOD expresion .)
    AND             reduce using rule 82 (expresion -> expresion MOD expresion .)
    OR              reduce using rule 82 (expresion -> expresion MOD expresion .)
    DPT             reduce using rule 82 (expresion -> expresion MOD expresion .)
    PTCOMA          reduce using rule 82 (expresion -> expresion MOD expresion .)
    PARDER          reduce using rule 82 (expresion -> expresion MOD expresion .)
    COMA            reduce using rule 82 (expresion -> expresion MOD expresion .)
    CORDER          reduce using rule 82 (expresion -> expresion MOD expresion .)
    LLAVEDER        reduce using rule 82 (expresion -> expresion MOD expresion .)

  ! MAS             [ shift and go to state 135 ]
  ! MENOS           [ shift and go to state 136 ]
  ! POR             [ shift and go to state 137 ]
  ! DIVIDIDO        [ shift and go to state 138 ]
  ! MOD             [ shift and go to state 139 ]
  ! AS              [ shift and go to state 140 ]
  ! PT              [ shift and go to state 141 ]
  ! DPT             [ reduce using rule 98 (opcionpow -> expresion .) ]


state 183

    (83) expresion -> expresion AS tipos .

    MAS             reduce using rule 83 (expresion -> expresion AS tipos .)
    MENOS           reduce using rule 83 (expresion -> expresion AS tipos .)
    POR             reduce using rule 83 (expresion -> expresion AS tipos .)
    DIVIDIDO        reduce using rule 83 (expresion -> expresion AS tipos .)
    MOD             reduce using rule 83 (expresion -> expresion AS tipos .)
    AS              reduce using rule 83 (expresion -> expresion AS tipos .)
    PT              reduce using rule 83 (expresion -> expresion AS tipos .)
    IGUAL           reduce using rule 83 (expresion -> expresion AS tipos .)
    MENOR           reduce using rule 83 (expresion -> expresion AS tipos .)
    MAYOR           reduce using rule 83 (expresion -> expresion AS tipos .)
    MEIGUAL         reduce using rule 83 (expresion -> expresion AS tipos .)
    MAIGUAL         reduce using rule 83 (expresion -> expresion AS tipos .)
    DIS             reduce using rule 83 (expresion -> expresion AS tipos .)
    LLAVEIZQ        reduce using rule 83 (expresion -> expresion AS tipos .)
    AND             reduce using rule 83 (expresion -> expresion AS tipos .)
    OR              reduce using rule 83 (expresion -> expresion AS tipos .)
    DPT             reduce using rule 83 (expresion -> expresion AS tipos .)
    PTCOMA          reduce using rule 83 (expresion -> expresion AS tipos .)
    PARDER          reduce using rule 83 (expresion -> expresion AS tipos .)
    COMA            reduce using rule 83 (expresion -> expresion AS tipos .)
    CORDER          reduce using rule 83 (expresion -> expresion AS tipos .)
    LLAVEDER        reduce using rule 83 (expresion -> expresion AS tipos .)


state 184

    (103) expresion -> expresion PT TOSTRING . PARIZQ PARDER

    PARIZQ          shift and go to state 224


state 185

    (104) expresion -> expresion PT SQRT . PARIZQ PARDER

    PARIZQ          shift and go to state 225


state 186

    (105) expresion -> expresion PT ABS . PARIZQ PARDER

    PARIZQ          shift and go to state 226


state 187

    (106) expresion -> expresion PT CLONE . PARIZQ PARDER

    PARIZQ          shift and go to state 227


state 188

    (107) expresion -> expresion PT LEN . PARIZQ PARDER

    PARIZQ          shift and go to state 228


state 189

    (108) expresion -> expresion PT TOOWNED . PARIZQ PARDER

    PARIZQ          shift and go to state 229


state 190

    (86) expresion -> PARIZQ logica PARDER .

    MAS             reduce using rule 86 (expresion -> PARIZQ logica PARDER .)
    MENOS           reduce using rule 86 (expresion -> PARIZQ logica PARDER .)
    POR             reduce using rule 86 (expresion -> PARIZQ logica PARDER .)
    DIVIDIDO        reduce using rule 86 (expresion -> PARIZQ logica PARDER .)
    MOD             reduce using rule 86 (expresion -> PARIZQ logica PARDER .)
    AS              reduce using rule 86 (expresion -> PARIZQ logica PARDER .)
    PT              reduce using rule 86 (expresion -> PARIZQ logica PARDER .)
    IGUAL           reduce using rule 86 (expresion -> PARIZQ logica PARDER .)
    MENOR           reduce using rule 86 (expresion -> PARIZQ logica PARDER .)
    MAYOR           reduce using rule 86 (expresion -> PARIZQ logica PARDER .)
    MEIGUAL         reduce using rule 86 (expresion -> PARIZQ logica PARDER .)
    MAIGUAL         reduce using rule 86 (expresion -> PARIZQ logica PARDER .)
    DIS             reduce using rule 86 (expresion -> PARIZQ logica PARDER .)
    LLAVEIZQ        reduce using rule 86 (expresion -> PARIZQ logica PARDER .)
    AND             reduce using rule 86 (expresion -> PARIZQ logica PARDER .)
    OR              reduce using rule 86 (expresion -> PARIZQ logica PARDER .)
    DPT             reduce using rule 86 (expresion -> PARIZQ logica PARDER .)
    PTCOMA          reduce using rule 86 (expresion -> PARIZQ logica PARDER .)
    PARDER          reduce using rule 86 (expresion -> PARIZQ logica PARDER .)
    COMA            reduce using rule 86 (expresion -> PARIZQ logica PARDER .)
    CORDER          reduce using rule 86 (expresion -> PARIZQ logica PARDER .)
    LLAVEDER        reduce using rule 86 (expresion -> PARIZQ logica PARDER .)


state 191

    (92) expresion -> VECM NOT listarreglo .
    (109) listarreglo -> listarreglo . CORIZQ listexpr CORDER

    MAS             reduce using rule 92 (expresion -> VECM NOT listarreglo .)
    MENOS           reduce using rule 92 (expresion -> VECM NOT listarreglo .)
    POR             reduce using rule 92 (expresion -> VECM NOT listarreglo .)
    DIVIDIDO        reduce using rule 92 (expresion -> VECM NOT listarreglo .)
    MOD             reduce using rule 92 (expresion -> VECM NOT listarreglo .)
    AS              reduce using rule 92 (expresion -> VECM NOT listarreglo .)
    PT              reduce using rule 92 (expresion -> VECM NOT listarreglo .)
    IGUAL           reduce using rule 92 (expresion -> VECM NOT listarreglo .)
    MENOR           reduce using rule 92 (expresion -> VECM NOT listarreglo .)
    MAYOR           reduce using rule 92 (expresion -> VECM NOT listarreglo .)
    MEIGUAL         reduce using rule 92 (expresion -> VECM NOT listarreglo .)
    MAIGUAL         reduce using rule 92 (expresion -> VECM NOT listarreglo .)
    DIS             reduce using rule 92 (expresion -> VECM NOT listarreglo .)
    LLAVEIZQ        reduce using rule 92 (expresion -> VECM NOT listarreglo .)
    AND             reduce using rule 92 (expresion -> VECM NOT listarreglo .)
    OR              reduce using rule 92 (expresion -> VECM NOT listarreglo .)
    DPT             reduce using rule 92 (expresion -> VECM NOT listarreglo .)
    PTCOMA          reduce using rule 92 (expresion -> VECM NOT listarreglo .)
    PARDER          reduce using rule 92 (expresion -> VECM NOT listarreglo .)
    COMA            reduce using rule 92 (expresion -> VECM NOT listarreglo .)
    CORDER          reduce using rule 92 (expresion -> VECM NOT listarreglo .)
    LLAVEDER        reduce using rule 92 (expresion -> VECM NOT listarreglo .)
    CORIZQ          shift and go to state 120


state 192

    (94) expresion -> ID PARIZQ listexpr . PARDER
    (111) listexpr -> listexpr . COMA expresion

    PARDER          shift and go to state 230
    COMA            shift and go to state 166


state 193

    (97) expresion -> opcionpow DPT DPT . expresion
    (78) expresion -> . expresion MAS expresion
    (79) expresion -> . expresion MENOS expresion
    (80) expresion -> . expresion POR expresion
    (81) expresion -> . expresion DIVIDIDO expresion
    (82) expresion -> . expresion MOD expresion
    (83) expresion -> . expresion AS tipos
    (84) expresion -> . instrif
    (85) expresion -> . MENOS expresion
    (86) expresion -> . PARIZQ logica PARDER
    (87) expresion -> . ENTERO
    (88) expresion -> . DECIMAL
    (89) expresion -> . FORM
    (90) expresion -> . TRUE
    (91) expresion -> . FALSE
    (92) expresion -> . VECM NOT listarreglo
    (93) expresion -> . ID listarreglo
    (94) expresion -> . ID PARIZQ listexpr PARDER
    (95) expresion -> . listarreglo
    (96) expresion -> . CHARE
    (97) expresion -> . opcionpow DPT DPT expresion
    (100) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (101) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (102) expresion -> . instrloop
    (103) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (104) expresion -> . expresion PT SQRT PARIZQ PARDER
    (105) expresion -> . expresion PT ABS PARIZQ PARDER
    (106) expresion -> . expresion PT CLONE PARIZQ PARDER
    (107) expresion -> . expresion PT LEN PARIZQ PARDER
    (108) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (37) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (109) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (110) listarreglo -> . empty
    (98) opcionpow -> . expresion
    (99) opcionpow -> . tipos
    (36) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (113) empty -> .
    (71) tipos -> . I64
    (72) tipos -> . F64
    (73) tipos -> . BOOL
    (74) tipos -> . CHAR
    (75) tipos -> . STRING
    (76) tipos -> . AMP STR
    (77) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    MENOS           shift and go to state 87
    PARIZQ          shift and go to state 90
    ENTERO          shift and go to state 91
    DECIMAL         shift and go to state 92
    FORM            shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    VECM            shift and go to state 96
    ID              shift and go to state 98
    CHARE           shift and go to state 99
    POW             shift and go to state 101
    POWF            shift and go to state 102
    IF              shift and go to state 82
    LOOP            shift and go to state 104
    CORIZQ          reduce using rule 113 (empty -> .)
    MAS             reduce using rule 113 (empty -> .)
    POR             reduce using rule 113 (empty -> .)
    DIVIDIDO        reduce using rule 113 (empty -> .)
    MOD             reduce using rule 113 (empty -> .)
    AS              reduce using rule 113 (empty -> .)
    PT              reduce using rule 113 (empty -> .)
    IGUAL           reduce using rule 113 (empty -> .)
    MENOR           reduce using rule 113 (empty -> .)
    MAYOR           reduce using rule 113 (empty -> .)
    MEIGUAL         reduce using rule 113 (empty -> .)
    MAIGUAL         reduce using rule 113 (empty -> .)
    DIS             reduce using rule 113 (empty -> .)
    LLAVEIZQ        reduce using rule 113 (empty -> .)
    AND             reduce using rule 113 (empty -> .)
    OR              reduce using rule 113 (empty -> .)
    DPT             reduce using rule 113 (empty -> .)
    PTCOMA          reduce using rule 113 (empty -> .)
    PARDER          reduce using rule 113 (empty -> .)
    COMA            reduce using rule 113 (empty -> .)
    CORDER          reduce using rule 113 (empty -> .)
    LLAVEDER        reduce using rule 113 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 113 (empty -> .) ]

    opcionpow                      shift and go to state 100
    expresion                      shift and go to state 231
    tipos                          shift and go to state 88
    instrif                        shift and go to state 89
    listarreglo                    shift and go to state 97
    instrloop                      shift and go to state 103
    empty                          shift and go to state 80

state 194

    (100) expresion -> POW PARIZQ ENTERO . COMA ENTERO PARDER

    COMA            shift and go to state 232


state 195

    (101) expresion -> POWF PARIZQ DECIMAL . COMA DECIMAL PARDER

    COMA            shift and go to state 233


state 196

    (36) instrloop -> LOOP LLAVEIZQ instrucciones . LLAVEDER

    LLAVEDER        shift and go to state 234


state 197

    (24) instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .

    LET             reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    ID              reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    PRINT           reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    IF              reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    LOOP            reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    RETURN          reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    WHILE           reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    FOR             reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    BREAK           reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    CONTINUE        reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    LLAVEDER        reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)


state 198

    (26) instruccion -> WHILE logica LLAVEIZQ instrucciones . LLAVEDER

    LLAVEDER        shift and go to state 235


state 199

    (27) instruccion -> FOR ID IN opcionfor . LLAVEIZQ instrucciones LLAVEDER

    LLAVEIZQ        shift and go to state 236


state 200

    (41) opcionfor -> logica .
    (47) logica -> logica . AND logica
    (48) logica -> logica . OR logica

    LLAVEIZQ        reduce using rule 41 (opcionfor -> logica .)
    AND             shift and go to state 126
    OR              shift and go to state 127


state 201

    (42) opcionfor -> ENTERO . PT PT logica
    (87) expresion -> ENTERO .

  ! shift/reduce conflict for PT resolved as shift
    PT              shift and go to state 237
    MAS             reduce using rule 87 (expresion -> ENTERO .)
    MENOS           reduce using rule 87 (expresion -> ENTERO .)
    POR             reduce using rule 87 (expresion -> ENTERO .)
    DIVIDIDO        reduce using rule 87 (expresion -> ENTERO .)
    MOD             reduce using rule 87 (expresion -> ENTERO .)
    AS              reduce using rule 87 (expresion -> ENTERO .)
    IGUAL           reduce using rule 87 (expresion -> ENTERO .)
    MENOR           reduce using rule 87 (expresion -> ENTERO .)
    MAYOR           reduce using rule 87 (expresion -> ENTERO .)
    MEIGUAL         reduce using rule 87 (expresion -> ENTERO .)
    MAIGUAL         reduce using rule 87 (expresion -> ENTERO .)
    DIS             reduce using rule 87 (expresion -> ENTERO .)
    AND             reduce using rule 87 (expresion -> ENTERO .)
    OR              reduce using rule 87 (expresion -> ENTERO .)
    LLAVEIZQ        reduce using rule 87 (expresion -> ENTERO .)
    DPT             reduce using rule 87 (expresion -> ENTERO .)

  ! PT              [ reduce using rule 87 (expresion -> ENTERO .) ]


state 202

    (43) opcionfor -> empty .
    (110) listarreglo -> empty .

  ! reduce/reduce conflict for LLAVEIZQ resolved using rule 43 (opcionfor -> empty .)
    LLAVEIZQ        reduce using rule 43 (opcionfor -> empty .)
    CORIZQ          reduce using rule 110 (listarreglo -> empty .)
    MAS             reduce using rule 110 (listarreglo -> empty .)
    MENOS           reduce using rule 110 (listarreglo -> empty .)
    POR             reduce using rule 110 (listarreglo -> empty .)
    DIVIDIDO        reduce using rule 110 (listarreglo -> empty .)
    MOD             reduce using rule 110 (listarreglo -> empty .)
    AS              reduce using rule 110 (listarreglo -> empty .)
    PT              reduce using rule 110 (listarreglo -> empty .)
    IGUAL           reduce using rule 110 (listarreglo -> empty .)
    MENOR           reduce using rule 110 (listarreglo -> empty .)
    MAYOR           reduce using rule 110 (listarreglo -> empty .)
    MEIGUAL         reduce using rule 110 (listarreglo -> empty .)
    MAIGUAL         reduce using rule 110 (listarreglo -> empty .)
    DIS             reduce using rule 110 (listarreglo -> empty .)
    AND             reduce using rule 110 (listarreglo -> empty .)
    OR              reduce using rule 110 (listarreglo -> empty .)
    DPT             reduce using rule 110 (listarreglo -> empty .)

  ! LLAVEIZQ        [ reduce using rule 110 (listarreglo -> empty .) ]


state 203

    (3) funcion -> PUB FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER .

    PUB             reduce using rule 3 (funcion -> PUB FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER .)
    FN              reduce using rule 3 (funcion -> PUB FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER .)
    MODF            reduce using rule 3 (funcion -> PUB FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER .)
    STRUCT          reduce using rule 3 (funcion -> PUB FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER .)
    $end            reduce using rule 3 (funcion -> PUB FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER .)
    LLAVEDER        reduce using rule 3 (funcion -> PUB FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER .)


state 204

    (70) arreglos -> ID .

    IGUAL           reduce using rule 70 (arreglos -> ID .)
    PTCOMA          reduce using rule 70 (arreglos -> ID .)


state 205

    (19) instruccion -> LET mutable ID pyc arrtipos . IGUAL logica PTCOMA

    IGUAL           shift and go to state 238


state 206

    (62) arrtipos -> tipos .
    (69) arreglos -> tipos .

  ! reduce/reduce conflict for IGUAL resolved using rule 62 (arrtipos -> tipos .)
    IGUAL           reduce using rule 62 (arrtipos -> tipos .)

  ! IGUAL           [ reduce using rule 69 (arreglos -> tipos .) ]


state 207

    (63) arrtipos -> arreglos .

    IGUAL           reduce using rule 63 (arrtipos -> arreglos .)


state 208

    (64) arrtipos -> empty .

    IGUAL           reduce using rule 64 (arrtipos -> empty .)


state 209

    (68) arreglos -> CORIZQ . arreglos PTCOMA ENTERO CORDER
    (68) arreglos -> . CORIZQ arreglos PTCOMA ENTERO CORDER
    (69) arreglos -> . tipos
    (70) arreglos -> . ID
    (71) tipos -> . I64
    (72) tipos -> . F64
    (73) tipos -> . BOOL
    (74) tipos -> . CHAR
    (75) tipos -> . STRING
    (76) tipos -> . AMP STR
    (77) tipos -> . USIZE

    CORIZQ          shift and go to state 209
    ID              shift and go to state 204
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

    arreglos                       shift and go to state 239
    tipos                          shift and go to state 240

state 210

    (20) instruccion -> ID listarreglo IGUAL logica PTCOMA .

    LET             reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    ID              reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    PRINT           reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    IF              reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    LOOP            reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    RETURN          reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    WHILE           reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    FOR             reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    BREAK           reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    CONTINUE        reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    LLAVEDER        reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    MENOS           reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    PARIZQ          reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    ENTERO          reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    DECIMAL         reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    FORM            reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    TRUE            reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    FALSE           reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    VECM            reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    CHARE           reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    POW             reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    POWF            reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    I64             reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    F64             reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    BOOL            reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    CHAR            reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    STRING          reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    AMP             reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    USIZE           reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    MAS             reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    POR             reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    DIVIDIDO        reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    MOD             reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    AS              reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    PT              reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    CORIZQ          reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    DPT             reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)


state 211

    (109) listarreglo -> listarreglo CORIZQ listexpr CORDER .

    IGUAL           reduce using rule 109 (listarreglo -> listarreglo CORIZQ listexpr CORDER .)
    CORIZQ          reduce using rule 109 (listarreglo -> listarreglo CORIZQ listexpr CORDER .)
    MAS             reduce using rule 109 (listarreglo -> listarreglo CORIZQ listexpr CORDER .)
    MENOS           reduce using rule 109 (listarreglo -> listarreglo CORIZQ listexpr CORDER .)
    POR             reduce using rule 109 (listarreglo -> listarreglo CORIZQ listexpr CORDER .)
    DIVIDIDO        reduce using rule 109 (listarreglo -> listarreglo CORIZQ listexpr CORDER .)
    MOD             reduce using rule 109 (listarreglo -> listarreglo CORIZQ listexpr CORDER .)
    AS              reduce using rule 109 (listarreglo -> listarreglo CORIZQ listexpr CORDER .)
    PT              reduce using rule 109 (listarreglo -> listarreglo CORIZQ listexpr CORDER .)
    MENOR           reduce using rule 109 (listarreglo -> listarreglo CORIZQ listexpr CORDER .)
    MAYOR           reduce using rule 109 (listarreglo -> listarreglo CORIZQ listexpr CORDER .)
    MEIGUAL         reduce using rule 109 (listarreglo -> listarreglo CORIZQ listexpr CORDER .)
    MAIGUAL         reduce using rule 109 (listarreglo -> listarreglo CORIZQ listexpr CORDER .)
    DIS             reduce using rule 109 (listarreglo -> listarreglo CORIZQ listexpr CORDER .)
    LLAVEIZQ        reduce using rule 109 (listarreglo -> listarreglo CORIZQ listexpr CORDER .)
    AND             reduce using rule 109 (listarreglo -> listarreglo CORIZQ listexpr CORDER .)
    OR              reduce using rule 109 (listarreglo -> listarreglo CORIZQ listexpr CORDER .)
    DPT             reduce using rule 109 (listarreglo -> listarreglo CORIZQ listexpr CORDER .)
    PTCOMA          reduce using rule 109 (listarreglo -> listarreglo CORIZQ listexpr CORDER .)
    PARDER          reduce using rule 109 (listarreglo -> listarreglo CORIZQ listexpr CORDER .)
    COMA            reduce using rule 109 (listarreglo -> listarreglo CORIZQ listexpr CORDER .)
    CORDER          reduce using rule 109 (listarreglo -> listarreglo CORIZQ listexpr CORDER .)
    LLAVEDER        reduce using rule 109 (listarreglo -> listarreglo CORIZQ listexpr CORDER .)


state 212

    (21) instruccion -> ID PARIZQ listexpr PARDER PTCOMA .

    LET             reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    ID              reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    PRINT           reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    IF              reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    LOOP            reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    RETURN          reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    WHILE           reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    FOR             reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    BREAK           reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    CONTINUE        reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    LLAVEDER        reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    MENOS           reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    PARIZQ          reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    ENTERO          reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    DECIMAL         reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    FORM            reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    TRUE            reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    FALSE           reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    VECM            reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    CHARE           reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    POW             reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    POWF            reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    I64             reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    F64             reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    BOOL            reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    CHAR            reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    STRING          reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    AMP             reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    USIZE           reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    MAS             reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    POR             reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    DIVIDIDO        reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    MOD             reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    AS              reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    PT              reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    CORIZQ          reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    DPT             reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)


state 213

    (111) listexpr -> listexpr COMA expresion .
    (78) expresion -> expresion . MAS expresion
    (79) expresion -> expresion . MENOS expresion
    (80) expresion -> expresion . POR expresion
    (81) expresion -> expresion . DIVIDIDO expresion
    (82) expresion -> expresion . MOD expresion
    (83) expresion -> expresion . AS tipos
    (103) expresion -> expresion . PT TOSTRING PARIZQ PARDER
    (104) expresion -> expresion . PT SQRT PARIZQ PARDER
    (105) expresion -> expresion . PT ABS PARIZQ PARDER
    (106) expresion -> expresion . PT CLONE PARIZQ PARDER
    (107) expresion -> expresion . PT LEN PARIZQ PARDER
    (108) expresion -> expresion . PT TOOWNED PARIZQ PARDER
    (98) opcionpow -> expresion .

    PARDER          reduce using rule 111 (listexpr -> listexpr COMA expresion .)
    COMA            reduce using rule 111 (listexpr -> listexpr COMA expresion .)
    CORDER          reduce using rule 111 (listexpr -> listexpr COMA expresion .)
    MAS             shift and go to state 135
    MENOS           shift and go to state 136
    POR             shift and go to state 137
    DIVIDIDO        shift and go to state 138
    MOD             shift and go to state 139
    AS              shift and go to state 140
    PT              shift and go to state 141
    DPT             reduce using rule 98 (opcionpow -> expresion .)


state 214

    (22) instruccion -> PRINT NOT PARIZQ listexpr PARDER . PTCOMA

    PTCOMA          shift and go to state 241


state 215

    (23) instruccion -> IF . logica LLAVEIZQ instrucciones LLAVEDER unelse
    (37) instrif -> IF . logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (47) logica -> . logica AND logica
    (48) logica -> . logica OR logica
    (49) logica -> . NOT logica
    (50) logica -> . rel
    (51) rel -> . rel IGUAL IGUAL rel
    (52) rel -> . rel MENOR rel
    (53) rel -> . rel MAYOR rel
    (54) rel -> . rel MEIGUAL rel
    (55) rel -> . rel MAIGUAL rel
    (56) rel -> . rel DIS rel
    (57) rel -> . expresion
    (78) expresion -> . expresion MAS expresion
    (79) expresion -> . expresion MENOS expresion
    (80) expresion -> . expresion POR expresion
    (81) expresion -> . expresion DIVIDIDO expresion
    (82) expresion -> . expresion MOD expresion
    (83) expresion -> . expresion AS tipos
    (84) expresion -> . instrif
    (85) expresion -> . MENOS expresion
    (86) expresion -> . PARIZQ logica PARDER
    (87) expresion -> . ENTERO
    (88) expresion -> . DECIMAL
    (89) expresion -> . FORM
    (90) expresion -> . TRUE
    (91) expresion -> . FALSE
    (92) expresion -> . VECM NOT listarreglo
    (93) expresion -> . ID listarreglo
    (94) expresion -> . ID PARIZQ listexpr PARDER
    (95) expresion -> . listarreglo
    (96) expresion -> . CHARE
    (97) expresion -> . opcionpow DPT DPT expresion
    (100) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (101) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (102) expresion -> . instrloop
    (103) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (104) expresion -> . expresion PT SQRT PARIZQ PARDER
    (105) expresion -> . expresion PT ABS PARIZQ PARDER
    (106) expresion -> . expresion PT CLONE PARIZQ PARDER
    (107) expresion -> . expresion PT LEN PARIZQ PARDER
    (108) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (37) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (109) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (110) listarreglo -> . empty
    (98) opcionpow -> . expresion
    (99) opcionpow -> . tipos
    (36) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (113) empty -> .
    (71) tipos -> . I64
    (72) tipos -> . F64
    (73) tipos -> . BOOL
    (74) tipos -> . CHAR
    (75) tipos -> . STRING
    (76) tipos -> . AMP STR
    (77) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    NOT             shift and go to state 84
    MENOS           shift and go to state 87
    PARIZQ          shift and go to state 90
    ENTERO          shift and go to state 91
    DECIMAL         shift and go to state 92
    FORM            shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    VECM            shift and go to state 96
    ID              shift and go to state 98
    CHARE           shift and go to state 99
    POW             shift and go to state 101
    POWF            shift and go to state 102
    IF              shift and go to state 82
    LOOP            shift and go to state 104
    CORIZQ          reduce using rule 113 (empty -> .)
    MAS             reduce using rule 113 (empty -> .)
    POR             reduce using rule 113 (empty -> .)
    DIVIDIDO        reduce using rule 113 (empty -> .)
    MOD             reduce using rule 113 (empty -> .)
    AS              reduce using rule 113 (empty -> .)
    PT              reduce using rule 113 (empty -> .)
    IGUAL           reduce using rule 113 (empty -> .)
    MENOR           reduce using rule 113 (empty -> .)
    MAYOR           reduce using rule 113 (empty -> .)
    MEIGUAL         reduce using rule 113 (empty -> .)
    MAIGUAL         reduce using rule 113 (empty -> .)
    DIS             reduce using rule 113 (empty -> .)
    LLAVEIZQ        reduce using rule 113 (empty -> .)
    AND             reduce using rule 113 (empty -> .)
    OR              reduce using rule 113 (empty -> .)
    DPT             reduce using rule 113 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 113 (empty -> .) ]

    logica                         shift and go to state 242
    rel                            shift and go to state 85
    expresion                      shift and go to state 86
    tipos                          shift and go to state 88
    instrif                        shift and go to state 89
    listarreglo                    shift and go to state 97
    opcionpow                      shift and go to state 100
    instrloop                      shift and go to state 103
    empty                          shift and go to state 80

state 216

    (37) instrif -> IF logica LLAVEIZQ instruccionesexp . LLAVEDER instrelse
    (33) instruccionesexpfin -> instruccionesexp .

  ! shift/reduce conflict for LLAVEDER resolved as shift
    LLAVEDER        shift and go to state 243

  ! LLAVEDER        [ reduce using rule 33 (instruccionesexpfin -> instruccionesexp .) ]


state 217

    (31) instruccionesexp -> instruccion . instruccionesexpfin
    (33) instruccionesexpfin -> . instruccionesexp
    (34) instruccionesexpfin -> . expresion
    (35) instruccionesexpfin -> .
    (31) instruccionesexp -> . instruccion instruccionesexpfin
    (32) instruccionesexp -> . instruccionesexpfin
    (78) expresion -> . expresion MAS expresion
    (79) expresion -> . expresion MENOS expresion
    (80) expresion -> . expresion POR expresion
    (81) expresion -> . expresion DIVIDIDO expresion
    (82) expresion -> . expresion MOD expresion
    (83) expresion -> . expresion AS tipos
    (84) expresion -> . instrif
    (85) expresion -> . MENOS expresion
    (86) expresion -> . PARIZQ logica PARDER
    (87) expresion -> . ENTERO
    (88) expresion -> . DECIMAL
    (89) expresion -> . FORM
    (90) expresion -> . TRUE
    (91) expresion -> . FALSE
    (92) expresion -> . VECM NOT listarreglo
    (93) expresion -> . ID listarreglo
    (94) expresion -> . ID PARIZQ listexpr PARDER
    (95) expresion -> . listarreglo
    (96) expresion -> . CHARE
    (97) expresion -> . opcionpow DPT DPT expresion
    (100) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (101) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (102) expresion -> . instrloop
    (103) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (104) expresion -> . expresion PT SQRT PARIZQ PARDER
    (105) expresion -> . expresion PT ABS PARIZQ PARDER
    (106) expresion -> . expresion PT CLONE PARIZQ PARDER
    (107) expresion -> . expresion PT LEN PARIZQ PARDER
    (108) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (19) instruccion -> . LET mutable ID pyc arrtipos IGUAL logica PTCOMA
    (20) instruccion -> . ID listarreglo IGUAL logica PTCOMA
    (21) instruccion -> . ID PARIZQ listexpr PARDER PTCOMA
    (22) instruccion -> . PRINT NOT PARIZQ listexpr PARDER PTCOMA
    (23) instruccion -> . IF logica LLAVEIZQ instrucciones LLAVEDER unelse
    (24) instruccion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (25) instruccion -> . RETURN logica PTCOMA
    (26) instruccion -> . WHILE logica LLAVEIZQ instrucciones LLAVEDER
    (27) instruccion -> . FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER
    (28) instruccion -> . BREAK PTCOMA
    (29) instruccion -> . CONTINUE PTCOMA
    (30) instruccion -> . BREAK logica PTCOMA
    (37) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (109) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (110) listarreglo -> . empty
    (98) opcionpow -> . expresion
    (99) opcionpow -> . tipos
    (36) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (113) empty -> .
    (71) tipos -> . I64
    (72) tipos -> . F64
    (73) tipos -> . BOOL
    (74) tipos -> . CHAR
    (75) tipos -> . STRING
    (76) tipos -> . AMP STR
    (77) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
  ! reduce/reduce conflict for LLAVEDER resolved using rule 35 (instruccionesexpfin -> .)
    LLAVEDER        reduce using rule 35 (instruccionesexpfin -> .)
    MENOS           shift and go to state 87
    PARIZQ          shift and go to state 90
    ENTERO          shift and go to state 91
    DECIMAL         shift and go to state 92
    FORM            shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    VECM            shift and go to state 96
    ID              shift and go to state 246
    CHARE           shift and go to state 99
    POW             shift and go to state 101
    POWF            shift and go to state 102
    LET             shift and go to state 51
    PRINT           shift and go to state 53
    IF              shift and go to state 215
    LOOP            shift and go to state 220
    RETURN          shift and go to state 56
    WHILE           shift and go to state 57
    FOR             shift and go to state 58
    BREAK           shift and go to state 59
    CONTINUE        shift and go to state 60
    CORIZQ          reduce using rule 113 (empty -> .)
    MAS             reduce using rule 113 (empty -> .)
    POR             reduce using rule 113 (empty -> .)
    DIVIDIDO        reduce using rule 113 (empty -> .)
    MOD             reduce using rule 113 (empty -> .)
    AS              reduce using rule 113 (empty -> .)
    PT              reduce using rule 113 (empty -> .)
    DPT             reduce using rule 113 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 113 (empty -> .) ]
  ! LLAVEDER        [ reduce using rule 113 (empty -> .) ]

    instruccion                    shift and go to state 217
    instruccionesexpfin            shift and go to state 244
    instruccionesexp               shift and go to state 245
    expresion                      shift and go to state 221
    tipos                          shift and go to state 88
    instrif                        shift and go to state 89
    listarreglo                    shift and go to state 97
    opcionpow                      shift and go to state 100
    instrloop                      shift and go to state 103
    empty                          shift and go to state 80

state 218

    (32) instruccionesexp -> instruccionesexpfin .

    LLAVEDER        reduce using rule 32 (instruccionesexp -> instruccionesexpfin .)


state 219

    (20) instruccion -> ID . listarreglo IGUAL logica PTCOMA
    (21) instruccion -> ID . PARIZQ listexpr PARDER PTCOMA
    (93) expresion -> ID . listarreglo
    (94) expresion -> ID . PARIZQ listexpr PARDER
    (109) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (110) listarreglo -> . empty
    (113) empty -> .

    PARIZQ          shift and go to state 248
    IGUAL           reduce using rule 113 (empty -> .)
    CORIZQ          reduce using rule 113 (empty -> .)
    MAS             reduce using rule 113 (empty -> .)
    MENOS           reduce using rule 113 (empty -> .)
    POR             reduce using rule 113 (empty -> .)
    DIVIDIDO        reduce using rule 113 (empty -> .)
    MOD             reduce using rule 113 (empty -> .)
    AS              reduce using rule 113 (empty -> .)
    PT              reduce using rule 113 (empty -> .)
    LLAVEDER        reduce using rule 113 (empty -> .)
    DPT             reduce using rule 113 (empty -> .)

    listarreglo                    shift and go to state 247
    empty                          shift and go to state 80

state 220

    (24) instruccion -> LOOP . LLAVEIZQ instrucciones LLAVEDER
    (36) instrloop -> LOOP . LLAVEIZQ instrucciones LLAVEDER

    LLAVEIZQ        shift and go to state 249


state 221

    (34) instruccionesexpfin -> expresion .
    (78) expresion -> expresion . MAS expresion
    (79) expresion -> expresion . MENOS expresion
    (80) expresion -> expresion . POR expresion
    (81) expresion -> expresion . DIVIDIDO expresion
    (82) expresion -> expresion . MOD expresion
    (83) expresion -> expresion . AS tipos
    (103) expresion -> expresion . PT TOSTRING PARIZQ PARDER
    (104) expresion -> expresion . PT SQRT PARIZQ PARDER
    (105) expresion -> expresion . PT ABS PARIZQ PARDER
    (106) expresion -> expresion . PT CLONE PARIZQ PARDER
    (107) expresion -> expresion . PT LEN PARIZQ PARDER
    (108) expresion -> expresion . PT TOOWNED PARIZQ PARDER
    (98) opcionpow -> expresion .

    LLAVEDER        reduce using rule 34 (instruccionesexpfin -> expresion .)
    MAS             shift and go to state 135
    MENOS           shift and go to state 136
    POR             shift and go to state 137
    DIVIDIDO        shift and go to state 138
    MOD             shift and go to state 139
    AS              shift and go to state 140
    PT              shift and go to state 141
    DPT             reduce using rule 98 (opcionpow -> expresion .)


state 222

    (23) instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER . unelse
    (44) unelse -> . ELSE LLAVEIZQ instrucciones LLAVEDER
    (45) unelse -> . ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse
    (46) unelse -> . empty
    (113) empty -> .

    ELSE            shift and go to state 251
    LET             reduce using rule 113 (empty -> .)
    ID              reduce using rule 113 (empty -> .)
    PRINT           reduce using rule 113 (empty -> .)
    IF              reduce using rule 113 (empty -> .)
    LOOP            reduce using rule 113 (empty -> .)
    RETURN          reduce using rule 113 (empty -> .)
    WHILE           reduce using rule 113 (empty -> .)
    FOR             reduce using rule 113 (empty -> .)
    BREAK           reduce using rule 113 (empty -> .)
    CONTINUE        reduce using rule 113 (empty -> .)
    LLAVEDER        reduce using rule 113 (empty -> .)
    MENOS           reduce using rule 113 (empty -> .)
    PARIZQ          reduce using rule 113 (empty -> .)
    ENTERO          reduce using rule 113 (empty -> .)
    DECIMAL         reduce using rule 113 (empty -> .)
    FORM            reduce using rule 113 (empty -> .)
    TRUE            reduce using rule 113 (empty -> .)
    FALSE           reduce using rule 113 (empty -> .)
    VECM            reduce using rule 113 (empty -> .)
    CHARE           reduce using rule 113 (empty -> .)
    POW             reduce using rule 113 (empty -> .)
    POWF            reduce using rule 113 (empty -> .)
    I64             reduce using rule 113 (empty -> .)
    F64             reduce using rule 113 (empty -> .)
    BOOL            reduce using rule 113 (empty -> .)
    CHAR            reduce using rule 113 (empty -> .)
    STRING          reduce using rule 113 (empty -> .)
    AMP             reduce using rule 113 (empty -> .)
    USIZE           reduce using rule 113 (empty -> .)
    MAS             reduce using rule 113 (empty -> .)
    POR             reduce using rule 113 (empty -> .)
    DIVIDIDO        reduce using rule 113 (empty -> .)
    MOD             reduce using rule 113 (empty -> .)
    AS              reduce using rule 113 (empty -> .)
    PT              reduce using rule 113 (empty -> .)
    CORIZQ          reduce using rule 113 (empty -> .)
    DPT             reduce using rule 113 (empty -> .)

    unelse                         shift and go to state 250
    empty                          shift and go to state 252

state 223

    (51) rel -> rel IGUAL IGUAL rel .
    (51) rel -> rel . IGUAL IGUAL rel
    (52) rel -> rel . MENOR rel
    (53) rel -> rel . MAYOR rel
    (54) rel -> rel . MEIGUAL rel
    (55) rel -> rel . MAIGUAL rel
    (56) rel -> rel . DIS rel

  ! shift/reduce conflict for IGUAL resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for MEIGUAL resolved as shift
  ! shift/reduce conflict for MAIGUAL resolved as shift
  ! shift/reduce conflict for DIS resolved as shift
    LLAVEIZQ        reduce using rule 51 (rel -> rel IGUAL IGUAL rel .)
    AND             reduce using rule 51 (rel -> rel IGUAL IGUAL rel .)
    OR              reduce using rule 51 (rel -> rel IGUAL IGUAL rel .)
    PTCOMA          reduce using rule 51 (rel -> rel IGUAL IGUAL rel .)
    PARDER          reduce using rule 51 (rel -> rel IGUAL IGUAL rel .)
    IGUAL           shift and go to state 129
    MENOR           shift and go to state 130
    MAYOR           shift and go to state 131
    MEIGUAL         shift and go to state 132
    MAIGUAL         shift and go to state 133
    DIS             shift and go to state 134

  ! IGUAL           [ reduce using rule 51 (rel -> rel IGUAL IGUAL rel .) ]
  ! MENOR           [ reduce using rule 51 (rel -> rel IGUAL IGUAL rel .) ]
  ! MAYOR           [ reduce using rule 51 (rel -> rel IGUAL IGUAL rel .) ]
  ! MEIGUAL         [ reduce using rule 51 (rel -> rel IGUAL IGUAL rel .) ]
  ! MAIGUAL         [ reduce using rule 51 (rel -> rel IGUAL IGUAL rel .) ]
  ! DIS             [ reduce using rule 51 (rel -> rel IGUAL IGUAL rel .) ]


state 224

    (103) expresion -> expresion PT TOSTRING PARIZQ . PARDER

    PARDER          shift and go to state 253


state 225

    (104) expresion -> expresion PT SQRT PARIZQ . PARDER

    PARDER          shift and go to state 254


state 226

    (105) expresion -> expresion PT ABS PARIZQ . PARDER

    PARDER          shift and go to state 255


state 227

    (106) expresion -> expresion PT CLONE PARIZQ . PARDER

    PARDER          shift and go to state 256


state 228

    (107) expresion -> expresion PT LEN PARIZQ . PARDER

    PARDER          shift and go to state 257


state 229

    (108) expresion -> expresion PT TOOWNED PARIZQ . PARDER

    PARDER          shift and go to state 258


state 230

    (94) expresion -> ID PARIZQ listexpr PARDER .

    MAS             reduce using rule 94 (expresion -> ID PARIZQ listexpr PARDER .)
    MENOS           reduce using rule 94 (expresion -> ID PARIZQ listexpr PARDER .)
    POR             reduce using rule 94 (expresion -> ID PARIZQ listexpr PARDER .)
    DIVIDIDO        reduce using rule 94 (expresion -> ID PARIZQ listexpr PARDER .)
    MOD             reduce using rule 94 (expresion -> ID PARIZQ listexpr PARDER .)
    AS              reduce using rule 94 (expresion -> ID PARIZQ listexpr PARDER .)
    PT              reduce using rule 94 (expresion -> ID PARIZQ listexpr PARDER .)
    IGUAL           reduce using rule 94 (expresion -> ID PARIZQ listexpr PARDER .)
    MENOR           reduce using rule 94 (expresion -> ID PARIZQ listexpr PARDER .)
    MAYOR           reduce using rule 94 (expresion -> ID PARIZQ listexpr PARDER .)
    MEIGUAL         reduce using rule 94 (expresion -> ID PARIZQ listexpr PARDER .)
    MAIGUAL         reduce using rule 94 (expresion -> ID PARIZQ listexpr PARDER .)
    DIS             reduce using rule 94 (expresion -> ID PARIZQ listexpr PARDER .)
    LLAVEIZQ        reduce using rule 94 (expresion -> ID PARIZQ listexpr PARDER .)
    AND             reduce using rule 94 (expresion -> ID PARIZQ listexpr PARDER .)
    OR              reduce using rule 94 (expresion -> ID PARIZQ listexpr PARDER .)
    DPT             reduce using rule 94 (expresion -> ID PARIZQ listexpr PARDER .)
    PTCOMA          reduce using rule 94 (expresion -> ID PARIZQ listexpr PARDER .)
    PARDER          reduce using rule 94 (expresion -> ID PARIZQ listexpr PARDER .)
    COMA            reduce using rule 94 (expresion -> ID PARIZQ listexpr PARDER .)
    CORDER          reduce using rule 94 (expresion -> ID PARIZQ listexpr PARDER .)
    LLAVEDER        reduce using rule 94 (expresion -> ID PARIZQ listexpr PARDER .)


state 231

    (97) expresion -> opcionpow DPT DPT expresion .
    (78) expresion -> expresion . MAS expresion
    (79) expresion -> expresion . MENOS expresion
    (80) expresion -> expresion . POR expresion
    (81) expresion -> expresion . DIVIDIDO expresion
    (82) expresion -> expresion . MOD expresion
    (83) expresion -> expresion . AS tipos
    (103) expresion -> expresion . PT TOSTRING PARIZQ PARDER
    (104) expresion -> expresion . PT SQRT PARIZQ PARDER
    (105) expresion -> expresion . PT ABS PARIZQ PARDER
    (106) expresion -> expresion . PT CLONE PARIZQ PARDER
    (107) expresion -> expresion . PT LEN PARIZQ PARDER
    (108) expresion -> expresion . PT TOOWNED PARIZQ PARDER
    (98) opcionpow -> expresion .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for POR resolved as shift
  ! shift/reduce conflict for DIVIDIDO resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AS resolved as shift
  ! shift/reduce conflict for PT resolved as shift
  ! reduce/reduce conflict for DPT resolved using rule 97 (expresion -> opcionpow DPT DPT expresion .)
    IGUAL           reduce using rule 97 (expresion -> opcionpow DPT DPT expresion .)
    MENOR           reduce using rule 97 (expresion -> opcionpow DPT DPT expresion .)
    MAYOR           reduce using rule 97 (expresion -> opcionpow DPT DPT expresion .)
    MEIGUAL         reduce using rule 97 (expresion -> opcionpow DPT DPT expresion .)
    MAIGUAL         reduce using rule 97 (expresion -> opcionpow DPT DPT expresion .)
    DIS             reduce using rule 97 (expresion -> opcionpow DPT DPT expresion .)
    LLAVEIZQ        reduce using rule 97 (expresion -> opcionpow DPT DPT expresion .)
    AND             reduce using rule 97 (expresion -> opcionpow DPT DPT expresion .)
    OR              reduce using rule 97 (expresion -> opcionpow DPT DPT expresion .)
    DPT             reduce using rule 97 (expresion -> opcionpow DPT DPT expresion .)
    PTCOMA          reduce using rule 97 (expresion -> opcionpow DPT DPT expresion .)
    PARDER          reduce using rule 97 (expresion -> opcionpow DPT DPT expresion .)
    COMA            reduce using rule 97 (expresion -> opcionpow DPT DPT expresion .)
    CORDER          reduce using rule 97 (expresion -> opcionpow DPT DPT expresion .)
    LLAVEDER        reduce using rule 97 (expresion -> opcionpow DPT DPT expresion .)
    MAS             shift and go to state 135
    MENOS           shift and go to state 136
    POR             shift and go to state 137
    DIVIDIDO        shift and go to state 138
    MOD             shift and go to state 139
    AS              shift and go to state 140
    PT              shift and go to state 141

  ! MAS             [ reduce using rule 97 (expresion -> opcionpow DPT DPT expresion .) ]
  ! MENOS           [ reduce using rule 97 (expresion -> opcionpow DPT DPT expresion .) ]
  ! POR             [ reduce using rule 97 (expresion -> opcionpow DPT DPT expresion .) ]
  ! DIVIDIDO        [ reduce using rule 97 (expresion -> opcionpow DPT DPT expresion .) ]
  ! MOD             [ reduce using rule 97 (expresion -> opcionpow DPT DPT expresion .) ]
  ! AS              [ reduce using rule 97 (expresion -> opcionpow DPT DPT expresion .) ]
  ! PT              [ reduce using rule 97 (expresion -> opcionpow DPT DPT expresion .) ]
  ! DPT             [ reduce using rule 98 (opcionpow -> expresion .) ]


state 232

    (100) expresion -> POW PARIZQ ENTERO COMA . ENTERO PARDER

    ENTERO          shift and go to state 259


state 233

    (101) expresion -> POWF PARIZQ DECIMAL COMA . DECIMAL PARDER

    DECIMAL         shift and go to state 260


state 234

    (36) instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .

    MAS             reduce using rule 36 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    MENOS           reduce using rule 36 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    POR             reduce using rule 36 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    DIVIDIDO        reduce using rule 36 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    MOD             reduce using rule 36 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    AS              reduce using rule 36 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    PT              reduce using rule 36 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    IGUAL           reduce using rule 36 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    MENOR           reduce using rule 36 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    MAYOR           reduce using rule 36 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    MEIGUAL         reduce using rule 36 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    MAIGUAL         reduce using rule 36 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    DIS             reduce using rule 36 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    LLAVEIZQ        reduce using rule 36 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    AND             reduce using rule 36 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    OR              reduce using rule 36 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    DPT             reduce using rule 36 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    PTCOMA          reduce using rule 36 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    PARDER          reduce using rule 36 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    COMA            reduce using rule 36 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    CORDER          reduce using rule 36 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    LLAVEDER        reduce using rule 36 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .)


state 235

    (26) instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .

    LET             reduce using rule 26 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    ID              reduce using rule 26 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    PRINT           reduce using rule 26 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    IF              reduce using rule 26 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    LOOP            reduce using rule 26 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    RETURN          reduce using rule 26 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    WHILE           reduce using rule 26 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    FOR             reduce using rule 26 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    BREAK           reduce using rule 26 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    CONTINUE        reduce using rule 26 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    LLAVEDER        reduce using rule 26 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    MENOS           reduce using rule 26 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    PARIZQ          reduce using rule 26 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    ENTERO          reduce using rule 26 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    DECIMAL         reduce using rule 26 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    FORM            reduce using rule 26 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    TRUE            reduce using rule 26 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    FALSE           reduce using rule 26 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    VECM            reduce using rule 26 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    CHARE           reduce using rule 26 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    POW             reduce using rule 26 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    POWF            reduce using rule 26 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    I64             reduce using rule 26 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    F64             reduce using rule 26 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    BOOL            reduce using rule 26 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    CHAR            reduce using rule 26 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    STRING          reduce using rule 26 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    AMP             reduce using rule 26 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    USIZE           reduce using rule 26 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    MAS             reduce using rule 26 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    POR             reduce using rule 26 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    DIVIDIDO        reduce using rule 26 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    MOD             reduce using rule 26 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    AS              reduce using rule 26 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    PT              reduce using rule 26 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    CORIZQ          reduce using rule 26 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    DPT             reduce using rule 26 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)


state 236

    (27) instruccion -> FOR ID IN opcionfor LLAVEIZQ . instrucciones LLAVEDER
    (17) instrucciones -> . instruccion instrucciones
    (18) instrucciones -> . instruccion
    (19) instruccion -> . LET mutable ID pyc arrtipos IGUAL logica PTCOMA
    (20) instruccion -> . ID listarreglo IGUAL logica PTCOMA
    (21) instruccion -> . ID PARIZQ listexpr PARDER PTCOMA
    (22) instruccion -> . PRINT NOT PARIZQ listexpr PARDER PTCOMA
    (23) instruccion -> . IF logica LLAVEIZQ instrucciones LLAVEDER unelse
    (24) instruccion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (25) instruccion -> . RETURN logica PTCOMA
    (26) instruccion -> . WHILE logica LLAVEIZQ instrucciones LLAVEDER
    (27) instruccion -> . FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER
    (28) instruccion -> . BREAK PTCOMA
    (29) instruccion -> . CONTINUE PTCOMA
    (30) instruccion -> . BREAK logica PTCOMA

    LET             shift and go to state 51
    ID              shift and go to state 52
    PRINT           shift and go to state 53
    IF              shift and go to state 54
    LOOP            shift and go to state 55
    RETURN          shift and go to state 56
    WHILE           shift and go to state 57
    FOR             shift and go to state 58
    BREAK           shift and go to state 59
    CONTINUE        shift and go to state 60

    instrucciones                  shift and go to state 261
    instruccion                    shift and go to state 50

state 237

    (42) opcionfor -> ENTERO PT . PT logica

    PT              shift and go to state 262


state 238

    (19) instruccion -> LET mutable ID pyc arrtipos IGUAL . logica PTCOMA
    (47) logica -> . logica AND logica
    (48) logica -> . logica OR logica
    (49) logica -> . NOT logica
    (50) logica -> . rel
    (51) rel -> . rel IGUAL IGUAL rel
    (52) rel -> . rel MENOR rel
    (53) rel -> . rel MAYOR rel
    (54) rel -> . rel MEIGUAL rel
    (55) rel -> . rel MAIGUAL rel
    (56) rel -> . rel DIS rel
    (57) rel -> . expresion
    (78) expresion -> . expresion MAS expresion
    (79) expresion -> . expresion MENOS expresion
    (80) expresion -> . expresion POR expresion
    (81) expresion -> . expresion DIVIDIDO expresion
    (82) expresion -> . expresion MOD expresion
    (83) expresion -> . expresion AS tipos
    (84) expresion -> . instrif
    (85) expresion -> . MENOS expresion
    (86) expresion -> . PARIZQ logica PARDER
    (87) expresion -> . ENTERO
    (88) expresion -> . DECIMAL
    (89) expresion -> . FORM
    (90) expresion -> . TRUE
    (91) expresion -> . FALSE
    (92) expresion -> . VECM NOT listarreglo
    (93) expresion -> . ID listarreglo
    (94) expresion -> . ID PARIZQ listexpr PARDER
    (95) expresion -> . listarreglo
    (96) expresion -> . CHARE
    (97) expresion -> . opcionpow DPT DPT expresion
    (100) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (101) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (102) expresion -> . instrloop
    (103) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (104) expresion -> . expresion PT SQRT PARIZQ PARDER
    (105) expresion -> . expresion PT ABS PARIZQ PARDER
    (106) expresion -> . expresion PT CLONE PARIZQ PARDER
    (107) expresion -> . expresion PT LEN PARIZQ PARDER
    (108) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (37) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (109) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (110) listarreglo -> . empty
    (98) opcionpow -> . expresion
    (99) opcionpow -> . tipos
    (36) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (113) empty -> .
    (71) tipos -> . I64
    (72) tipos -> . F64
    (73) tipos -> . BOOL
    (74) tipos -> . CHAR
    (75) tipos -> . STRING
    (76) tipos -> . AMP STR
    (77) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    NOT             shift and go to state 84
    MENOS           shift and go to state 87
    PARIZQ          shift and go to state 90
    ENTERO          shift and go to state 91
    DECIMAL         shift and go to state 92
    FORM            shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    VECM            shift and go to state 96
    ID              shift and go to state 98
    CHARE           shift and go to state 99
    POW             shift and go to state 101
    POWF            shift and go to state 102
    IF              shift and go to state 82
    LOOP            shift and go to state 104
    CORIZQ          reduce using rule 113 (empty -> .)
    MAS             reduce using rule 113 (empty -> .)
    POR             reduce using rule 113 (empty -> .)
    DIVIDIDO        reduce using rule 113 (empty -> .)
    MOD             reduce using rule 113 (empty -> .)
    AS              reduce using rule 113 (empty -> .)
    PT              reduce using rule 113 (empty -> .)
    IGUAL           reduce using rule 113 (empty -> .)
    MENOR           reduce using rule 113 (empty -> .)
    MAYOR           reduce using rule 113 (empty -> .)
    MEIGUAL         reduce using rule 113 (empty -> .)
    MAIGUAL         reduce using rule 113 (empty -> .)
    DIS             reduce using rule 113 (empty -> .)
    PTCOMA          reduce using rule 113 (empty -> .)
    AND             reduce using rule 113 (empty -> .)
    OR              reduce using rule 113 (empty -> .)
    DPT             reduce using rule 113 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 113 (empty -> .) ]

    logica                         shift and go to state 263
    rel                            shift and go to state 85
    expresion                      shift and go to state 86
    tipos                          shift and go to state 88
    instrif                        shift and go to state 89
    listarreglo                    shift and go to state 97
    opcionpow                      shift and go to state 100
    instrloop                      shift and go to state 103
    empty                          shift and go to state 80

state 239

    (68) arreglos -> CORIZQ arreglos . PTCOMA ENTERO CORDER

    PTCOMA          shift and go to state 264


state 240

    (69) arreglos -> tipos .

    PTCOMA          reduce using rule 69 (arreglos -> tipos .)


state 241

    (22) instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .

    LET             reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    ID              reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    PRINT           reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    IF              reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    LOOP            reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    RETURN          reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    WHILE           reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    FOR             reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    BREAK           reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    CONTINUE        reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    LLAVEDER        reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    MENOS           reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    PARIZQ          reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    ENTERO          reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    DECIMAL         reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    FORM            reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    TRUE            reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    FALSE           reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    VECM            reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    CHARE           reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    POW             reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    POWF            reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    I64             reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    F64             reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    BOOL            reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    CHAR            reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    STRING          reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    AMP             reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    USIZE           reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    MAS             reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    POR             reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    DIVIDIDO        reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    MOD             reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    AS              reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    PT              reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    CORIZQ          reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    DPT             reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)


state 242

    (23) instruccion -> IF logica . LLAVEIZQ instrucciones LLAVEDER unelse
    (37) instrif -> IF logica . LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (47) logica -> logica . AND logica
    (48) logica -> logica . OR logica

    LLAVEIZQ        shift and go to state 265
    AND             shift and go to state 126
    OR              shift and go to state 127


state 243

    (37) instrif -> IF logica LLAVEIZQ instruccionesexp LLAVEDER . instrelse
    (38) instrelse -> . ELSE LLAVEIZQ instruccionesexp LLAVEDER
    (39) instrelse -> . ELSE IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (40) instrelse -> . empty
    (113) empty -> .

    ELSE            shift and go to state 267
    MAS             reduce using rule 113 (empty -> .)
    MENOS           reduce using rule 113 (empty -> .)
    POR             reduce using rule 113 (empty -> .)
    DIVIDIDO        reduce using rule 113 (empty -> .)
    MOD             reduce using rule 113 (empty -> .)
    AS              reduce using rule 113 (empty -> .)
    PT              reduce using rule 113 (empty -> .)
    IGUAL           reduce using rule 113 (empty -> .)
    MENOR           reduce using rule 113 (empty -> .)
    MAYOR           reduce using rule 113 (empty -> .)
    MEIGUAL         reduce using rule 113 (empty -> .)
    MAIGUAL         reduce using rule 113 (empty -> .)
    DIS             reduce using rule 113 (empty -> .)
    LLAVEIZQ        reduce using rule 113 (empty -> .)
    AND             reduce using rule 113 (empty -> .)
    OR              reduce using rule 113 (empty -> .)
    DPT             reduce using rule 113 (empty -> .)
    PTCOMA          reduce using rule 113 (empty -> .)
    PARDER          reduce using rule 113 (empty -> .)
    COMA            reduce using rule 113 (empty -> .)
    CORDER          reduce using rule 113 (empty -> .)
    LLAVEDER        reduce using rule 113 (empty -> .)

    instrelse                      shift and go to state 266
    empty                          shift and go to state 268

state 244

    (31) instruccionesexp -> instruccion instruccionesexpfin .
    (32) instruccionesexp -> instruccionesexpfin .

  ! reduce/reduce conflict for LLAVEDER resolved using rule 31 (instruccionesexp -> instruccion instruccionesexpfin .)
    LLAVEDER        reduce using rule 31 (instruccionesexp -> instruccion instruccionesexpfin .)

  ! LLAVEDER        [ reduce using rule 32 (instruccionesexp -> instruccionesexpfin .) ]


state 245

    (33) instruccionesexpfin -> instruccionesexp .

    LLAVEDER        reduce using rule 33 (instruccionesexpfin -> instruccionesexp .)


state 246

    (93) expresion -> ID . listarreglo
    (94) expresion -> ID . PARIZQ listexpr PARDER
    (20) instruccion -> ID . listarreglo IGUAL logica PTCOMA
    (21) instruccion -> ID . PARIZQ listexpr PARDER PTCOMA
    (109) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (110) listarreglo -> . empty
    (113) empty -> .

    PARIZQ          shift and go to state 270
    IGUAL           reduce using rule 113 (empty -> .)
    CORIZQ          reduce using rule 113 (empty -> .)
    MAS             reduce using rule 113 (empty -> .)
    MENOS           reduce using rule 113 (empty -> .)
    POR             reduce using rule 113 (empty -> .)
    DIVIDIDO        reduce using rule 113 (empty -> .)
    MOD             reduce using rule 113 (empty -> .)
    AS              reduce using rule 113 (empty -> .)
    PT              reduce using rule 113 (empty -> .)
    LLAVEDER        reduce using rule 113 (empty -> .)
    DPT             reduce using rule 113 (empty -> .)

    listarreglo                    shift and go to state 269
    empty                          shift and go to state 80

state 247

    (20) instruccion -> ID listarreglo . IGUAL logica PTCOMA
    (93) expresion -> ID listarreglo .
    (109) listarreglo -> listarreglo . CORIZQ listexpr CORDER

    IGUAL           shift and go to state 119
    MAS             reduce using rule 93 (expresion -> ID listarreglo .)
    MENOS           reduce using rule 93 (expresion -> ID listarreglo .)
    POR             reduce using rule 93 (expresion -> ID listarreglo .)
    DIVIDIDO        reduce using rule 93 (expresion -> ID listarreglo .)
    MOD             reduce using rule 93 (expresion -> ID listarreglo .)
    AS              reduce using rule 93 (expresion -> ID listarreglo .)
    PT              reduce using rule 93 (expresion -> ID listarreglo .)
    LLAVEDER        reduce using rule 93 (expresion -> ID listarreglo .)
    DPT             reduce using rule 93 (expresion -> ID listarreglo .)
    CORIZQ          shift and go to state 120


state 248

    (21) instruccion -> ID PARIZQ . listexpr PARDER PTCOMA
    (94) expresion -> ID PARIZQ . listexpr PARDER
    (111) listexpr -> . listexpr COMA expresion
    (112) listexpr -> . expresion
    (78) expresion -> . expresion MAS expresion
    (79) expresion -> . expresion MENOS expresion
    (80) expresion -> . expresion POR expresion
    (81) expresion -> . expresion DIVIDIDO expresion
    (82) expresion -> . expresion MOD expresion
    (83) expresion -> . expresion AS tipos
    (84) expresion -> . instrif
    (85) expresion -> . MENOS expresion
    (86) expresion -> . PARIZQ logica PARDER
    (87) expresion -> . ENTERO
    (88) expresion -> . DECIMAL
    (89) expresion -> . FORM
    (90) expresion -> . TRUE
    (91) expresion -> . FALSE
    (92) expresion -> . VECM NOT listarreglo
    (93) expresion -> . ID listarreglo
    (94) expresion -> . ID PARIZQ listexpr PARDER
    (95) expresion -> . listarreglo
    (96) expresion -> . CHARE
    (97) expresion -> . opcionpow DPT DPT expresion
    (100) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (101) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (102) expresion -> . instrloop
    (103) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (104) expresion -> . expresion PT SQRT PARIZQ PARDER
    (105) expresion -> . expresion PT ABS PARIZQ PARDER
    (106) expresion -> . expresion PT CLONE PARIZQ PARDER
    (107) expresion -> . expresion PT LEN PARIZQ PARDER
    (108) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (37) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (109) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (110) listarreglo -> . empty
    (98) opcionpow -> . expresion
    (99) opcionpow -> . tipos
    (36) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (113) empty -> .
    (71) tipos -> . I64
    (72) tipos -> . F64
    (73) tipos -> . BOOL
    (74) tipos -> . CHAR
    (75) tipos -> . STRING
    (76) tipos -> . AMP STR
    (77) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    MENOS           shift and go to state 87
    PARIZQ          shift and go to state 90
    ENTERO          shift and go to state 91
    DECIMAL         shift and go to state 92
    FORM            shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    VECM            shift and go to state 96
    ID              shift and go to state 98
    CHARE           shift and go to state 99
    POW             shift and go to state 101
    POWF            shift and go to state 102
    IF              shift and go to state 82
    LOOP            shift and go to state 104
    CORIZQ          reduce using rule 113 (empty -> .)
    MAS             reduce using rule 113 (empty -> .)
    POR             reduce using rule 113 (empty -> .)
    DIVIDIDO        reduce using rule 113 (empty -> .)
    MOD             reduce using rule 113 (empty -> .)
    AS              reduce using rule 113 (empty -> .)
    PT              reduce using rule 113 (empty -> .)
    PARDER          reduce using rule 113 (empty -> .)
    COMA            reduce using rule 113 (empty -> .)
    DPT             reduce using rule 113 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 113 (empty -> .) ]

    listexpr                       shift and go to state 271
    expresion                      shift and go to state 122
    tipos                          shift and go to state 88
    instrif                        shift and go to state 89
    listarreglo                    shift and go to state 97
    opcionpow                      shift and go to state 100
    instrloop                      shift and go to state 103
    empty                          shift and go to state 80

state 249

    (24) instruccion -> LOOP LLAVEIZQ . instrucciones LLAVEDER
    (36) instrloop -> LOOP LLAVEIZQ . instrucciones LLAVEDER
    (17) instrucciones -> . instruccion instrucciones
    (18) instrucciones -> . instruccion
    (19) instruccion -> . LET mutable ID pyc arrtipos IGUAL logica PTCOMA
    (20) instruccion -> . ID listarreglo IGUAL logica PTCOMA
    (21) instruccion -> . ID PARIZQ listexpr PARDER PTCOMA
    (22) instruccion -> . PRINT NOT PARIZQ listexpr PARDER PTCOMA
    (23) instruccion -> . IF logica LLAVEIZQ instrucciones LLAVEDER unelse
    (24) instruccion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (25) instruccion -> . RETURN logica PTCOMA
    (26) instruccion -> . WHILE logica LLAVEIZQ instrucciones LLAVEDER
    (27) instruccion -> . FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER
    (28) instruccion -> . BREAK PTCOMA
    (29) instruccion -> . CONTINUE PTCOMA
    (30) instruccion -> . BREAK logica PTCOMA

    LET             shift and go to state 51
    ID              shift and go to state 52
    PRINT           shift and go to state 53
    IF              shift and go to state 54
    LOOP            shift and go to state 55
    RETURN          shift and go to state 56
    WHILE           shift and go to state 57
    FOR             shift and go to state 58
    BREAK           shift and go to state 59
    CONTINUE        shift and go to state 60

    instrucciones                  shift and go to state 272
    instruccion                    shift and go to state 50

state 250

    (23) instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .

    LET             reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    ID              reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    PRINT           reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    IF              reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    LOOP            reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    RETURN          reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    WHILE           reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    FOR             reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    BREAK           reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    CONTINUE        reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    LLAVEDER        reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    MENOS           reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    PARIZQ          reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    ENTERO          reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    DECIMAL         reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    FORM            reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    TRUE            reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    FALSE           reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    VECM            reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    CHARE           reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    POW             reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    POWF            reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    I64             reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    F64             reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    BOOL            reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    CHAR            reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    STRING          reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    AMP             reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    USIZE           reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    MAS             reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    POR             reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    DIVIDIDO        reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    MOD             reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    AS              reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    PT              reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    CORIZQ          reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    DPT             reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)


state 251

    (44) unelse -> ELSE . LLAVEIZQ instrucciones LLAVEDER
    (45) unelse -> ELSE . IF logica LLAVEIZQ instrucciones LLAVEDER unelse

    LLAVEIZQ        shift and go to state 273
    IF              shift and go to state 274


state 252

    (46) unelse -> empty .

    LET             reduce using rule 46 (unelse -> empty .)
    ID              reduce using rule 46 (unelse -> empty .)
    PRINT           reduce using rule 46 (unelse -> empty .)
    IF              reduce using rule 46 (unelse -> empty .)
    LOOP            reduce using rule 46 (unelse -> empty .)
    RETURN          reduce using rule 46 (unelse -> empty .)
    WHILE           reduce using rule 46 (unelse -> empty .)
    FOR             reduce using rule 46 (unelse -> empty .)
    BREAK           reduce using rule 46 (unelse -> empty .)
    CONTINUE        reduce using rule 46 (unelse -> empty .)
    LLAVEDER        reduce using rule 46 (unelse -> empty .)
    MENOS           reduce using rule 46 (unelse -> empty .)
    PARIZQ          reduce using rule 46 (unelse -> empty .)
    ENTERO          reduce using rule 46 (unelse -> empty .)
    DECIMAL         reduce using rule 46 (unelse -> empty .)
    FORM            reduce using rule 46 (unelse -> empty .)
    TRUE            reduce using rule 46 (unelse -> empty .)
    FALSE           reduce using rule 46 (unelse -> empty .)
    VECM            reduce using rule 46 (unelse -> empty .)
    CHARE           reduce using rule 46 (unelse -> empty .)
    POW             reduce using rule 46 (unelse -> empty .)
    POWF            reduce using rule 46 (unelse -> empty .)
    I64             reduce using rule 46 (unelse -> empty .)
    F64             reduce using rule 46 (unelse -> empty .)
    BOOL            reduce using rule 46 (unelse -> empty .)
    CHAR            reduce using rule 46 (unelse -> empty .)
    STRING          reduce using rule 46 (unelse -> empty .)
    AMP             reduce using rule 46 (unelse -> empty .)
    USIZE           reduce using rule 46 (unelse -> empty .)
    MAS             reduce using rule 46 (unelse -> empty .)
    POR             reduce using rule 46 (unelse -> empty .)
    DIVIDIDO        reduce using rule 46 (unelse -> empty .)
    MOD             reduce using rule 46 (unelse -> empty .)
    AS              reduce using rule 46 (unelse -> empty .)
    PT              reduce using rule 46 (unelse -> empty .)
    CORIZQ          reduce using rule 46 (unelse -> empty .)
    DPT             reduce using rule 46 (unelse -> empty .)


state 253

    (103) expresion -> expresion PT TOSTRING PARIZQ PARDER .

    MAS             reduce using rule 103 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    MENOS           reduce using rule 103 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    POR             reduce using rule 103 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    DIVIDIDO        reduce using rule 103 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    MOD             reduce using rule 103 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    AS              reduce using rule 103 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    PT              reduce using rule 103 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    IGUAL           reduce using rule 103 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    MENOR           reduce using rule 103 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    MAYOR           reduce using rule 103 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    MEIGUAL         reduce using rule 103 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    MAIGUAL         reduce using rule 103 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    DIS             reduce using rule 103 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    LLAVEIZQ        reduce using rule 103 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    AND             reduce using rule 103 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    OR              reduce using rule 103 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    DPT             reduce using rule 103 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    PTCOMA          reduce using rule 103 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    PARDER          reduce using rule 103 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    COMA            reduce using rule 103 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    CORDER          reduce using rule 103 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    LLAVEDER        reduce using rule 103 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)


state 254

    (104) expresion -> expresion PT SQRT PARIZQ PARDER .

    MAS             reduce using rule 104 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    MENOS           reduce using rule 104 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    POR             reduce using rule 104 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    DIVIDIDO        reduce using rule 104 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    MOD             reduce using rule 104 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    AS              reduce using rule 104 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    PT              reduce using rule 104 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    IGUAL           reduce using rule 104 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    MENOR           reduce using rule 104 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    MAYOR           reduce using rule 104 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    MEIGUAL         reduce using rule 104 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    MAIGUAL         reduce using rule 104 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    DIS             reduce using rule 104 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    LLAVEIZQ        reduce using rule 104 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    AND             reduce using rule 104 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    OR              reduce using rule 104 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    DPT             reduce using rule 104 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    PTCOMA          reduce using rule 104 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    PARDER          reduce using rule 104 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    COMA            reduce using rule 104 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    CORDER          reduce using rule 104 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    LLAVEDER        reduce using rule 104 (expresion -> expresion PT SQRT PARIZQ PARDER .)


state 255

    (105) expresion -> expresion PT ABS PARIZQ PARDER .

    MAS             reduce using rule 105 (expresion -> expresion PT ABS PARIZQ PARDER .)
    MENOS           reduce using rule 105 (expresion -> expresion PT ABS PARIZQ PARDER .)
    POR             reduce using rule 105 (expresion -> expresion PT ABS PARIZQ PARDER .)
    DIVIDIDO        reduce using rule 105 (expresion -> expresion PT ABS PARIZQ PARDER .)
    MOD             reduce using rule 105 (expresion -> expresion PT ABS PARIZQ PARDER .)
    AS              reduce using rule 105 (expresion -> expresion PT ABS PARIZQ PARDER .)
    PT              reduce using rule 105 (expresion -> expresion PT ABS PARIZQ PARDER .)
    IGUAL           reduce using rule 105 (expresion -> expresion PT ABS PARIZQ PARDER .)
    MENOR           reduce using rule 105 (expresion -> expresion PT ABS PARIZQ PARDER .)
    MAYOR           reduce using rule 105 (expresion -> expresion PT ABS PARIZQ PARDER .)
    MEIGUAL         reduce using rule 105 (expresion -> expresion PT ABS PARIZQ PARDER .)
    MAIGUAL         reduce using rule 105 (expresion -> expresion PT ABS PARIZQ PARDER .)
    DIS             reduce using rule 105 (expresion -> expresion PT ABS PARIZQ PARDER .)
    LLAVEIZQ        reduce using rule 105 (expresion -> expresion PT ABS PARIZQ PARDER .)
    AND             reduce using rule 105 (expresion -> expresion PT ABS PARIZQ PARDER .)
    OR              reduce using rule 105 (expresion -> expresion PT ABS PARIZQ PARDER .)
    DPT             reduce using rule 105 (expresion -> expresion PT ABS PARIZQ PARDER .)
    PTCOMA          reduce using rule 105 (expresion -> expresion PT ABS PARIZQ PARDER .)
    PARDER          reduce using rule 105 (expresion -> expresion PT ABS PARIZQ PARDER .)
    COMA            reduce using rule 105 (expresion -> expresion PT ABS PARIZQ PARDER .)
    CORDER          reduce using rule 105 (expresion -> expresion PT ABS PARIZQ PARDER .)
    LLAVEDER        reduce using rule 105 (expresion -> expresion PT ABS PARIZQ PARDER .)


state 256

    (106) expresion -> expresion PT CLONE PARIZQ PARDER .

    MAS             reduce using rule 106 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    MENOS           reduce using rule 106 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    POR             reduce using rule 106 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    DIVIDIDO        reduce using rule 106 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    MOD             reduce using rule 106 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    AS              reduce using rule 106 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    PT              reduce using rule 106 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    IGUAL           reduce using rule 106 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    MENOR           reduce using rule 106 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    MAYOR           reduce using rule 106 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    MEIGUAL         reduce using rule 106 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    MAIGUAL         reduce using rule 106 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    DIS             reduce using rule 106 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    LLAVEIZQ        reduce using rule 106 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    AND             reduce using rule 106 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    OR              reduce using rule 106 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    DPT             reduce using rule 106 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    PTCOMA          reduce using rule 106 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    PARDER          reduce using rule 106 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    COMA            reduce using rule 106 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    CORDER          reduce using rule 106 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    LLAVEDER        reduce using rule 106 (expresion -> expresion PT CLONE PARIZQ PARDER .)


state 257

    (107) expresion -> expresion PT LEN PARIZQ PARDER .

    MAS             reduce using rule 107 (expresion -> expresion PT LEN PARIZQ PARDER .)
    MENOS           reduce using rule 107 (expresion -> expresion PT LEN PARIZQ PARDER .)
    POR             reduce using rule 107 (expresion -> expresion PT LEN PARIZQ PARDER .)
    DIVIDIDO        reduce using rule 107 (expresion -> expresion PT LEN PARIZQ PARDER .)
    MOD             reduce using rule 107 (expresion -> expresion PT LEN PARIZQ PARDER .)
    AS              reduce using rule 107 (expresion -> expresion PT LEN PARIZQ PARDER .)
    PT              reduce using rule 107 (expresion -> expresion PT LEN PARIZQ PARDER .)
    IGUAL           reduce using rule 107 (expresion -> expresion PT LEN PARIZQ PARDER .)
    MENOR           reduce using rule 107 (expresion -> expresion PT LEN PARIZQ PARDER .)
    MAYOR           reduce using rule 107 (expresion -> expresion PT LEN PARIZQ PARDER .)
    MEIGUAL         reduce using rule 107 (expresion -> expresion PT LEN PARIZQ PARDER .)
    MAIGUAL         reduce using rule 107 (expresion -> expresion PT LEN PARIZQ PARDER .)
    DIS             reduce using rule 107 (expresion -> expresion PT LEN PARIZQ PARDER .)
    LLAVEIZQ        reduce using rule 107 (expresion -> expresion PT LEN PARIZQ PARDER .)
    AND             reduce using rule 107 (expresion -> expresion PT LEN PARIZQ PARDER .)
    OR              reduce using rule 107 (expresion -> expresion PT LEN PARIZQ PARDER .)
    DPT             reduce using rule 107 (expresion -> expresion PT LEN PARIZQ PARDER .)
    PTCOMA          reduce using rule 107 (expresion -> expresion PT LEN PARIZQ PARDER .)
    PARDER          reduce using rule 107 (expresion -> expresion PT LEN PARIZQ PARDER .)
    COMA            reduce using rule 107 (expresion -> expresion PT LEN PARIZQ PARDER .)
    CORDER          reduce using rule 107 (expresion -> expresion PT LEN PARIZQ PARDER .)
    LLAVEDER        reduce using rule 107 (expresion -> expresion PT LEN PARIZQ PARDER .)


state 258

    (108) expresion -> expresion PT TOOWNED PARIZQ PARDER .

    MAS             reduce using rule 108 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    MENOS           reduce using rule 108 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    POR             reduce using rule 108 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    DIVIDIDO        reduce using rule 108 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    MOD             reduce using rule 108 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    AS              reduce using rule 108 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    PT              reduce using rule 108 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    IGUAL           reduce using rule 108 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    MENOR           reduce using rule 108 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    MAYOR           reduce using rule 108 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    MEIGUAL         reduce using rule 108 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    MAIGUAL         reduce using rule 108 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    DIS             reduce using rule 108 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    LLAVEIZQ        reduce using rule 108 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    AND             reduce using rule 108 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    OR              reduce using rule 108 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    DPT             reduce using rule 108 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    PTCOMA          reduce using rule 108 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    PARDER          reduce using rule 108 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    COMA            reduce using rule 108 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    CORDER          reduce using rule 108 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    LLAVEDER        reduce using rule 108 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)


state 259

    (100) expresion -> POW PARIZQ ENTERO COMA ENTERO . PARDER

    PARDER          shift and go to state 275


state 260

    (101) expresion -> POWF PARIZQ DECIMAL COMA DECIMAL . PARDER

    PARDER          shift and go to state 276


state 261

    (27) instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones . LLAVEDER

    LLAVEDER        shift and go to state 277


state 262

    (42) opcionfor -> ENTERO PT PT . logica
    (47) logica -> . logica AND logica
    (48) logica -> . logica OR logica
    (49) logica -> . NOT logica
    (50) logica -> . rel
    (51) rel -> . rel IGUAL IGUAL rel
    (52) rel -> . rel MENOR rel
    (53) rel -> . rel MAYOR rel
    (54) rel -> . rel MEIGUAL rel
    (55) rel -> . rel MAIGUAL rel
    (56) rel -> . rel DIS rel
    (57) rel -> . expresion
    (78) expresion -> . expresion MAS expresion
    (79) expresion -> . expresion MENOS expresion
    (80) expresion -> . expresion POR expresion
    (81) expresion -> . expresion DIVIDIDO expresion
    (82) expresion -> . expresion MOD expresion
    (83) expresion -> . expresion AS tipos
    (84) expresion -> . instrif
    (85) expresion -> . MENOS expresion
    (86) expresion -> . PARIZQ logica PARDER
    (87) expresion -> . ENTERO
    (88) expresion -> . DECIMAL
    (89) expresion -> . FORM
    (90) expresion -> . TRUE
    (91) expresion -> . FALSE
    (92) expresion -> . VECM NOT listarreglo
    (93) expresion -> . ID listarreglo
    (94) expresion -> . ID PARIZQ listexpr PARDER
    (95) expresion -> . listarreglo
    (96) expresion -> . CHARE
    (97) expresion -> . opcionpow DPT DPT expresion
    (100) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (101) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (102) expresion -> . instrloop
    (103) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (104) expresion -> . expresion PT SQRT PARIZQ PARDER
    (105) expresion -> . expresion PT ABS PARIZQ PARDER
    (106) expresion -> . expresion PT CLONE PARIZQ PARDER
    (107) expresion -> . expresion PT LEN PARIZQ PARDER
    (108) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (37) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (109) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (110) listarreglo -> . empty
    (98) opcionpow -> . expresion
    (99) opcionpow -> . tipos
    (36) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (113) empty -> .
    (71) tipos -> . I64
    (72) tipos -> . F64
    (73) tipos -> . BOOL
    (74) tipos -> . CHAR
    (75) tipos -> . STRING
    (76) tipos -> . AMP STR
    (77) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    NOT             shift and go to state 84
    MENOS           shift and go to state 87
    PARIZQ          shift and go to state 90
    ENTERO          shift and go to state 91
    DECIMAL         shift and go to state 92
    FORM            shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    VECM            shift and go to state 96
    ID              shift and go to state 98
    CHARE           shift and go to state 99
    POW             shift and go to state 101
    POWF            shift and go to state 102
    IF              shift and go to state 82
    LOOP            shift and go to state 104
    CORIZQ          reduce using rule 113 (empty -> .)
    MAS             reduce using rule 113 (empty -> .)
    POR             reduce using rule 113 (empty -> .)
    DIVIDIDO        reduce using rule 113 (empty -> .)
    MOD             reduce using rule 113 (empty -> .)
    AS              reduce using rule 113 (empty -> .)
    PT              reduce using rule 113 (empty -> .)
    IGUAL           reduce using rule 113 (empty -> .)
    MENOR           reduce using rule 113 (empty -> .)
    MAYOR           reduce using rule 113 (empty -> .)
    MEIGUAL         reduce using rule 113 (empty -> .)
    MAIGUAL         reduce using rule 113 (empty -> .)
    DIS             reduce using rule 113 (empty -> .)
    AND             reduce using rule 113 (empty -> .)
    OR              reduce using rule 113 (empty -> .)
    LLAVEIZQ        reduce using rule 113 (empty -> .)
    DPT             reduce using rule 113 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 113 (empty -> .) ]

    logica                         shift and go to state 278
    rel                            shift and go to state 85
    expresion                      shift and go to state 86
    tipos                          shift and go to state 88
    instrif                        shift and go to state 89
    listarreglo                    shift and go to state 97
    opcionpow                      shift and go to state 100
    instrloop                      shift and go to state 103
    empty                          shift and go to state 80

state 263

    (19) instruccion -> LET mutable ID pyc arrtipos IGUAL logica . PTCOMA
    (47) logica -> logica . AND logica
    (48) logica -> logica . OR logica

    PTCOMA          shift and go to state 279
    AND             shift and go to state 126
    OR              shift and go to state 127


state 264

    (68) arreglos -> CORIZQ arreglos PTCOMA . ENTERO CORDER

    ENTERO          shift and go to state 280


state 265

    (23) instruccion -> IF logica LLAVEIZQ . instrucciones LLAVEDER unelse
    (37) instrif -> IF logica LLAVEIZQ . instruccionesexp LLAVEDER instrelse
    (17) instrucciones -> . instruccion instrucciones
    (18) instrucciones -> . instruccion
    (31) instruccionesexp -> . instruccion instruccionesexpfin
    (32) instruccionesexp -> . instruccionesexpfin
    (19) instruccion -> . LET mutable ID pyc arrtipos IGUAL logica PTCOMA
    (20) instruccion -> . ID listarreglo IGUAL logica PTCOMA
    (21) instruccion -> . ID PARIZQ listexpr PARDER PTCOMA
    (22) instruccion -> . PRINT NOT PARIZQ listexpr PARDER PTCOMA
    (23) instruccion -> . IF logica LLAVEIZQ instrucciones LLAVEDER unelse
    (24) instruccion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (25) instruccion -> . RETURN logica PTCOMA
    (26) instruccion -> . WHILE logica LLAVEIZQ instrucciones LLAVEDER
    (27) instruccion -> . FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER
    (28) instruccion -> . BREAK PTCOMA
    (29) instruccion -> . CONTINUE PTCOMA
    (30) instruccion -> . BREAK logica PTCOMA
    (33) instruccionesexpfin -> . instruccionesexp
    (34) instruccionesexpfin -> . expresion
    (35) instruccionesexpfin -> .
    (78) expresion -> . expresion MAS expresion
    (79) expresion -> . expresion MENOS expresion
    (80) expresion -> . expresion POR expresion
    (81) expresion -> . expresion DIVIDIDO expresion
    (82) expresion -> . expresion MOD expresion
    (83) expresion -> . expresion AS tipos
    (84) expresion -> . instrif
    (85) expresion -> . MENOS expresion
    (86) expresion -> . PARIZQ logica PARDER
    (87) expresion -> . ENTERO
    (88) expresion -> . DECIMAL
    (89) expresion -> . FORM
    (90) expresion -> . TRUE
    (91) expresion -> . FALSE
    (92) expresion -> . VECM NOT listarreglo
    (93) expresion -> . ID listarreglo
    (94) expresion -> . ID PARIZQ listexpr PARDER
    (95) expresion -> . listarreglo
    (96) expresion -> . CHARE
    (97) expresion -> . opcionpow DPT DPT expresion
    (100) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (101) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (102) expresion -> . instrloop
    (103) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (104) expresion -> . expresion PT SQRT PARIZQ PARDER
    (105) expresion -> . expresion PT ABS PARIZQ PARDER
    (106) expresion -> . expresion PT CLONE PARIZQ PARDER
    (107) expresion -> . expresion PT LEN PARIZQ PARDER
    (108) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (37) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (109) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (110) listarreglo -> . empty
    (98) opcionpow -> . expresion
    (99) opcionpow -> . tipos
    (36) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (113) empty -> .
    (71) tipos -> . I64
    (72) tipos -> . F64
    (73) tipos -> . BOOL
    (74) tipos -> . CHAR
    (75) tipos -> . STRING
    (76) tipos -> . AMP STR
    (77) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
  ! reduce/reduce conflict for LLAVEDER resolved using rule 35 (instruccionesexpfin -> .)
    LET             shift and go to state 51
    ID              shift and go to state 219
    PRINT           shift and go to state 53
    IF              shift and go to state 215
    LOOP            shift and go to state 220
    RETURN          shift and go to state 56
    WHILE           shift and go to state 57
    FOR             shift and go to state 58
    BREAK           shift and go to state 59
    CONTINUE        shift and go to state 60
    LLAVEDER        reduce using rule 35 (instruccionesexpfin -> .)
    MENOS           shift and go to state 87
    PARIZQ          shift and go to state 90
    ENTERO          shift and go to state 91
    DECIMAL         shift and go to state 92
    FORM            shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    VECM            shift and go to state 96
    CHARE           shift and go to state 99
    POW             shift and go to state 101
    POWF            shift and go to state 102
    CORIZQ          reduce using rule 113 (empty -> .)
    MAS             reduce using rule 113 (empty -> .)
    POR             reduce using rule 113 (empty -> .)
    DIVIDIDO        reduce using rule 113 (empty -> .)
    MOD             reduce using rule 113 (empty -> .)
    AS              reduce using rule 113 (empty -> .)
    PT              reduce using rule 113 (empty -> .)
    DPT             reduce using rule 113 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 113 (empty -> .) ]
  ! LLAVEDER        [ reduce using rule 113 (empty -> .) ]

    instrucciones                  shift and go to state 169
    instruccionesexp               shift and go to state 216
    instruccion                    shift and go to state 281
    instruccionesexpfin            shift and go to state 218
    listarreglo                    shift and go to state 97
    expresion                      shift and go to state 221
    tipos                          shift and go to state 88
    instrif                        shift and go to state 89
    opcionpow                      shift and go to state 100
    instrloop                      shift and go to state 103
    empty                          shift and go to state 80

state 266

    (37) instrif -> IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .

    MAS             reduce using rule 37 (instrif -> IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    MENOS           reduce using rule 37 (instrif -> IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    POR             reduce using rule 37 (instrif -> IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    DIVIDIDO        reduce using rule 37 (instrif -> IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    MOD             reduce using rule 37 (instrif -> IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    AS              reduce using rule 37 (instrif -> IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    PT              reduce using rule 37 (instrif -> IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    IGUAL           reduce using rule 37 (instrif -> IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    MENOR           reduce using rule 37 (instrif -> IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    MAYOR           reduce using rule 37 (instrif -> IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    MEIGUAL         reduce using rule 37 (instrif -> IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    MAIGUAL         reduce using rule 37 (instrif -> IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    DIS             reduce using rule 37 (instrif -> IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    LLAVEIZQ        reduce using rule 37 (instrif -> IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    AND             reduce using rule 37 (instrif -> IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    OR              reduce using rule 37 (instrif -> IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    DPT             reduce using rule 37 (instrif -> IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    PTCOMA          reduce using rule 37 (instrif -> IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    PARDER          reduce using rule 37 (instrif -> IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    COMA            reduce using rule 37 (instrif -> IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    CORDER          reduce using rule 37 (instrif -> IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    LLAVEDER        reduce using rule 37 (instrif -> IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)


state 267

    (38) instrelse -> ELSE . LLAVEIZQ instruccionesexp LLAVEDER
    (39) instrelse -> ELSE . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse

    LLAVEIZQ        shift and go to state 282
    IF              shift and go to state 283


state 268

    (40) instrelse -> empty .

    MAS             reduce using rule 40 (instrelse -> empty .)
    MENOS           reduce using rule 40 (instrelse -> empty .)
    POR             reduce using rule 40 (instrelse -> empty .)
    DIVIDIDO        reduce using rule 40 (instrelse -> empty .)
    MOD             reduce using rule 40 (instrelse -> empty .)
    AS              reduce using rule 40 (instrelse -> empty .)
    PT              reduce using rule 40 (instrelse -> empty .)
    IGUAL           reduce using rule 40 (instrelse -> empty .)
    MENOR           reduce using rule 40 (instrelse -> empty .)
    MAYOR           reduce using rule 40 (instrelse -> empty .)
    MEIGUAL         reduce using rule 40 (instrelse -> empty .)
    MAIGUAL         reduce using rule 40 (instrelse -> empty .)
    DIS             reduce using rule 40 (instrelse -> empty .)
    LLAVEIZQ        reduce using rule 40 (instrelse -> empty .)
    AND             reduce using rule 40 (instrelse -> empty .)
    OR              reduce using rule 40 (instrelse -> empty .)
    DPT             reduce using rule 40 (instrelse -> empty .)
    PTCOMA          reduce using rule 40 (instrelse -> empty .)
    PARDER          reduce using rule 40 (instrelse -> empty .)
    COMA            reduce using rule 40 (instrelse -> empty .)
    CORDER          reduce using rule 40 (instrelse -> empty .)
    LLAVEDER        reduce using rule 40 (instrelse -> empty .)


state 269

    (93) expresion -> ID listarreglo .
    (20) instruccion -> ID listarreglo . IGUAL logica PTCOMA
    (109) listarreglo -> listarreglo . CORIZQ listexpr CORDER

    MAS             reduce using rule 93 (expresion -> ID listarreglo .)
    MENOS           reduce using rule 93 (expresion -> ID listarreglo .)
    POR             reduce using rule 93 (expresion -> ID listarreglo .)
    DIVIDIDO        reduce using rule 93 (expresion -> ID listarreglo .)
    MOD             reduce using rule 93 (expresion -> ID listarreglo .)
    AS              reduce using rule 93 (expresion -> ID listarreglo .)
    PT              reduce using rule 93 (expresion -> ID listarreglo .)
    LLAVEDER        reduce using rule 93 (expresion -> ID listarreglo .)
    DPT             reduce using rule 93 (expresion -> ID listarreglo .)
    IGUAL           shift and go to state 119
    CORIZQ          shift and go to state 120


state 270

    (94) expresion -> ID PARIZQ . listexpr PARDER
    (21) instruccion -> ID PARIZQ . listexpr PARDER PTCOMA
    (111) listexpr -> . listexpr COMA expresion
    (112) listexpr -> . expresion
    (78) expresion -> . expresion MAS expresion
    (79) expresion -> . expresion MENOS expresion
    (80) expresion -> . expresion POR expresion
    (81) expresion -> . expresion DIVIDIDO expresion
    (82) expresion -> . expresion MOD expresion
    (83) expresion -> . expresion AS tipos
    (84) expresion -> . instrif
    (85) expresion -> . MENOS expresion
    (86) expresion -> . PARIZQ logica PARDER
    (87) expresion -> . ENTERO
    (88) expresion -> . DECIMAL
    (89) expresion -> . FORM
    (90) expresion -> . TRUE
    (91) expresion -> . FALSE
    (92) expresion -> . VECM NOT listarreglo
    (93) expresion -> . ID listarreglo
    (94) expresion -> . ID PARIZQ listexpr PARDER
    (95) expresion -> . listarreglo
    (96) expresion -> . CHARE
    (97) expresion -> . opcionpow DPT DPT expresion
    (100) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (101) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (102) expresion -> . instrloop
    (103) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (104) expresion -> . expresion PT SQRT PARIZQ PARDER
    (105) expresion -> . expresion PT ABS PARIZQ PARDER
    (106) expresion -> . expresion PT CLONE PARIZQ PARDER
    (107) expresion -> . expresion PT LEN PARIZQ PARDER
    (108) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (37) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (109) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (110) listarreglo -> . empty
    (98) opcionpow -> . expresion
    (99) opcionpow -> . tipos
    (36) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (113) empty -> .
    (71) tipos -> . I64
    (72) tipos -> . F64
    (73) tipos -> . BOOL
    (74) tipos -> . CHAR
    (75) tipos -> . STRING
    (76) tipos -> . AMP STR
    (77) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    MENOS           shift and go to state 87
    PARIZQ          shift and go to state 90
    ENTERO          shift and go to state 91
    DECIMAL         shift and go to state 92
    FORM            shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    VECM            shift and go to state 96
    ID              shift and go to state 98
    CHARE           shift and go to state 99
    POW             shift and go to state 101
    POWF            shift and go to state 102
    IF              shift and go to state 82
    LOOP            shift and go to state 104
    CORIZQ          reduce using rule 113 (empty -> .)
    MAS             reduce using rule 113 (empty -> .)
    POR             reduce using rule 113 (empty -> .)
    DIVIDIDO        reduce using rule 113 (empty -> .)
    MOD             reduce using rule 113 (empty -> .)
    AS              reduce using rule 113 (empty -> .)
    PT              reduce using rule 113 (empty -> .)
    PARDER          reduce using rule 113 (empty -> .)
    COMA            reduce using rule 113 (empty -> .)
    DPT             reduce using rule 113 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 113 (empty -> .) ]

    listexpr                       shift and go to state 284
    expresion                      shift and go to state 122
    tipos                          shift and go to state 88
    instrif                        shift and go to state 89
    listarreglo                    shift and go to state 97
    opcionpow                      shift and go to state 100
    instrloop                      shift and go to state 103
    empty                          shift and go to state 80

state 271

    (21) instruccion -> ID PARIZQ listexpr . PARDER PTCOMA
    (94) expresion -> ID PARIZQ listexpr . PARDER
    (111) listexpr -> listexpr . COMA expresion

    PARDER          shift and go to state 285
    COMA            shift and go to state 166


state 272

    (24) instruccion -> LOOP LLAVEIZQ instrucciones . LLAVEDER
    (36) instrloop -> LOOP LLAVEIZQ instrucciones . LLAVEDER

    LLAVEDER        shift and go to state 286


state 273

    (44) unelse -> ELSE LLAVEIZQ . instrucciones LLAVEDER
    (17) instrucciones -> . instruccion instrucciones
    (18) instrucciones -> . instruccion
    (19) instruccion -> . LET mutable ID pyc arrtipos IGUAL logica PTCOMA
    (20) instruccion -> . ID listarreglo IGUAL logica PTCOMA
    (21) instruccion -> . ID PARIZQ listexpr PARDER PTCOMA
    (22) instruccion -> . PRINT NOT PARIZQ listexpr PARDER PTCOMA
    (23) instruccion -> . IF logica LLAVEIZQ instrucciones LLAVEDER unelse
    (24) instruccion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (25) instruccion -> . RETURN logica PTCOMA
    (26) instruccion -> . WHILE logica LLAVEIZQ instrucciones LLAVEDER
    (27) instruccion -> . FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER
    (28) instruccion -> . BREAK PTCOMA
    (29) instruccion -> . CONTINUE PTCOMA
    (30) instruccion -> . BREAK logica PTCOMA

    LET             shift and go to state 51
    ID              shift and go to state 52
    PRINT           shift and go to state 53
    IF              shift and go to state 54
    LOOP            shift and go to state 55
    RETURN          shift and go to state 56
    WHILE           shift and go to state 57
    FOR             shift and go to state 58
    BREAK           shift and go to state 59
    CONTINUE        shift and go to state 60

    instrucciones                  shift and go to state 287
    instruccion                    shift and go to state 50

state 274

    (45) unelse -> ELSE IF . logica LLAVEIZQ instrucciones LLAVEDER unelse
    (47) logica -> . logica AND logica
    (48) logica -> . logica OR logica
    (49) logica -> . NOT logica
    (50) logica -> . rel
    (51) rel -> . rel IGUAL IGUAL rel
    (52) rel -> . rel MENOR rel
    (53) rel -> . rel MAYOR rel
    (54) rel -> . rel MEIGUAL rel
    (55) rel -> . rel MAIGUAL rel
    (56) rel -> . rel DIS rel
    (57) rel -> . expresion
    (78) expresion -> . expresion MAS expresion
    (79) expresion -> . expresion MENOS expresion
    (80) expresion -> . expresion POR expresion
    (81) expresion -> . expresion DIVIDIDO expresion
    (82) expresion -> . expresion MOD expresion
    (83) expresion -> . expresion AS tipos
    (84) expresion -> . instrif
    (85) expresion -> . MENOS expresion
    (86) expresion -> . PARIZQ logica PARDER
    (87) expresion -> . ENTERO
    (88) expresion -> . DECIMAL
    (89) expresion -> . FORM
    (90) expresion -> . TRUE
    (91) expresion -> . FALSE
    (92) expresion -> . VECM NOT listarreglo
    (93) expresion -> . ID listarreglo
    (94) expresion -> . ID PARIZQ listexpr PARDER
    (95) expresion -> . listarreglo
    (96) expresion -> . CHARE
    (97) expresion -> . opcionpow DPT DPT expresion
    (100) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (101) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (102) expresion -> . instrloop
    (103) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (104) expresion -> . expresion PT SQRT PARIZQ PARDER
    (105) expresion -> . expresion PT ABS PARIZQ PARDER
    (106) expresion -> . expresion PT CLONE PARIZQ PARDER
    (107) expresion -> . expresion PT LEN PARIZQ PARDER
    (108) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (37) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (109) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (110) listarreglo -> . empty
    (98) opcionpow -> . expresion
    (99) opcionpow -> . tipos
    (36) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (113) empty -> .
    (71) tipos -> . I64
    (72) tipos -> . F64
    (73) tipos -> . BOOL
    (74) tipos -> . CHAR
    (75) tipos -> . STRING
    (76) tipos -> . AMP STR
    (77) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    NOT             shift and go to state 84
    MENOS           shift and go to state 87
    PARIZQ          shift and go to state 90
    ENTERO          shift and go to state 91
    DECIMAL         shift and go to state 92
    FORM            shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    VECM            shift and go to state 96
    ID              shift and go to state 98
    CHARE           shift and go to state 99
    POW             shift and go to state 101
    POWF            shift and go to state 102
    IF              shift and go to state 82
    LOOP            shift and go to state 104
    CORIZQ          reduce using rule 113 (empty -> .)
    MAS             reduce using rule 113 (empty -> .)
    POR             reduce using rule 113 (empty -> .)
    DIVIDIDO        reduce using rule 113 (empty -> .)
    MOD             reduce using rule 113 (empty -> .)
    AS              reduce using rule 113 (empty -> .)
    PT              reduce using rule 113 (empty -> .)
    IGUAL           reduce using rule 113 (empty -> .)
    MENOR           reduce using rule 113 (empty -> .)
    MAYOR           reduce using rule 113 (empty -> .)
    MEIGUAL         reduce using rule 113 (empty -> .)
    MAIGUAL         reduce using rule 113 (empty -> .)
    DIS             reduce using rule 113 (empty -> .)
    LLAVEIZQ        reduce using rule 113 (empty -> .)
    AND             reduce using rule 113 (empty -> .)
    OR              reduce using rule 113 (empty -> .)
    DPT             reduce using rule 113 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 113 (empty -> .) ]

    logica                         shift and go to state 288
    rel                            shift and go to state 85
    expresion                      shift and go to state 86
    tipos                          shift and go to state 88
    instrif                        shift and go to state 89
    listarreglo                    shift and go to state 97
    opcionpow                      shift and go to state 100
    instrloop                      shift and go to state 103
    empty                          shift and go to state 80

state 275

    (100) expresion -> POW PARIZQ ENTERO COMA ENTERO PARDER .

    MAS             reduce using rule 100 (expresion -> POW PARIZQ ENTERO COMA ENTERO PARDER .)
    MENOS           reduce using rule 100 (expresion -> POW PARIZQ ENTERO COMA ENTERO PARDER .)
    POR             reduce using rule 100 (expresion -> POW PARIZQ ENTERO COMA ENTERO PARDER .)
    DIVIDIDO        reduce using rule 100 (expresion -> POW PARIZQ ENTERO COMA ENTERO PARDER .)
    MOD             reduce using rule 100 (expresion -> POW PARIZQ ENTERO COMA ENTERO PARDER .)
    AS              reduce using rule 100 (expresion -> POW PARIZQ ENTERO COMA ENTERO PARDER .)
    PT              reduce using rule 100 (expresion -> POW PARIZQ ENTERO COMA ENTERO PARDER .)
    IGUAL           reduce using rule 100 (expresion -> POW PARIZQ ENTERO COMA ENTERO PARDER .)
    MENOR           reduce using rule 100 (expresion -> POW PARIZQ ENTERO COMA ENTERO PARDER .)
    MAYOR           reduce using rule 100 (expresion -> POW PARIZQ ENTERO COMA ENTERO PARDER .)
    MEIGUAL         reduce using rule 100 (expresion -> POW PARIZQ ENTERO COMA ENTERO PARDER .)
    MAIGUAL         reduce using rule 100 (expresion -> POW PARIZQ ENTERO COMA ENTERO PARDER .)
    DIS             reduce using rule 100 (expresion -> POW PARIZQ ENTERO COMA ENTERO PARDER .)
    LLAVEIZQ        reduce using rule 100 (expresion -> POW PARIZQ ENTERO COMA ENTERO PARDER .)
    AND             reduce using rule 100 (expresion -> POW PARIZQ ENTERO COMA ENTERO PARDER .)
    OR              reduce using rule 100 (expresion -> POW PARIZQ ENTERO COMA ENTERO PARDER .)
    DPT             reduce using rule 100 (expresion -> POW PARIZQ ENTERO COMA ENTERO PARDER .)
    PTCOMA          reduce using rule 100 (expresion -> POW PARIZQ ENTERO COMA ENTERO PARDER .)
    PARDER          reduce using rule 100 (expresion -> POW PARIZQ ENTERO COMA ENTERO PARDER .)
    COMA            reduce using rule 100 (expresion -> POW PARIZQ ENTERO COMA ENTERO PARDER .)
    CORDER          reduce using rule 100 (expresion -> POW PARIZQ ENTERO COMA ENTERO PARDER .)
    LLAVEDER        reduce using rule 100 (expresion -> POW PARIZQ ENTERO COMA ENTERO PARDER .)


state 276

    (101) expresion -> POWF PARIZQ DECIMAL COMA DECIMAL PARDER .

    MAS             reduce using rule 101 (expresion -> POWF PARIZQ DECIMAL COMA DECIMAL PARDER .)
    MENOS           reduce using rule 101 (expresion -> POWF PARIZQ DECIMAL COMA DECIMAL PARDER .)
    POR             reduce using rule 101 (expresion -> POWF PARIZQ DECIMAL COMA DECIMAL PARDER .)
    DIVIDIDO        reduce using rule 101 (expresion -> POWF PARIZQ DECIMAL COMA DECIMAL PARDER .)
    MOD             reduce using rule 101 (expresion -> POWF PARIZQ DECIMAL COMA DECIMAL PARDER .)
    AS              reduce using rule 101 (expresion -> POWF PARIZQ DECIMAL COMA DECIMAL PARDER .)
    PT              reduce using rule 101 (expresion -> POWF PARIZQ DECIMAL COMA DECIMAL PARDER .)
    IGUAL           reduce using rule 101 (expresion -> POWF PARIZQ DECIMAL COMA DECIMAL PARDER .)
    MENOR           reduce using rule 101 (expresion -> POWF PARIZQ DECIMAL COMA DECIMAL PARDER .)
    MAYOR           reduce using rule 101 (expresion -> POWF PARIZQ DECIMAL COMA DECIMAL PARDER .)
    MEIGUAL         reduce using rule 101 (expresion -> POWF PARIZQ DECIMAL COMA DECIMAL PARDER .)
    MAIGUAL         reduce using rule 101 (expresion -> POWF PARIZQ DECIMAL COMA DECIMAL PARDER .)
    DIS             reduce using rule 101 (expresion -> POWF PARIZQ DECIMAL COMA DECIMAL PARDER .)
    LLAVEIZQ        reduce using rule 101 (expresion -> POWF PARIZQ DECIMAL COMA DECIMAL PARDER .)
    AND             reduce using rule 101 (expresion -> POWF PARIZQ DECIMAL COMA DECIMAL PARDER .)
    OR              reduce using rule 101 (expresion -> POWF PARIZQ DECIMAL COMA DECIMAL PARDER .)
    DPT             reduce using rule 101 (expresion -> POWF PARIZQ DECIMAL COMA DECIMAL PARDER .)
    PTCOMA          reduce using rule 101 (expresion -> POWF PARIZQ DECIMAL COMA DECIMAL PARDER .)
    PARDER          reduce using rule 101 (expresion -> POWF PARIZQ DECIMAL COMA DECIMAL PARDER .)
    COMA            reduce using rule 101 (expresion -> POWF PARIZQ DECIMAL COMA DECIMAL PARDER .)
    CORDER          reduce using rule 101 (expresion -> POWF PARIZQ DECIMAL COMA DECIMAL PARDER .)
    LLAVEDER        reduce using rule 101 (expresion -> POWF PARIZQ DECIMAL COMA DECIMAL PARDER .)


state 277

    (27) instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .

    LET             reduce using rule 27 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    ID              reduce using rule 27 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    PRINT           reduce using rule 27 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    IF              reduce using rule 27 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    LOOP            reduce using rule 27 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    RETURN          reduce using rule 27 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    WHILE           reduce using rule 27 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    FOR             reduce using rule 27 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    BREAK           reduce using rule 27 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    CONTINUE        reduce using rule 27 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    LLAVEDER        reduce using rule 27 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    MENOS           reduce using rule 27 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    PARIZQ          reduce using rule 27 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    ENTERO          reduce using rule 27 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    DECIMAL         reduce using rule 27 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    FORM            reduce using rule 27 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    TRUE            reduce using rule 27 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    FALSE           reduce using rule 27 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    VECM            reduce using rule 27 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    CHARE           reduce using rule 27 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    POW             reduce using rule 27 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    POWF            reduce using rule 27 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    I64             reduce using rule 27 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    F64             reduce using rule 27 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    BOOL            reduce using rule 27 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    CHAR            reduce using rule 27 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    STRING          reduce using rule 27 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    AMP             reduce using rule 27 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    USIZE           reduce using rule 27 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    MAS             reduce using rule 27 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    POR             reduce using rule 27 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    DIVIDIDO        reduce using rule 27 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    MOD             reduce using rule 27 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    AS              reduce using rule 27 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    PT              reduce using rule 27 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    CORIZQ          reduce using rule 27 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    DPT             reduce using rule 27 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)


state 278

    (42) opcionfor -> ENTERO PT PT logica .
    (47) logica -> logica . AND logica
    (48) logica -> logica . OR logica

    LLAVEIZQ        reduce using rule 42 (opcionfor -> ENTERO PT PT logica .)
    AND             shift and go to state 126
    OR              shift and go to state 127


state 279

    (19) instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .

    LET             reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    ID              reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    PRINT           reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    IF              reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    LOOP            reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    RETURN          reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    WHILE           reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    FOR             reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    BREAK           reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    CONTINUE        reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    LLAVEDER        reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    MENOS           reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    PARIZQ          reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    ENTERO          reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    DECIMAL         reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    FORM            reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    TRUE            reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    FALSE           reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    VECM            reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    CHARE           reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    POW             reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    POWF            reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    I64             reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    F64             reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    BOOL            reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    CHAR            reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    STRING          reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    AMP             reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    USIZE           reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    MAS             reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    POR             reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    DIVIDIDO        reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    MOD             reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    AS              reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    PT              reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    CORIZQ          reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    DPT             reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)


state 280

    (68) arreglos -> CORIZQ arreglos PTCOMA ENTERO . CORDER

    CORDER          shift and go to state 289


state 281

    (17) instrucciones -> instruccion . instrucciones
    (18) instrucciones -> instruccion .
    (31) instruccionesexp -> instruccion . instruccionesexpfin
    (17) instrucciones -> . instruccion instrucciones
    (18) instrucciones -> . instruccion
    (33) instruccionesexpfin -> . instruccionesexp
    (34) instruccionesexpfin -> . expresion
    (35) instruccionesexpfin -> .
    (19) instruccion -> . LET mutable ID pyc arrtipos IGUAL logica PTCOMA
    (20) instruccion -> . ID listarreglo IGUAL logica PTCOMA
    (21) instruccion -> . ID PARIZQ listexpr PARDER PTCOMA
    (22) instruccion -> . PRINT NOT PARIZQ listexpr PARDER PTCOMA
    (23) instruccion -> . IF logica LLAVEIZQ instrucciones LLAVEDER unelse
    (24) instruccion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (25) instruccion -> . RETURN logica PTCOMA
    (26) instruccion -> . WHILE logica LLAVEIZQ instrucciones LLAVEDER
    (27) instruccion -> . FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER
    (28) instruccion -> . BREAK PTCOMA
    (29) instruccion -> . CONTINUE PTCOMA
    (30) instruccion -> . BREAK logica PTCOMA
    (31) instruccionesexp -> . instruccion instruccionesexpfin
    (32) instruccionesexp -> . instruccionesexpfin
    (78) expresion -> . expresion MAS expresion
    (79) expresion -> . expresion MENOS expresion
    (80) expresion -> . expresion POR expresion
    (81) expresion -> . expresion DIVIDIDO expresion
    (82) expresion -> . expresion MOD expresion
    (83) expresion -> . expresion AS tipos
    (84) expresion -> . instrif
    (85) expresion -> . MENOS expresion
    (86) expresion -> . PARIZQ logica PARDER
    (87) expresion -> . ENTERO
    (88) expresion -> . DECIMAL
    (89) expresion -> . FORM
    (90) expresion -> . TRUE
    (91) expresion -> . FALSE
    (92) expresion -> . VECM NOT listarreglo
    (93) expresion -> . ID listarreglo
    (94) expresion -> . ID PARIZQ listexpr PARDER
    (95) expresion -> . listarreglo
    (96) expresion -> . CHARE
    (97) expresion -> . opcionpow DPT DPT expresion
    (100) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (101) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (102) expresion -> . instrloop
    (103) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (104) expresion -> . expresion PT SQRT PARIZQ PARDER
    (105) expresion -> . expresion PT ABS PARIZQ PARDER
    (106) expresion -> . expresion PT CLONE PARIZQ PARDER
    (107) expresion -> . expresion PT LEN PARIZQ PARDER
    (108) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (37) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (109) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (110) listarreglo -> . empty
    (98) opcionpow -> . expresion
    (99) opcionpow -> . tipos
    (36) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (113) empty -> .
    (71) tipos -> . I64
    (72) tipos -> . F64
    (73) tipos -> . BOOL
    (74) tipos -> . CHAR
    (75) tipos -> . STRING
    (76) tipos -> . AMP STR
    (77) tipos -> . USIZE

  ! reduce/reduce conflict for LLAVEDER resolved using rule 18 (instrucciones -> instruccion .)
  ! shift/reduce conflict for MENOS resolved as shift
  ! reduce/reduce conflict for LLAVEDER resolved using rule 18 (instrucciones -> instruccion .)
    LLAVEDER        reduce using rule 18 (instrucciones -> instruccion .)
    LET             shift and go to state 51
    ID              shift and go to state 219
    PRINT           shift and go to state 53
    IF              shift and go to state 215
    LOOP            shift and go to state 220
    RETURN          shift and go to state 56
    WHILE           shift and go to state 57
    FOR             shift and go to state 58
    BREAK           shift and go to state 59
    CONTINUE        shift and go to state 60
    MENOS           shift and go to state 87
    PARIZQ          shift and go to state 90
    ENTERO          shift and go to state 91
    DECIMAL         shift and go to state 92
    FORM            shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    VECM            shift and go to state 96
    CHARE           shift and go to state 99
    POW             shift and go to state 101
    POWF            shift and go to state 102
    CORIZQ          reduce using rule 113 (empty -> .)
    MAS             reduce using rule 113 (empty -> .)
    POR             reduce using rule 113 (empty -> .)
    DIVIDIDO        reduce using rule 113 (empty -> .)
    MOD             reduce using rule 113 (empty -> .)
    AS              reduce using rule 113 (empty -> .)
    PT              reduce using rule 113 (empty -> .)
    DPT             reduce using rule 113 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! LLAVEDER        [ reduce using rule 35 (instruccionesexpfin -> .) ]
  ! MENOS           [ reduce using rule 113 (empty -> .) ]
  ! LLAVEDER        [ reduce using rule 113 (empty -> .) ]

    instruccion                    shift and go to state 281
    instrucciones                  shift and go to state 76
    instruccionesexpfin            shift and go to state 244
    instruccionesexp               shift and go to state 245
    expresion                      shift and go to state 221
    listarreglo                    shift and go to state 97
    tipos                          shift and go to state 88
    instrif                        shift and go to state 89
    opcionpow                      shift and go to state 100
    instrloop                      shift and go to state 103
    empty                          shift and go to state 80

state 282

    (38) instrelse -> ELSE LLAVEIZQ . instruccionesexp LLAVEDER
    (31) instruccionesexp -> . instruccion instruccionesexpfin
    (32) instruccionesexp -> . instruccionesexpfin
    (19) instruccion -> . LET mutable ID pyc arrtipos IGUAL logica PTCOMA
    (20) instruccion -> . ID listarreglo IGUAL logica PTCOMA
    (21) instruccion -> . ID PARIZQ listexpr PARDER PTCOMA
    (22) instruccion -> . PRINT NOT PARIZQ listexpr PARDER PTCOMA
    (23) instruccion -> . IF logica LLAVEIZQ instrucciones LLAVEDER unelse
    (24) instruccion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (25) instruccion -> . RETURN logica PTCOMA
    (26) instruccion -> . WHILE logica LLAVEIZQ instrucciones LLAVEDER
    (27) instruccion -> . FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER
    (28) instruccion -> . BREAK PTCOMA
    (29) instruccion -> . CONTINUE PTCOMA
    (30) instruccion -> . BREAK logica PTCOMA
    (33) instruccionesexpfin -> . instruccionesexp
    (34) instruccionesexpfin -> . expresion
    (35) instruccionesexpfin -> .
    (78) expresion -> . expresion MAS expresion
    (79) expresion -> . expresion MENOS expresion
    (80) expresion -> . expresion POR expresion
    (81) expresion -> . expresion DIVIDIDO expresion
    (82) expresion -> . expresion MOD expresion
    (83) expresion -> . expresion AS tipos
    (84) expresion -> . instrif
    (85) expresion -> . MENOS expresion
    (86) expresion -> . PARIZQ logica PARDER
    (87) expresion -> . ENTERO
    (88) expresion -> . DECIMAL
    (89) expresion -> . FORM
    (90) expresion -> . TRUE
    (91) expresion -> . FALSE
    (92) expresion -> . VECM NOT listarreglo
    (93) expresion -> . ID listarreglo
    (94) expresion -> . ID PARIZQ listexpr PARDER
    (95) expresion -> . listarreglo
    (96) expresion -> . CHARE
    (97) expresion -> . opcionpow DPT DPT expresion
    (100) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (101) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (102) expresion -> . instrloop
    (103) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (104) expresion -> . expresion PT SQRT PARIZQ PARDER
    (105) expresion -> . expresion PT ABS PARIZQ PARDER
    (106) expresion -> . expresion PT CLONE PARIZQ PARDER
    (107) expresion -> . expresion PT LEN PARIZQ PARDER
    (108) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (37) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (109) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (110) listarreglo -> . empty
    (98) opcionpow -> . expresion
    (99) opcionpow -> . tipos
    (36) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (113) empty -> .
    (71) tipos -> . I64
    (72) tipos -> . F64
    (73) tipos -> . BOOL
    (74) tipos -> . CHAR
    (75) tipos -> . STRING
    (76) tipos -> . AMP STR
    (77) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
  ! reduce/reduce conflict for LLAVEDER resolved using rule 35 (instruccionesexpfin -> .)
    LET             shift and go to state 51
    ID              shift and go to state 219
    PRINT           shift and go to state 53
    IF              shift and go to state 215
    LOOP            shift and go to state 220
    RETURN          shift and go to state 56
    WHILE           shift and go to state 57
    FOR             shift and go to state 58
    BREAK           shift and go to state 59
    CONTINUE        shift and go to state 60
    LLAVEDER        reduce using rule 35 (instruccionesexpfin -> .)
    MENOS           shift and go to state 87
    PARIZQ          shift and go to state 90
    ENTERO          shift and go to state 91
    DECIMAL         shift and go to state 92
    FORM            shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    VECM            shift and go to state 96
    CHARE           shift and go to state 99
    POW             shift and go to state 101
    POWF            shift and go to state 102
    CORIZQ          reduce using rule 113 (empty -> .)
    MAS             reduce using rule 113 (empty -> .)
    POR             reduce using rule 113 (empty -> .)
    DIVIDIDO        reduce using rule 113 (empty -> .)
    MOD             reduce using rule 113 (empty -> .)
    AS              reduce using rule 113 (empty -> .)
    PT              reduce using rule 113 (empty -> .)
    DPT             reduce using rule 113 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 113 (empty -> .) ]
  ! LLAVEDER        [ reduce using rule 113 (empty -> .) ]

    instruccionesexp               shift and go to state 290
    instruccion                    shift and go to state 217
    instruccionesexpfin            shift and go to state 218
    listarreglo                    shift and go to state 97
    expresion                      shift and go to state 221
    tipos                          shift and go to state 88
    instrif                        shift and go to state 89
    opcionpow                      shift and go to state 100
    instrloop                      shift and go to state 103
    empty                          shift and go to state 80

state 283

    (39) instrelse -> ELSE IF . logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (47) logica -> . logica AND logica
    (48) logica -> . logica OR logica
    (49) logica -> . NOT logica
    (50) logica -> . rel
    (51) rel -> . rel IGUAL IGUAL rel
    (52) rel -> . rel MENOR rel
    (53) rel -> . rel MAYOR rel
    (54) rel -> . rel MEIGUAL rel
    (55) rel -> . rel MAIGUAL rel
    (56) rel -> . rel DIS rel
    (57) rel -> . expresion
    (78) expresion -> . expresion MAS expresion
    (79) expresion -> . expresion MENOS expresion
    (80) expresion -> . expresion POR expresion
    (81) expresion -> . expresion DIVIDIDO expresion
    (82) expresion -> . expresion MOD expresion
    (83) expresion -> . expresion AS tipos
    (84) expresion -> . instrif
    (85) expresion -> . MENOS expresion
    (86) expresion -> . PARIZQ logica PARDER
    (87) expresion -> . ENTERO
    (88) expresion -> . DECIMAL
    (89) expresion -> . FORM
    (90) expresion -> . TRUE
    (91) expresion -> . FALSE
    (92) expresion -> . VECM NOT listarreglo
    (93) expresion -> . ID listarreglo
    (94) expresion -> . ID PARIZQ listexpr PARDER
    (95) expresion -> . listarreglo
    (96) expresion -> . CHARE
    (97) expresion -> . opcionpow DPT DPT expresion
    (100) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (101) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (102) expresion -> . instrloop
    (103) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (104) expresion -> . expresion PT SQRT PARIZQ PARDER
    (105) expresion -> . expresion PT ABS PARIZQ PARDER
    (106) expresion -> . expresion PT CLONE PARIZQ PARDER
    (107) expresion -> . expresion PT LEN PARIZQ PARDER
    (108) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (37) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (109) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (110) listarreglo -> . empty
    (98) opcionpow -> . expresion
    (99) opcionpow -> . tipos
    (36) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (113) empty -> .
    (71) tipos -> . I64
    (72) tipos -> . F64
    (73) tipos -> . BOOL
    (74) tipos -> . CHAR
    (75) tipos -> . STRING
    (76) tipos -> . AMP STR
    (77) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    NOT             shift and go to state 84
    MENOS           shift and go to state 87
    PARIZQ          shift and go to state 90
    ENTERO          shift and go to state 91
    DECIMAL         shift and go to state 92
    FORM            shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    VECM            shift and go to state 96
    ID              shift and go to state 98
    CHARE           shift and go to state 99
    POW             shift and go to state 101
    POWF            shift and go to state 102
    IF              shift and go to state 82
    LOOP            shift and go to state 104
    CORIZQ          reduce using rule 113 (empty -> .)
    MAS             reduce using rule 113 (empty -> .)
    POR             reduce using rule 113 (empty -> .)
    DIVIDIDO        reduce using rule 113 (empty -> .)
    MOD             reduce using rule 113 (empty -> .)
    AS              reduce using rule 113 (empty -> .)
    PT              reduce using rule 113 (empty -> .)
    IGUAL           reduce using rule 113 (empty -> .)
    MENOR           reduce using rule 113 (empty -> .)
    MAYOR           reduce using rule 113 (empty -> .)
    MEIGUAL         reduce using rule 113 (empty -> .)
    MAIGUAL         reduce using rule 113 (empty -> .)
    DIS             reduce using rule 113 (empty -> .)
    LLAVEIZQ        reduce using rule 113 (empty -> .)
    AND             reduce using rule 113 (empty -> .)
    OR              reduce using rule 113 (empty -> .)
    DPT             reduce using rule 113 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 113 (empty -> .) ]

    logica                         shift and go to state 291
    rel                            shift and go to state 85
    expresion                      shift and go to state 86
    tipos                          shift and go to state 88
    instrif                        shift and go to state 89
    listarreglo                    shift and go to state 97
    opcionpow                      shift and go to state 100
    instrloop                      shift and go to state 103
    empty                          shift and go to state 80

state 284

    (94) expresion -> ID PARIZQ listexpr . PARDER
    (21) instruccion -> ID PARIZQ listexpr . PARDER PTCOMA
    (111) listexpr -> listexpr . COMA expresion

    PARDER          shift and go to state 292
    COMA            shift and go to state 166


state 285

    (21) instruccion -> ID PARIZQ listexpr PARDER . PTCOMA
    (94) expresion -> ID PARIZQ listexpr PARDER .

    PTCOMA          shift and go to state 212
    MAS             reduce using rule 94 (expresion -> ID PARIZQ listexpr PARDER .)
    MENOS           reduce using rule 94 (expresion -> ID PARIZQ listexpr PARDER .)
    POR             reduce using rule 94 (expresion -> ID PARIZQ listexpr PARDER .)
    DIVIDIDO        reduce using rule 94 (expresion -> ID PARIZQ listexpr PARDER .)
    MOD             reduce using rule 94 (expresion -> ID PARIZQ listexpr PARDER .)
    AS              reduce using rule 94 (expresion -> ID PARIZQ listexpr PARDER .)
    PT              reduce using rule 94 (expresion -> ID PARIZQ listexpr PARDER .)
    LLAVEDER        reduce using rule 94 (expresion -> ID PARIZQ listexpr PARDER .)
    DPT             reduce using rule 94 (expresion -> ID PARIZQ listexpr PARDER .)


state 286

    (24) instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .
    (36) instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .

  ! reduce/reduce conflict for MAS resolved using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
  ! reduce/reduce conflict for MENOS resolved using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
  ! reduce/reduce conflict for POR resolved using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
  ! reduce/reduce conflict for DIVIDIDO resolved using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
  ! reduce/reduce conflict for MOD resolved using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
  ! reduce/reduce conflict for AS resolved using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
  ! reduce/reduce conflict for PT resolved using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
  ! reduce/reduce conflict for LLAVEDER resolved using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
  ! reduce/reduce conflict for DPT resolved using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    MENOS           reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    PARIZQ          reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    ENTERO          reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    DECIMAL         reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    FORM            reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    TRUE            reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    FALSE           reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    VECM            reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    ID              reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    CHARE           reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    POW             reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    POWF            reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    LET             reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    PRINT           reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    IF              reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    LOOP            reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    RETURN          reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    WHILE           reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    FOR             reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    BREAK           reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    CONTINUE        reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    I64             reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    F64             reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    BOOL            reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    CHAR            reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    STRING          reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    AMP             reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    USIZE           reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    MAS             reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    POR             reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    DIVIDIDO        reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    MOD             reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    AS              reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    PT              reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    CORIZQ          reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    DPT             reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    LLAVEDER        reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)

  ! MAS             [ reduce using rule 36 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .) ]
  ! MENOS           [ reduce using rule 36 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .) ]
  ! POR             [ reduce using rule 36 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .) ]
  ! DIVIDIDO        [ reduce using rule 36 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .) ]
  ! MOD             [ reduce using rule 36 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .) ]
  ! AS              [ reduce using rule 36 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .) ]
  ! PT              [ reduce using rule 36 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .) ]
  ! LLAVEDER        [ reduce using rule 36 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .) ]
  ! DPT             [ reduce using rule 36 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .) ]


state 287

    (44) unelse -> ELSE LLAVEIZQ instrucciones . LLAVEDER

    LLAVEDER        shift and go to state 293


state 288

    (45) unelse -> ELSE IF logica . LLAVEIZQ instrucciones LLAVEDER unelse
    (47) logica -> logica . AND logica
    (48) logica -> logica . OR logica

    LLAVEIZQ        shift and go to state 294
    AND             shift and go to state 126
    OR              shift and go to state 127


state 289

    (68) arreglos -> CORIZQ arreglos PTCOMA ENTERO CORDER .

    IGUAL           reduce using rule 68 (arreglos -> CORIZQ arreglos PTCOMA ENTERO CORDER .)
    PTCOMA          reduce using rule 68 (arreglos -> CORIZQ arreglos PTCOMA ENTERO CORDER .)


state 290

    (38) instrelse -> ELSE LLAVEIZQ instruccionesexp . LLAVEDER
    (33) instruccionesexpfin -> instruccionesexp .

  ! shift/reduce conflict for LLAVEDER resolved as shift
    LLAVEDER        shift and go to state 295

  ! LLAVEDER        [ reduce using rule 33 (instruccionesexpfin -> instruccionesexp .) ]


state 291

    (39) instrelse -> ELSE IF logica . LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (47) logica -> logica . AND logica
    (48) logica -> logica . OR logica

    LLAVEIZQ        shift and go to state 296
    AND             shift and go to state 126
    OR              shift and go to state 127


state 292

    (94) expresion -> ID PARIZQ listexpr PARDER .
    (21) instruccion -> ID PARIZQ listexpr PARDER . PTCOMA

    MAS             reduce using rule 94 (expresion -> ID PARIZQ listexpr PARDER .)
    MENOS           reduce using rule 94 (expresion -> ID PARIZQ listexpr PARDER .)
    POR             reduce using rule 94 (expresion -> ID PARIZQ listexpr PARDER .)
    DIVIDIDO        reduce using rule 94 (expresion -> ID PARIZQ listexpr PARDER .)
    MOD             reduce using rule 94 (expresion -> ID PARIZQ listexpr PARDER .)
    AS              reduce using rule 94 (expresion -> ID PARIZQ listexpr PARDER .)
    PT              reduce using rule 94 (expresion -> ID PARIZQ listexpr PARDER .)
    LLAVEDER        reduce using rule 94 (expresion -> ID PARIZQ listexpr PARDER .)
    DPT             reduce using rule 94 (expresion -> ID PARIZQ listexpr PARDER .)
    PTCOMA          shift and go to state 212


state 293

    (44) unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .

    LET             reduce using rule 44 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    ID              reduce using rule 44 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    PRINT           reduce using rule 44 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    IF              reduce using rule 44 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    LOOP            reduce using rule 44 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    RETURN          reduce using rule 44 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    WHILE           reduce using rule 44 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    FOR             reduce using rule 44 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    BREAK           reduce using rule 44 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    CONTINUE        reduce using rule 44 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    LLAVEDER        reduce using rule 44 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    MENOS           reduce using rule 44 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    PARIZQ          reduce using rule 44 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    ENTERO          reduce using rule 44 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    DECIMAL         reduce using rule 44 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    FORM            reduce using rule 44 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    TRUE            reduce using rule 44 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    FALSE           reduce using rule 44 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    VECM            reduce using rule 44 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    CHARE           reduce using rule 44 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    POW             reduce using rule 44 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    POWF            reduce using rule 44 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    I64             reduce using rule 44 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    F64             reduce using rule 44 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    BOOL            reduce using rule 44 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    CHAR            reduce using rule 44 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    STRING          reduce using rule 44 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    AMP             reduce using rule 44 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    USIZE           reduce using rule 44 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    MAS             reduce using rule 44 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    POR             reduce using rule 44 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    DIVIDIDO        reduce using rule 44 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    MOD             reduce using rule 44 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    AS              reduce using rule 44 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    PT              reduce using rule 44 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    CORIZQ          reduce using rule 44 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    DPT             reduce using rule 44 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)


state 294

    (45) unelse -> ELSE IF logica LLAVEIZQ . instrucciones LLAVEDER unelse
    (17) instrucciones -> . instruccion instrucciones
    (18) instrucciones -> . instruccion
    (19) instruccion -> . LET mutable ID pyc arrtipos IGUAL logica PTCOMA
    (20) instruccion -> . ID listarreglo IGUAL logica PTCOMA
    (21) instruccion -> . ID PARIZQ listexpr PARDER PTCOMA
    (22) instruccion -> . PRINT NOT PARIZQ listexpr PARDER PTCOMA
    (23) instruccion -> . IF logica LLAVEIZQ instrucciones LLAVEDER unelse
    (24) instruccion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (25) instruccion -> . RETURN logica PTCOMA
    (26) instruccion -> . WHILE logica LLAVEIZQ instrucciones LLAVEDER
    (27) instruccion -> . FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER
    (28) instruccion -> . BREAK PTCOMA
    (29) instruccion -> . CONTINUE PTCOMA
    (30) instruccion -> . BREAK logica PTCOMA

    LET             shift and go to state 51
    ID              shift and go to state 52
    PRINT           shift and go to state 53
    IF              shift and go to state 54
    LOOP            shift and go to state 55
    RETURN          shift and go to state 56
    WHILE           shift and go to state 57
    FOR             shift and go to state 58
    BREAK           shift and go to state 59
    CONTINUE        shift and go to state 60

    instrucciones                  shift and go to state 297
    instruccion                    shift and go to state 50

state 295

    (38) instrelse -> ELSE LLAVEIZQ instruccionesexp LLAVEDER .

    MAS             reduce using rule 38 (instrelse -> ELSE LLAVEIZQ instruccionesexp LLAVEDER .)
    MENOS           reduce using rule 38 (instrelse -> ELSE LLAVEIZQ instruccionesexp LLAVEDER .)
    POR             reduce using rule 38 (instrelse -> ELSE LLAVEIZQ instruccionesexp LLAVEDER .)
    DIVIDIDO        reduce using rule 38 (instrelse -> ELSE LLAVEIZQ instruccionesexp LLAVEDER .)
    MOD             reduce using rule 38 (instrelse -> ELSE LLAVEIZQ instruccionesexp LLAVEDER .)
    AS              reduce using rule 38 (instrelse -> ELSE LLAVEIZQ instruccionesexp LLAVEDER .)
    PT              reduce using rule 38 (instrelse -> ELSE LLAVEIZQ instruccionesexp LLAVEDER .)
    IGUAL           reduce using rule 38 (instrelse -> ELSE LLAVEIZQ instruccionesexp LLAVEDER .)
    MENOR           reduce using rule 38 (instrelse -> ELSE LLAVEIZQ instruccionesexp LLAVEDER .)
    MAYOR           reduce using rule 38 (instrelse -> ELSE LLAVEIZQ instruccionesexp LLAVEDER .)
    MEIGUAL         reduce using rule 38 (instrelse -> ELSE LLAVEIZQ instruccionesexp LLAVEDER .)
    MAIGUAL         reduce using rule 38 (instrelse -> ELSE LLAVEIZQ instruccionesexp LLAVEDER .)
    DIS             reduce using rule 38 (instrelse -> ELSE LLAVEIZQ instruccionesexp LLAVEDER .)
    LLAVEIZQ        reduce using rule 38 (instrelse -> ELSE LLAVEIZQ instruccionesexp LLAVEDER .)
    AND             reduce using rule 38 (instrelse -> ELSE LLAVEIZQ instruccionesexp LLAVEDER .)
    OR              reduce using rule 38 (instrelse -> ELSE LLAVEIZQ instruccionesexp LLAVEDER .)
    DPT             reduce using rule 38 (instrelse -> ELSE LLAVEIZQ instruccionesexp LLAVEDER .)
    PTCOMA          reduce using rule 38 (instrelse -> ELSE LLAVEIZQ instruccionesexp LLAVEDER .)
    PARDER          reduce using rule 38 (instrelse -> ELSE LLAVEIZQ instruccionesexp LLAVEDER .)
    COMA            reduce using rule 38 (instrelse -> ELSE LLAVEIZQ instruccionesexp LLAVEDER .)
    CORDER          reduce using rule 38 (instrelse -> ELSE LLAVEIZQ instruccionesexp LLAVEDER .)
    LLAVEDER        reduce using rule 38 (instrelse -> ELSE LLAVEIZQ instruccionesexp LLAVEDER .)


state 296

    (39) instrelse -> ELSE IF logica LLAVEIZQ . instruccionesexp LLAVEDER instrelse
    (31) instruccionesexp -> . instruccion instruccionesexpfin
    (32) instruccionesexp -> . instruccionesexpfin
    (19) instruccion -> . LET mutable ID pyc arrtipos IGUAL logica PTCOMA
    (20) instruccion -> . ID listarreglo IGUAL logica PTCOMA
    (21) instruccion -> . ID PARIZQ listexpr PARDER PTCOMA
    (22) instruccion -> . PRINT NOT PARIZQ listexpr PARDER PTCOMA
    (23) instruccion -> . IF logica LLAVEIZQ instrucciones LLAVEDER unelse
    (24) instruccion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (25) instruccion -> . RETURN logica PTCOMA
    (26) instruccion -> . WHILE logica LLAVEIZQ instrucciones LLAVEDER
    (27) instruccion -> . FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER
    (28) instruccion -> . BREAK PTCOMA
    (29) instruccion -> . CONTINUE PTCOMA
    (30) instruccion -> . BREAK logica PTCOMA
    (33) instruccionesexpfin -> . instruccionesexp
    (34) instruccionesexpfin -> . expresion
    (35) instruccionesexpfin -> .
    (78) expresion -> . expresion MAS expresion
    (79) expresion -> . expresion MENOS expresion
    (80) expresion -> . expresion POR expresion
    (81) expresion -> . expresion DIVIDIDO expresion
    (82) expresion -> . expresion MOD expresion
    (83) expresion -> . expresion AS tipos
    (84) expresion -> . instrif
    (85) expresion -> . MENOS expresion
    (86) expresion -> . PARIZQ logica PARDER
    (87) expresion -> . ENTERO
    (88) expresion -> . DECIMAL
    (89) expresion -> . FORM
    (90) expresion -> . TRUE
    (91) expresion -> . FALSE
    (92) expresion -> . VECM NOT listarreglo
    (93) expresion -> . ID listarreglo
    (94) expresion -> . ID PARIZQ listexpr PARDER
    (95) expresion -> . listarreglo
    (96) expresion -> . CHARE
    (97) expresion -> . opcionpow DPT DPT expresion
    (100) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (101) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (102) expresion -> . instrloop
    (103) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (104) expresion -> . expresion PT SQRT PARIZQ PARDER
    (105) expresion -> . expresion PT ABS PARIZQ PARDER
    (106) expresion -> . expresion PT CLONE PARIZQ PARDER
    (107) expresion -> . expresion PT LEN PARIZQ PARDER
    (108) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (37) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (109) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (110) listarreglo -> . empty
    (98) opcionpow -> . expresion
    (99) opcionpow -> . tipos
    (36) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (113) empty -> .
    (71) tipos -> . I64
    (72) tipos -> . F64
    (73) tipos -> . BOOL
    (74) tipos -> . CHAR
    (75) tipos -> . STRING
    (76) tipos -> . AMP STR
    (77) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
  ! reduce/reduce conflict for LLAVEDER resolved using rule 35 (instruccionesexpfin -> .)
    LET             shift and go to state 51
    ID              shift and go to state 219
    PRINT           shift and go to state 53
    IF              shift and go to state 215
    LOOP            shift and go to state 220
    RETURN          shift and go to state 56
    WHILE           shift and go to state 57
    FOR             shift and go to state 58
    BREAK           shift and go to state 59
    CONTINUE        shift and go to state 60
    LLAVEDER        reduce using rule 35 (instruccionesexpfin -> .)
    MENOS           shift and go to state 87
    PARIZQ          shift and go to state 90
    ENTERO          shift and go to state 91
    DECIMAL         shift and go to state 92
    FORM            shift and go to state 93
    TRUE            shift and go to state 94
    FALSE           shift and go to state 95
    VECM            shift and go to state 96
    CHARE           shift and go to state 99
    POW             shift and go to state 101
    POWF            shift and go to state 102
    CORIZQ          reduce using rule 113 (empty -> .)
    MAS             reduce using rule 113 (empty -> .)
    POR             reduce using rule 113 (empty -> .)
    DIVIDIDO        reduce using rule 113 (empty -> .)
    MOD             reduce using rule 113 (empty -> .)
    AS              reduce using rule 113 (empty -> .)
    PT              reduce using rule 113 (empty -> .)
    DPT             reduce using rule 113 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 113 (empty -> .) ]
  ! LLAVEDER        [ reduce using rule 113 (empty -> .) ]

    instruccionesexp               shift and go to state 298
    instruccion                    shift and go to state 217
    instruccionesexpfin            shift and go to state 218
    listarreglo                    shift and go to state 97
    expresion                      shift and go to state 221
    tipos                          shift and go to state 88
    instrif                        shift and go to state 89
    opcionpow                      shift and go to state 100
    instrloop                      shift and go to state 103
    empty                          shift and go to state 80

state 297

    (45) unelse -> ELSE IF logica LLAVEIZQ instrucciones . LLAVEDER unelse

    LLAVEDER        shift and go to state 299


state 298

    (39) instrelse -> ELSE IF logica LLAVEIZQ instruccionesexp . LLAVEDER instrelse
    (33) instruccionesexpfin -> instruccionesexp .

  ! shift/reduce conflict for LLAVEDER resolved as shift
    LLAVEDER        shift and go to state 300

  ! LLAVEDER        [ reduce using rule 33 (instruccionesexpfin -> instruccionesexp .) ]


state 299

    (45) unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER . unelse
    (44) unelse -> . ELSE LLAVEIZQ instrucciones LLAVEDER
    (45) unelse -> . ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse
    (46) unelse -> . empty
    (113) empty -> .

    ELSE            shift and go to state 251
    LET             reduce using rule 113 (empty -> .)
    ID              reduce using rule 113 (empty -> .)
    PRINT           reduce using rule 113 (empty -> .)
    IF              reduce using rule 113 (empty -> .)
    LOOP            reduce using rule 113 (empty -> .)
    RETURN          reduce using rule 113 (empty -> .)
    WHILE           reduce using rule 113 (empty -> .)
    FOR             reduce using rule 113 (empty -> .)
    BREAK           reduce using rule 113 (empty -> .)
    CONTINUE        reduce using rule 113 (empty -> .)
    LLAVEDER        reduce using rule 113 (empty -> .)
    MENOS           reduce using rule 113 (empty -> .)
    PARIZQ          reduce using rule 113 (empty -> .)
    ENTERO          reduce using rule 113 (empty -> .)
    DECIMAL         reduce using rule 113 (empty -> .)
    FORM            reduce using rule 113 (empty -> .)
    TRUE            reduce using rule 113 (empty -> .)
    FALSE           reduce using rule 113 (empty -> .)
    VECM            reduce using rule 113 (empty -> .)
    CHARE           reduce using rule 113 (empty -> .)
    POW             reduce using rule 113 (empty -> .)
    POWF            reduce using rule 113 (empty -> .)
    I64             reduce using rule 113 (empty -> .)
    F64             reduce using rule 113 (empty -> .)
    BOOL            reduce using rule 113 (empty -> .)
    CHAR            reduce using rule 113 (empty -> .)
    STRING          reduce using rule 113 (empty -> .)
    AMP             reduce using rule 113 (empty -> .)
    USIZE           reduce using rule 113 (empty -> .)
    MAS             reduce using rule 113 (empty -> .)
    POR             reduce using rule 113 (empty -> .)
    DIVIDIDO        reduce using rule 113 (empty -> .)
    MOD             reduce using rule 113 (empty -> .)
    AS              reduce using rule 113 (empty -> .)
    PT              reduce using rule 113 (empty -> .)
    CORIZQ          reduce using rule 113 (empty -> .)
    DPT             reduce using rule 113 (empty -> .)

    unelse                         shift and go to state 301
    empty                          shift and go to state 252

state 300

    (39) instrelse -> ELSE IF logica LLAVEIZQ instruccionesexp LLAVEDER . instrelse
    (38) instrelse -> . ELSE LLAVEIZQ instruccionesexp LLAVEDER
    (39) instrelse -> . ELSE IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (40) instrelse -> . empty
    (113) empty -> .

    ELSE            shift and go to state 267
    MAS             reduce using rule 113 (empty -> .)
    MENOS           reduce using rule 113 (empty -> .)
    POR             reduce using rule 113 (empty -> .)
    DIVIDIDO        reduce using rule 113 (empty -> .)
    MOD             reduce using rule 113 (empty -> .)
    AS              reduce using rule 113 (empty -> .)
    PT              reduce using rule 113 (empty -> .)
    IGUAL           reduce using rule 113 (empty -> .)
    MENOR           reduce using rule 113 (empty -> .)
    MAYOR           reduce using rule 113 (empty -> .)
    MEIGUAL         reduce using rule 113 (empty -> .)
    MAIGUAL         reduce using rule 113 (empty -> .)
    DIS             reduce using rule 113 (empty -> .)
    LLAVEIZQ        reduce using rule 113 (empty -> .)
    AND             reduce using rule 113 (empty -> .)
    OR              reduce using rule 113 (empty -> .)
    DPT             reduce using rule 113 (empty -> .)
    PTCOMA          reduce using rule 113 (empty -> .)
    PARDER          reduce using rule 113 (empty -> .)
    COMA            reduce using rule 113 (empty -> .)
    CORDER          reduce using rule 113 (empty -> .)
    LLAVEDER        reduce using rule 113 (empty -> .)

    instrelse                      shift and go to state 302
    empty                          shift and go to state 268

state 301

    (45) unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .

    LET             reduce using rule 45 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    ID              reduce using rule 45 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    PRINT           reduce using rule 45 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    IF              reduce using rule 45 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    LOOP            reduce using rule 45 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    RETURN          reduce using rule 45 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    WHILE           reduce using rule 45 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    FOR             reduce using rule 45 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    BREAK           reduce using rule 45 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    CONTINUE        reduce using rule 45 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    LLAVEDER        reduce using rule 45 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    MENOS           reduce using rule 45 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    PARIZQ          reduce using rule 45 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    ENTERO          reduce using rule 45 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    DECIMAL         reduce using rule 45 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    FORM            reduce using rule 45 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    TRUE            reduce using rule 45 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    FALSE           reduce using rule 45 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    VECM            reduce using rule 45 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    CHARE           reduce using rule 45 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    POW             reduce using rule 45 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    POWF            reduce using rule 45 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    I64             reduce using rule 45 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    F64             reduce using rule 45 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    BOOL            reduce using rule 45 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    CHAR            reduce using rule 45 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    STRING          reduce using rule 45 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    AMP             reduce using rule 45 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    USIZE           reduce using rule 45 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    MAS             reduce using rule 45 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    POR             reduce using rule 45 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    DIVIDIDO        reduce using rule 45 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    MOD             reduce using rule 45 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    AS              reduce using rule 45 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    PT              reduce using rule 45 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    CORIZQ          reduce using rule 45 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    DPT             reduce using rule 45 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)


state 302

    (39) instrelse -> ELSE IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .

    MAS             reduce using rule 39 (instrelse -> ELSE IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    MENOS           reduce using rule 39 (instrelse -> ELSE IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    POR             reduce using rule 39 (instrelse -> ELSE IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    DIVIDIDO        reduce using rule 39 (instrelse -> ELSE IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    MOD             reduce using rule 39 (instrelse -> ELSE IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    AS              reduce using rule 39 (instrelse -> ELSE IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    PT              reduce using rule 39 (instrelse -> ELSE IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    IGUAL           reduce using rule 39 (instrelse -> ELSE IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    MENOR           reduce using rule 39 (instrelse -> ELSE IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    MAYOR           reduce using rule 39 (instrelse -> ELSE IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    MEIGUAL         reduce using rule 39 (instrelse -> ELSE IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    MAIGUAL         reduce using rule 39 (instrelse -> ELSE IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    DIS             reduce using rule 39 (instrelse -> ELSE IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    LLAVEIZQ        reduce using rule 39 (instrelse -> ELSE IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    AND             reduce using rule 39 (instrelse -> ELSE IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    OR              reduce using rule 39 (instrelse -> ELSE IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    DPT             reduce using rule 39 (instrelse -> ELSE IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    PTCOMA          reduce using rule 39 (instrelse -> ELSE IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    PARDER          reduce using rule 39 (instrelse -> ELSE IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    COMA            reduce using rule 39 (instrelse -> ELSE IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    CORDER          reduce using rule 39 (instrelse -> ELSE IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    LLAVEDER        reduce using rule 39 (instrelse -> ELSE IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MENOS in state 54 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 56 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 57 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 59 resolved as shift
WARNING: shift/reduce conflict for PTCOMA in state 59 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 79 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 82 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 84 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 87 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 90 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 119 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 120 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 123 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 126 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 127 resolved as shift
WARNING: shift/reduce conflict for AND in state 128 resolved as shift
WARNING: shift/reduce conflict for OR in state 128 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 130 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 131 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 132 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 133 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 134 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 135 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 136 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 137 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 138 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 139 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 146 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 154 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 166 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 168 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 172 resolved as shift
WARNING: shift/reduce conflict for IGUAL in state 173 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 173 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 173 resolved as shift
WARNING: shift/reduce conflict for MEIGUAL in state 173 resolved as shift
WARNING: shift/reduce conflict for MAIGUAL in state 173 resolved as shift
WARNING: shift/reduce conflict for DIS in state 173 resolved as shift
WARNING: shift/reduce conflict for IGUAL in state 174 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 174 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 174 resolved as shift
WARNING: shift/reduce conflict for MEIGUAL in state 174 resolved as shift
WARNING: shift/reduce conflict for MAIGUAL in state 174 resolved as shift
WARNING: shift/reduce conflict for DIS in state 174 resolved as shift
WARNING: shift/reduce conflict for IGUAL in state 175 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 175 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 175 resolved as shift
WARNING: shift/reduce conflict for MEIGUAL in state 175 resolved as shift
WARNING: shift/reduce conflict for MAIGUAL in state 175 resolved as shift
WARNING: shift/reduce conflict for DIS in state 175 resolved as shift
WARNING: shift/reduce conflict for IGUAL in state 176 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 176 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 176 resolved as shift
WARNING: shift/reduce conflict for MEIGUAL in state 176 resolved as shift
WARNING: shift/reduce conflict for MAIGUAL in state 176 resolved as shift
WARNING: shift/reduce conflict for DIS in state 176 resolved as shift
WARNING: shift/reduce conflict for IGUAL in state 177 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 177 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 177 resolved as shift
WARNING: shift/reduce conflict for MEIGUAL in state 177 resolved as shift
WARNING: shift/reduce conflict for MAIGUAL in state 177 resolved as shift
WARNING: shift/reduce conflict for DIS in state 177 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 193 resolved as shift
WARNING: shift/reduce conflict for PT in state 201 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 215 resolved as shift
WARNING: shift/reduce conflict for LLAVEDER in state 216 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 217 resolved as shift
WARNING: shift/reduce conflict for IGUAL in state 223 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 223 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 223 resolved as shift
WARNING: shift/reduce conflict for MEIGUAL in state 223 resolved as shift
WARNING: shift/reduce conflict for MAIGUAL in state 223 resolved as shift
WARNING: shift/reduce conflict for DIS in state 223 resolved as shift
WARNING: shift/reduce conflict for MAS in state 231 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 231 resolved as shift
WARNING: shift/reduce conflict for POR in state 231 resolved as shift
WARNING: shift/reduce conflict for DIVIDIDO in state 231 resolved as shift
WARNING: shift/reduce conflict for MOD in state 231 resolved as shift
WARNING: shift/reduce conflict for AS in state 231 resolved as shift
WARNING: shift/reduce conflict for PT in state 231 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 238 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 248 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 262 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 265 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 270 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 274 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 281 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 282 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 283 resolved as shift
WARNING: shift/reduce conflict for LLAVEDER in state 290 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 296 resolved as shift
WARNING: shift/reduce conflict for LLAVEDER in state 298 resolved as shift
WARNING: reduce/reduce conflict in state 142 resolved using rule (expresion -> MENOS expresion)
WARNING: rejected rule (opcionpow -> expresion) in state 142
WARNING: reduce/reduce conflict in state 168 resolved using rule (instruccionesexpfin -> <empty>)
WARNING: rejected rule (empty -> <empty>) in state 168
WARNING: reduce/reduce conflict in state 178 resolved using rule (expresion -> expresion MAS expresion)
WARNING: rejected rule (opcionpow -> expresion) in state 178
WARNING: reduce/reduce conflict in state 179 resolved using rule (expresion -> expresion MENOS expresion)
WARNING: rejected rule (opcionpow -> expresion) in state 179
WARNING: reduce/reduce conflict in state 180 resolved using rule (expresion -> expresion POR expresion)
WARNING: rejected rule (opcionpow -> expresion) in state 180
WARNING: reduce/reduce conflict in state 181 resolved using rule (expresion -> expresion DIVIDIDO expresion)
WARNING: rejected rule (opcionpow -> expresion) in state 181
WARNING: reduce/reduce conflict in state 182 resolved using rule (expresion -> expresion MOD expresion)
WARNING: rejected rule (opcionpow -> expresion) in state 182
WARNING: reduce/reduce conflict in state 202 resolved using rule (opcionfor -> empty)
WARNING: rejected rule (listarreglo -> empty) in state 202
WARNING: reduce/reduce conflict in state 206 resolved using rule (arrtipos -> tipos)
WARNING: rejected rule (arreglos -> tipos) in state 206
WARNING: reduce/reduce conflict in state 217 resolved using rule (instruccionesexpfin -> <empty>)
WARNING: rejected rule (empty -> <empty>) in state 217
WARNING: reduce/reduce conflict in state 231 resolved using rule (expresion -> opcionpow DPT DPT expresion)
WARNING: rejected rule (opcionpow -> expresion) in state 231
WARNING: reduce/reduce conflict in state 244 resolved using rule (instruccionesexp -> instruccion instruccionesexpfin)
WARNING: rejected rule (instruccionesexp -> instruccionesexpfin) in state 244
WARNING: reduce/reduce conflict in state 265 resolved using rule (instruccionesexpfin -> <empty>)
WARNING: rejected rule (empty -> <empty>) in state 265
WARNING: reduce/reduce conflict in state 281 resolved using rule (instrucciones -> instruccion)
WARNING: rejected rule (instruccionesexpfin -> <empty>) in state 281
WARNING: reduce/reduce conflict in state 281 resolved using rule (instrucciones -> instruccion)
WARNING: rejected rule (empty -> <empty>) in state 281
WARNING: reduce/reduce conflict in state 282 resolved using rule (instruccionesexpfin -> <empty>)
WARNING: rejected rule (empty -> <empty>) in state 282
WARNING: reduce/reduce conflict in state 286 resolved using rule (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER)
WARNING: rejected rule (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER) in state 286
WARNING: reduce/reduce conflict in state 296 resolved using rule (instruccionesexpfin -> <empty>)
WARNING: rejected rule (empty -> <empty>) in state 296
