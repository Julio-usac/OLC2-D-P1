Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    VEC

Grammar

Rule 0     S' -> funciones
Rule 1     funciones -> funcion funciones
Rule 2     funciones -> funcion
Rule 3     funcion -> PUB FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER
Rule 4     funcion -> FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER
Rule 5     funcion -> PUB MODF ID LLAVEIZQ funciones LLAVEDER
Rule 6     funcion -> MODF ID LLAVEIZQ funciones LLAVEDER
Rule 7     funcion -> FN MAIN PARIZQ PARDER LLAVEIZQ instrucciones LLAVEDER
Rule 8     funcion -> STRUCT ID LLAVEIZQ liststruct LLAVEDER
Rule 9     parametros -> parametros2
Rule 10    parametros -> empty
Rule 11    parametros2 -> parametros2 COMA mutable ID DPT tipos
Rule 12    parametros2 -> mutable ID DPT tipos
Rule 13    liststruct -> liststruct COMA ID DPT tipos
Rule 14    liststruct -> ID DPT tipos
Rule 15    tipofun -> MENOS MAYOR tipos
Rule 16    tipofun -> empty
Rule 17    instrucciones -> instruccion instrucciones
Rule 18    instrucciones -> instruccion
Rule 19    instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA
Rule 20    instruccion -> ID listarreglo IGUAL logica PTCOMA
Rule 21    instruccion -> ID PARIZQ listexpr PARDER PTCOMA
Rule 22    instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA
Rule 23    instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse
Rule 24    instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER
Rule 25    instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER
Rule 26    instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER
Rule 27    instruccion -> MATCH logica LLAVEIZQ insmatch LLAVEDER
Rule 28    instruccion -> BREAK PTCOMA
Rule 29    instruccion -> CONTINUE PTCOMA
Rule 30    instruccion -> BREAK logica PTCOMA
Rule 31    instruccion -> RETURN logica PTCOMA
Rule 32    instruccionesexp -> instruccion instruccionesexpfin
Rule 33    instruccionesexp -> instruccionesexpfin
Rule 34    instruccionesexpfin -> instruccionesexp
Rule 35    instruccionesexpfin -> expresion
Rule 36    instruccionesexpfin -> <empty>
Rule 37    instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER
Rule 38    insmatch -> insmatch otro2
Rule 39    insmatch -> otro2
Rule 40    otro2 -> lmatch IMAYOR opcion COMA
Rule 41    opcion -> LLAVEIZQ instrucciones LLAVEDER
Rule 42    opcion -> instrucciones
Rule 43    lmatch -> lmatch AB logica
Rule 44    lmatch -> logica
Rule 45    instrmatch -> MATCH logica LLAVEIZQ opmatch LLAVEDER
Rule 46    opmatch -> opmatch otro
Rule 47    opmatch -> otro
Rule 48    otro -> logica IMAYOR logica COMA
Rule 49    instrif -> IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
Rule 50    instrelse -> ELSE LLAVEIZQ instruccionesexp LLAVEDER
Rule 51    instrelse -> ELSE IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
Rule 52    instrelse -> empty
Rule 53    opcionfor -> logica PT2 logica
Rule 54    opcionfor -> logica
Rule 55    unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER
Rule 56    unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse
Rule 57    unelse -> empty
Rule 58    logica -> logica AND logica
Rule 59    logica -> logica OR logica
Rule 60    logica -> NOT logica
Rule 61    logica -> rel
Rule 62    rel -> rel IGUAL IGUAL rel
Rule 63    rel -> rel MENOR rel
Rule 64    rel -> rel MAYOR rel
Rule 65    rel -> rel MEIGUAL rel
Rule 66    rel -> rel MAIGUAL rel
Rule 67    rel -> rel DIS rel
Rule 68    rel -> expresion
Rule 69    mutable -> MUT
Rule 70    mutable -> empty
Rule 71    pyc -> DPT
Rule 72    pyc -> empty
Rule 73    arrtipos -> tipos
Rule 74    arrtipos -> arreglos
Rule 75    arrtipos -> empty
Rule 76    arreglos -> CORIZQ arreglos PTCOMA ENTERO CORDER
Rule 77    arreglos -> tipos
Rule 78    arreglos -> ID
Rule 79    tipos -> I64
Rule 80    tipos -> F64
Rule 81    tipos -> BOOL
Rule 82    tipos -> CHAR
Rule 83    tipos -> STRING
Rule 84    tipos -> AMP STR
Rule 85    tipos -> USIZE
Rule 86    expresion -> expresion MAS expresion
Rule 87    expresion -> expresion MENOS expresion
Rule 88    expresion -> expresion POR expresion
Rule 89    expresion -> expresion DIVIDIDO expresion
Rule 90    expresion -> expresion MOD expresion
Rule 91    expresion -> expresion AS tipos
Rule 92    expresion -> instrif
Rule 93    expresion -> MENOS expresion
Rule 94    expresion -> PARIZQ logica PARDER
Rule 95    expresion -> ENTERO
Rule 96    expresion -> DECIMAL
Rule 97    expresion -> FORM
Rule 98    expresion -> TRUE
Rule 99    expresion -> FALSE
Rule 100   expresion -> VECM NOT listarreglo
Rule 101   expresion -> ID PARIZQ listexpr PARDER
Rule 102   expresion -> ID
Rule 103   expresion -> ID listaarreglo
Rule 104   listaarreglo -> listaarreglo CORIZQ expresion CORDER
Rule 105   listaarreglo -> CORIZQ expresion CORDER
Rule 106   expresion -> CORIZQ listexpr CORDER
Rule 107   expresion -> CHARE
Rule 108   expresion -> expresion DPT2 expresion
Rule 109   expresion -> AMP expresion
Rule 110   expresion -> tipos DPT2 POW PARIZQ logica COMA logica PARDER
Rule 111   expresion -> tipos DPT2 POWF PARIZQ logica COMA logica PARDER
Rule 112   expresion -> instrloop
Rule 113   expresion -> instrmatch
Rule 114   expresion -> expresion PT TOSTRING PARIZQ PARDER
Rule 115   expresion -> expresion PT SQRT PARIZQ PARDER
Rule 116   expresion -> expresion PT ABS PARIZQ PARDER
Rule 117   expresion -> expresion PT CLONE PARIZQ PARDER
Rule 118   expresion -> expresion PT LEN PARIZQ PARDER
Rule 119   expresion -> expresion PT TOOWNED PARIZQ PARDER
Rule 120   expresion -> expresion PT CONTA PARIZQ expresion PARDER
Rule 121   listarreglo -> listaarreglo
Rule 122   listarreglo -> empty
Rule 123   listexpr -> listexpr COMA logica
Rule 124   listexpr -> logica
Rule 125   empty -> <empty>

Terminals, with rules where they appear

AB                   : 43
ABS                  : 116
AMP                  : 84 109
AND                  : 58
AS                   : 91
BOOL                 : 81
BREAK                : 28 30
CHAR                 : 82
CHARE                : 107
CLONE                : 117
COMA                 : 11 13 40 48 110 111 123
CONTA                : 120
CONTINUE             : 29
CORDER               : 76 104 105 106
CORIZQ               : 76 104 105 106
DECIMAL              : 96
DIS                  : 67
DIVIDIDO             : 89
DPT                  : 11 12 13 14 71
DPT2                 : 108 110 111
ELSE                 : 50 51 55 56
ENTERO               : 76 95
F64                  : 80
FALSE                : 99
FN                   : 3 4 7
FOR                  : 26
FORM                 : 97
I64                  : 79
ID                   : 3 4 5 6 8 11 12 13 14 19 20 21 26 78 101 102 103
IF                   : 23 49 51 56
IGUAL                : 19 20 62 62
IMAYOR               : 40 48
IN                   : 26
LEN                  : 118
LET                  : 19
LLAVEDER             : 3 4 5 6 7 8 23 24 25 26 27 37 41 45 49 50 51 55 56
LLAVEIZQ             : 3 4 5 6 7 8 23 24 25 26 27 37 41 45 49 50 51 55 56
LOOP                 : 24 37
MAIGUAL              : 66
MAIN                 : 7
MAS                  : 86
MATCH                : 27 45
MAYOR                : 15 64
MEIGUAL              : 65
MENOR                : 63
MENOS                : 15 87 93
MOD                  : 90
MODF                 : 5 6
MUT                  : 69
NOT                  : 22 60 100
OR                   : 59
PARDER               : 3 4 7 21 22 94 101 110 111 114 115 116 117 118 119 120
PARIZQ               : 3 4 7 21 22 94 101 110 111 114 115 116 117 118 119 120
POR                  : 88
POW                  : 110
POWF                 : 111
PRINT                : 22
PT                   : 114 115 116 117 118 119 120
PT2                  : 53
PTCOMA               : 19 20 21 22 28 29 30 31 76
PUB                  : 3 5
RETURN               : 31
SQRT                 : 115
STR                  : 84
STRING               : 83
STRUCT               : 8
TOOWNED              : 119
TOSTRING             : 114
TRUE                 : 98
USIZE                : 85
VEC                  : 
VECM                 : 100
WHILE                : 25
error                : 

Nonterminals, with rules where they appear

arreglos             : 74 76
arrtipos             : 19
empty                : 10 16 52 57 70 72 75 122
expresion            : 35 68 86 86 87 87 88 88 89 89 90 90 91 93 104 105 108 108 109 114 115 116 117 118 119 120 120
funcion              : 1 2
funciones            : 1 5 6 0
insmatch             : 27 38
instrelse            : 49 51
instrif              : 92
instrloop            : 112
instrmatch           : 113
instruccion          : 17 18 32
instrucciones        : 3 4 7 17 23 24 25 26 37 41 42 55 56
instruccionesexp     : 34 49 50 51
instruccionesexpfin  : 32 33
listaarreglo         : 103 104 121
listarreglo          : 20 100
listexpr             : 21 22 101 106 123
liststruct           : 8 13
lmatch               : 40 43
logica               : 19 20 23 25 27 30 31 43 44 45 48 48 49 51 53 53 54 56 58 58 59 59 60 94 110 110 111 111 123 124
mutable              : 11 12 19
opcion               : 40
opcionfor            : 26
opmatch              : 45 46
otro                 : 46 47
otro2                : 38 39
parametros           : 3 4
parametros2          : 9 11
pyc                  : 19
rel                  : 61 62 62 63 63 64 64 65 65 66 66 67 67
tipofun              : 3 4
tipos                : 11 12 13 14 15 73 77 91 110 111
unelse               : 23 56

Parsing method: LALR

state 0

    (0) S' -> . funciones
    (1) funciones -> . funcion funciones
    (2) funciones -> . funcion
    (3) funcion -> . PUB FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER
    (4) funcion -> . FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER
    (5) funcion -> . PUB MODF ID LLAVEIZQ funciones LLAVEDER
    (6) funcion -> . MODF ID LLAVEIZQ funciones LLAVEDER
    (7) funcion -> . FN MAIN PARIZQ PARDER LLAVEIZQ instrucciones LLAVEDER
    (8) funcion -> . STRUCT ID LLAVEIZQ liststruct LLAVEDER

    PUB             shift and go to state 3
    FN              shift and go to state 4
    MODF            shift and go to state 5
    STRUCT          shift and go to state 6

    funciones                      shift and go to state 1
    funcion                        shift and go to state 2

state 1

    (0) S' -> funciones .



state 2

    (1) funciones -> funcion . funciones
    (2) funciones -> funcion .
    (1) funciones -> . funcion funciones
    (2) funciones -> . funcion
    (3) funcion -> . PUB FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER
    (4) funcion -> . FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER
    (5) funcion -> . PUB MODF ID LLAVEIZQ funciones LLAVEDER
    (6) funcion -> . MODF ID LLAVEIZQ funciones LLAVEDER
    (7) funcion -> . FN MAIN PARIZQ PARDER LLAVEIZQ instrucciones LLAVEDER
    (8) funcion -> . STRUCT ID LLAVEIZQ liststruct LLAVEDER

    $end            reduce using rule 2 (funciones -> funcion .)
    LLAVEDER        reduce using rule 2 (funciones -> funcion .)
    PUB             shift and go to state 3
    FN              shift and go to state 4
    MODF            shift and go to state 5
    STRUCT          shift and go to state 6

    funcion                        shift and go to state 2
    funciones                      shift and go to state 7

state 3

    (3) funcion -> PUB . FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER
    (5) funcion -> PUB . MODF ID LLAVEIZQ funciones LLAVEDER

    FN              shift and go to state 8
    MODF            shift and go to state 9


state 4

    (4) funcion -> FN . ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER
    (7) funcion -> FN . MAIN PARIZQ PARDER LLAVEIZQ instrucciones LLAVEDER

    ID              shift and go to state 10
    MAIN            shift and go to state 11


state 5

    (6) funcion -> MODF . ID LLAVEIZQ funciones LLAVEDER

    ID              shift and go to state 12


state 6

    (8) funcion -> STRUCT . ID LLAVEIZQ liststruct LLAVEDER

    ID              shift and go to state 13


state 7

    (1) funciones -> funcion funciones .

    $end            reduce using rule 1 (funciones -> funcion funciones .)
    LLAVEDER        reduce using rule 1 (funciones -> funcion funciones .)


state 8

    (3) funcion -> PUB FN . ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER

    ID              shift and go to state 14


state 9

    (5) funcion -> PUB MODF . ID LLAVEIZQ funciones LLAVEDER

    ID              shift and go to state 15


state 10

    (4) funcion -> FN ID . PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER

    PARIZQ          shift and go to state 16


state 11

    (7) funcion -> FN MAIN . PARIZQ PARDER LLAVEIZQ instrucciones LLAVEDER

    PARIZQ          shift and go to state 17


state 12

    (6) funcion -> MODF ID . LLAVEIZQ funciones LLAVEDER

    LLAVEIZQ        shift and go to state 18


state 13

    (8) funcion -> STRUCT ID . LLAVEIZQ liststruct LLAVEDER

    LLAVEIZQ        shift and go to state 19


state 14

    (3) funcion -> PUB FN ID . PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER

    PARIZQ          shift and go to state 20


state 15

    (5) funcion -> PUB MODF ID . LLAVEIZQ funciones LLAVEDER

    LLAVEIZQ        shift and go to state 21


state 16

    (4) funcion -> FN ID PARIZQ . parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER
    (9) parametros -> . parametros2
    (10) parametros -> . empty
    (11) parametros2 -> . parametros2 COMA mutable ID DPT tipos
    (12) parametros2 -> . mutable ID DPT tipos
    (125) empty -> .
    (69) mutable -> . MUT
    (70) mutable -> . empty

    PARDER          reduce using rule 125 (empty -> .)
    ID              reduce using rule 125 (empty -> .)
    MUT             shift and go to state 26

    parametros                     shift and go to state 22
    parametros2                    shift and go to state 23
    empty                          shift and go to state 24
    mutable                        shift and go to state 25

state 17

    (7) funcion -> FN MAIN PARIZQ . PARDER LLAVEIZQ instrucciones LLAVEDER

    PARDER          shift and go to state 27


state 18

    (6) funcion -> MODF ID LLAVEIZQ . funciones LLAVEDER
    (1) funciones -> . funcion funciones
    (2) funciones -> . funcion
    (3) funcion -> . PUB FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER
    (4) funcion -> . FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER
    (5) funcion -> . PUB MODF ID LLAVEIZQ funciones LLAVEDER
    (6) funcion -> . MODF ID LLAVEIZQ funciones LLAVEDER
    (7) funcion -> . FN MAIN PARIZQ PARDER LLAVEIZQ instrucciones LLAVEDER
    (8) funcion -> . STRUCT ID LLAVEIZQ liststruct LLAVEDER

    PUB             shift and go to state 3
    FN              shift and go to state 4
    MODF            shift and go to state 5
    STRUCT          shift and go to state 6

    funciones                      shift and go to state 28
    funcion                        shift and go to state 2

state 19

    (8) funcion -> STRUCT ID LLAVEIZQ . liststruct LLAVEDER
    (13) liststruct -> . liststruct COMA ID DPT tipos
    (14) liststruct -> . ID DPT tipos

    ID              shift and go to state 29

    liststruct                     shift and go to state 30

state 20

    (3) funcion -> PUB FN ID PARIZQ . parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER
    (9) parametros -> . parametros2
    (10) parametros -> . empty
    (11) parametros2 -> . parametros2 COMA mutable ID DPT tipos
    (12) parametros2 -> . mutable ID DPT tipos
    (125) empty -> .
    (69) mutable -> . MUT
    (70) mutable -> . empty

    PARDER          reduce using rule 125 (empty -> .)
    ID              reduce using rule 125 (empty -> .)
    MUT             shift and go to state 26

    parametros                     shift and go to state 31
    parametros2                    shift and go to state 23
    empty                          shift and go to state 24
    mutable                        shift and go to state 25

state 21

    (5) funcion -> PUB MODF ID LLAVEIZQ . funciones LLAVEDER
    (1) funciones -> . funcion funciones
    (2) funciones -> . funcion
    (3) funcion -> . PUB FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER
    (4) funcion -> . FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER
    (5) funcion -> . PUB MODF ID LLAVEIZQ funciones LLAVEDER
    (6) funcion -> . MODF ID LLAVEIZQ funciones LLAVEDER
    (7) funcion -> . FN MAIN PARIZQ PARDER LLAVEIZQ instrucciones LLAVEDER
    (8) funcion -> . STRUCT ID LLAVEIZQ liststruct LLAVEDER

    PUB             shift and go to state 3
    FN              shift and go to state 4
    MODF            shift and go to state 5
    STRUCT          shift and go to state 6

    funciones                      shift and go to state 32
    funcion                        shift and go to state 2

state 22

    (4) funcion -> FN ID PARIZQ parametros . PARDER tipofun LLAVEIZQ instrucciones LLAVEDER

    PARDER          shift and go to state 33


state 23

    (9) parametros -> parametros2 .
    (11) parametros2 -> parametros2 . COMA mutable ID DPT tipos

    PARDER          reduce using rule 9 (parametros -> parametros2 .)
    COMA            shift and go to state 34


state 24

    (10) parametros -> empty .
    (70) mutable -> empty .

    PARDER          reduce using rule 10 (parametros -> empty .)
    ID              reduce using rule 70 (mutable -> empty .)


state 25

    (12) parametros2 -> mutable . ID DPT tipos

    ID              shift and go to state 35


state 26

    (69) mutable -> MUT .

    ID              reduce using rule 69 (mutable -> MUT .)


state 27

    (7) funcion -> FN MAIN PARIZQ PARDER . LLAVEIZQ instrucciones LLAVEDER

    LLAVEIZQ        shift and go to state 36


state 28

    (6) funcion -> MODF ID LLAVEIZQ funciones . LLAVEDER

    LLAVEDER        shift and go to state 37


state 29

    (14) liststruct -> ID . DPT tipos

    DPT             shift and go to state 38


state 30

    (8) funcion -> STRUCT ID LLAVEIZQ liststruct . LLAVEDER
    (13) liststruct -> liststruct . COMA ID DPT tipos

    LLAVEDER        shift and go to state 39
    COMA            shift and go to state 40


state 31

    (3) funcion -> PUB FN ID PARIZQ parametros . PARDER tipofun LLAVEIZQ instrucciones LLAVEDER

    PARDER          shift and go to state 41


state 32

    (5) funcion -> PUB MODF ID LLAVEIZQ funciones . LLAVEDER

    LLAVEDER        shift and go to state 42


state 33

    (4) funcion -> FN ID PARIZQ parametros PARDER . tipofun LLAVEIZQ instrucciones LLAVEDER
    (15) tipofun -> . MENOS MAYOR tipos
    (16) tipofun -> . empty
    (125) empty -> .

    MENOS           shift and go to state 44
    LLAVEIZQ        reduce using rule 125 (empty -> .)

    tipofun                        shift and go to state 43
    empty                          shift and go to state 45

state 34

    (11) parametros2 -> parametros2 COMA . mutable ID DPT tipos
    (69) mutable -> . MUT
    (70) mutable -> . empty
    (125) empty -> .

    MUT             shift and go to state 26
    ID              reduce using rule 125 (empty -> .)

    mutable                        shift and go to state 46
    empty                          shift and go to state 47

state 35

    (12) parametros2 -> mutable ID . DPT tipos

    DPT             shift and go to state 48


state 36

    (7) funcion -> FN MAIN PARIZQ PARDER LLAVEIZQ . instrucciones LLAVEDER
    (17) instrucciones -> . instruccion instrucciones
    (18) instrucciones -> . instruccion
    (19) instruccion -> . LET mutable ID pyc arrtipos IGUAL logica PTCOMA
    (20) instruccion -> . ID listarreglo IGUAL logica PTCOMA
    (21) instruccion -> . ID PARIZQ listexpr PARDER PTCOMA
    (22) instruccion -> . PRINT NOT PARIZQ listexpr PARDER PTCOMA
    (23) instruccion -> . IF logica LLAVEIZQ instrucciones LLAVEDER unelse
    (24) instruccion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (25) instruccion -> . WHILE logica LLAVEIZQ instrucciones LLAVEDER
    (26) instruccion -> . FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER
    (27) instruccion -> . MATCH logica LLAVEIZQ insmatch LLAVEDER
    (28) instruccion -> . BREAK PTCOMA
    (29) instruccion -> . CONTINUE PTCOMA
    (30) instruccion -> . BREAK logica PTCOMA
    (31) instruccion -> . RETURN logica PTCOMA

    LET             shift and go to state 51
    ID              shift and go to state 52
    PRINT           shift and go to state 53
    IF              shift and go to state 54
    LOOP            shift and go to state 55
    WHILE           shift and go to state 56
    FOR             shift and go to state 57
    MATCH           shift and go to state 58
    BREAK           shift and go to state 59
    CONTINUE        shift and go to state 60
    RETURN          shift and go to state 61

    instrucciones                  shift and go to state 49
    instruccion                    shift and go to state 50

state 37

    (6) funcion -> MODF ID LLAVEIZQ funciones LLAVEDER .

    PUB             reduce using rule 6 (funcion -> MODF ID LLAVEIZQ funciones LLAVEDER .)
    FN              reduce using rule 6 (funcion -> MODF ID LLAVEIZQ funciones LLAVEDER .)
    MODF            reduce using rule 6 (funcion -> MODF ID LLAVEIZQ funciones LLAVEDER .)
    STRUCT          reduce using rule 6 (funcion -> MODF ID LLAVEIZQ funciones LLAVEDER .)
    $end            reduce using rule 6 (funcion -> MODF ID LLAVEIZQ funciones LLAVEDER .)
    LLAVEDER        reduce using rule 6 (funcion -> MODF ID LLAVEIZQ funciones LLAVEDER .)


state 38

    (14) liststruct -> ID DPT . tipos
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE

    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    AMP             shift and go to state 68
    USIZE           shift and go to state 69

    tipos                          shift and go to state 62

state 39

    (8) funcion -> STRUCT ID LLAVEIZQ liststruct LLAVEDER .

    PUB             reduce using rule 8 (funcion -> STRUCT ID LLAVEIZQ liststruct LLAVEDER .)
    FN              reduce using rule 8 (funcion -> STRUCT ID LLAVEIZQ liststruct LLAVEDER .)
    MODF            reduce using rule 8 (funcion -> STRUCT ID LLAVEIZQ liststruct LLAVEDER .)
    STRUCT          reduce using rule 8 (funcion -> STRUCT ID LLAVEIZQ liststruct LLAVEDER .)
    $end            reduce using rule 8 (funcion -> STRUCT ID LLAVEIZQ liststruct LLAVEDER .)
    LLAVEDER        reduce using rule 8 (funcion -> STRUCT ID LLAVEIZQ liststruct LLAVEDER .)


state 40

    (13) liststruct -> liststruct COMA . ID DPT tipos

    ID              shift and go to state 70


state 41

    (3) funcion -> PUB FN ID PARIZQ parametros PARDER . tipofun LLAVEIZQ instrucciones LLAVEDER
    (15) tipofun -> . MENOS MAYOR tipos
    (16) tipofun -> . empty
    (125) empty -> .

    MENOS           shift and go to state 44
    LLAVEIZQ        reduce using rule 125 (empty -> .)

    tipofun                        shift and go to state 71
    empty                          shift and go to state 45

state 42

    (5) funcion -> PUB MODF ID LLAVEIZQ funciones LLAVEDER .

    PUB             reduce using rule 5 (funcion -> PUB MODF ID LLAVEIZQ funciones LLAVEDER .)
    FN              reduce using rule 5 (funcion -> PUB MODF ID LLAVEIZQ funciones LLAVEDER .)
    MODF            reduce using rule 5 (funcion -> PUB MODF ID LLAVEIZQ funciones LLAVEDER .)
    STRUCT          reduce using rule 5 (funcion -> PUB MODF ID LLAVEIZQ funciones LLAVEDER .)
    $end            reduce using rule 5 (funcion -> PUB MODF ID LLAVEIZQ funciones LLAVEDER .)
    LLAVEDER        reduce using rule 5 (funcion -> PUB MODF ID LLAVEIZQ funciones LLAVEDER .)


state 43

    (4) funcion -> FN ID PARIZQ parametros PARDER tipofun . LLAVEIZQ instrucciones LLAVEDER

    LLAVEIZQ        shift and go to state 72


state 44

    (15) tipofun -> MENOS . MAYOR tipos

    MAYOR           shift and go to state 73


state 45

    (16) tipofun -> empty .

    LLAVEIZQ        reduce using rule 16 (tipofun -> empty .)


state 46

    (11) parametros2 -> parametros2 COMA mutable . ID DPT tipos

    ID              shift and go to state 74


state 47

    (70) mutable -> empty .

    ID              reduce using rule 70 (mutable -> empty .)


state 48

    (12) parametros2 -> mutable ID DPT . tipos
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE

    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    AMP             shift and go to state 68
    USIZE           shift and go to state 69

    tipos                          shift and go to state 75

state 49

    (7) funcion -> FN MAIN PARIZQ PARDER LLAVEIZQ instrucciones . LLAVEDER

    LLAVEDER        shift and go to state 76


state 50

    (17) instrucciones -> instruccion . instrucciones
    (18) instrucciones -> instruccion .
    (17) instrucciones -> . instruccion instrucciones
    (18) instrucciones -> . instruccion
    (19) instruccion -> . LET mutable ID pyc arrtipos IGUAL logica PTCOMA
    (20) instruccion -> . ID listarreglo IGUAL logica PTCOMA
    (21) instruccion -> . ID PARIZQ listexpr PARDER PTCOMA
    (22) instruccion -> . PRINT NOT PARIZQ listexpr PARDER PTCOMA
    (23) instruccion -> . IF logica LLAVEIZQ instrucciones LLAVEDER unelse
    (24) instruccion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (25) instruccion -> . WHILE logica LLAVEIZQ instrucciones LLAVEDER
    (26) instruccion -> . FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER
    (27) instruccion -> . MATCH logica LLAVEIZQ insmatch LLAVEDER
    (28) instruccion -> . BREAK PTCOMA
    (29) instruccion -> . CONTINUE PTCOMA
    (30) instruccion -> . BREAK logica PTCOMA
    (31) instruccion -> . RETURN logica PTCOMA

    LLAVEDER        reduce using rule 18 (instrucciones -> instruccion .)
    COMA            reduce using rule 18 (instrucciones -> instruccion .)
    LET             shift and go to state 51
    ID              shift and go to state 52
    PRINT           shift and go to state 53
    IF              shift and go to state 54
    LOOP            shift and go to state 55
    WHILE           shift and go to state 56
    FOR             shift and go to state 57
    MATCH           shift and go to state 58
    BREAK           shift and go to state 59
    CONTINUE        shift and go to state 60
    RETURN          shift and go to state 61

    instruccion                    shift and go to state 50
    instrucciones                  shift and go to state 77

state 51

    (19) instruccion -> LET . mutable ID pyc arrtipos IGUAL logica PTCOMA
    (69) mutable -> . MUT
    (70) mutable -> . empty
    (125) empty -> .

    MUT             shift and go to state 26
    ID              reduce using rule 125 (empty -> .)

    mutable                        shift and go to state 78
    empty                          shift and go to state 47

state 52

    (20) instruccion -> ID . listarreglo IGUAL logica PTCOMA
    (21) instruccion -> ID . PARIZQ listexpr PARDER PTCOMA
    (121) listarreglo -> . listaarreglo
    (122) listarreglo -> . empty
    (104) listaarreglo -> . listaarreglo CORIZQ expresion CORDER
    (105) listaarreglo -> . CORIZQ expresion CORDER
    (125) empty -> .

    PARIZQ          shift and go to state 80
    CORIZQ          shift and go to state 83
    IGUAL           reduce using rule 125 (empty -> .)

    listarreglo                    shift and go to state 79
    listaarreglo                   shift and go to state 81
    empty                          shift and go to state 82

state 53

    (22) instruccion -> PRINT . NOT PARIZQ listexpr PARDER PTCOMA

    NOT             shift and go to state 84


state 54

    (23) instruccion -> IF . logica LLAVEIZQ instrucciones LLAVEDER unelse
    (58) logica -> . logica AND logica
    (59) logica -> . logica OR logica
    (60) logica -> . NOT logica
    (61) logica -> . rel
    (62) rel -> . rel IGUAL IGUAL rel
    (63) rel -> . rel MENOR rel
    (64) rel -> . rel MAYOR rel
    (65) rel -> . rel MEIGUAL rel
    (66) rel -> . rel MAIGUAL rel
    (67) rel -> . rel DIS rel
    (68) rel -> . expresion
    (86) expresion -> . expresion MAS expresion
    (87) expresion -> . expresion MENOS expresion
    (88) expresion -> . expresion POR expresion
    (89) expresion -> . expresion DIVIDIDO expresion
    (90) expresion -> . expresion MOD expresion
    (91) expresion -> . expresion AS tipos
    (92) expresion -> . instrif
    (93) expresion -> . MENOS expresion
    (94) expresion -> . PARIZQ logica PARDER
    (95) expresion -> . ENTERO
    (96) expresion -> . DECIMAL
    (97) expresion -> . FORM
    (98) expresion -> . TRUE
    (99) expresion -> . FALSE
    (100) expresion -> . VECM NOT listarreglo
    (101) expresion -> . ID PARIZQ listexpr PARDER
    (102) expresion -> . ID
    (103) expresion -> . ID listaarreglo
    (106) expresion -> . CORIZQ listexpr CORDER
    (107) expresion -> . CHARE
    (108) expresion -> . expresion DPT2 expresion
    (109) expresion -> . AMP expresion
    (110) expresion -> . tipos DPT2 POW PARIZQ logica COMA logica PARDER
    (111) expresion -> . tipos DPT2 POWF PARIZQ logica COMA logica PARDER
    (112) expresion -> . instrloop
    (113) expresion -> . instrmatch
    (114) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (115) expresion -> . expresion PT SQRT PARIZQ PARDER
    (116) expresion -> . expresion PT ABS PARIZQ PARDER
    (117) expresion -> . expresion PT CLONE PARIZQ PARDER
    (118) expresion -> . expresion PT LEN PARIZQ PARDER
    (119) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (120) expresion -> . expresion PT CONTA PARIZQ expresion PARDER
    (49) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE
    (37) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (45) instrmatch -> . MATCH logica LLAVEIZQ opmatch LLAVEDER

    NOT             shift and go to state 87
    MENOS           shift and go to state 90
    PARIZQ          shift and go to state 93
    ENTERO          shift and go to state 94
    DECIMAL         shift and go to state 95
    FORM            shift and go to state 96
    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    VECM            shift and go to state 99
    ID              shift and go to state 100
    CORIZQ          shift and go to state 101
    CHARE           shift and go to state 102
    AMP             shift and go to state 103
    IF              shift and go to state 85
    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    USIZE           shift and go to state 69
    LOOP            shift and go to state 106
    MATCH           shift and go to state 107

    logica                         shift and go to state 86
    rel                            shift and go to state 88
    expresion                      shift and go to state 89
    tipos                          shift and go to state 91
    instrif                        shift and go to state 92
    instrloop                      shift and go to state 104
    instrmatch                     shift and go to state 105

state 55

    (24) instruccion -> LOOP . LLAVEIZQ instrucciones LLAVEDER

    LLAVEIZQ        shift and go to state 108


state 56

    (25) instruccion -> WHILE . logica LLAVEIZQ instrucciones LLAVEDER
    (58) logica -> . logica AND logica
    (59) logica -> . logica OR logica
    (60) logica -> . NOT logica
    (61) logica -> . rel
    (62) rel -> . rel IGUAL IGUAL rel
    (63) rel -> . rel MENOR rel
    (64) rel -> . rel MAYOR rel
    (65) rel -> . rel MEIGUAL rel
    (66) rel -> . rel MAIGUAL rel
    (67) rel -> . rel DIS rel
    (68) rel -> . expresion
    (86) expresion -> . expresion MAS expresion
    (87) expresion -> . expresion MENOS expresion
    (88) expresion -> . expresion POR expresion
    (89) expresion -> . expresion DIVIDIDO expresion
    (90) expresion -> . expresion MOD expresion
    (91) expresion -> . expresion AS tipos
    (92) expresion -> . instrif
    (93) expresion -> . MENOS expresion
    (94) expresion -> . PARIZQ logica PARDER
    (95) expresion -> . ENTERO
    (96) expresion -> . DECIMAL
    (97) expresion -> . FORM
    (98) expresion -> . TRUE
    (99) expresion -> . FALSE
    (100) expresion -> . VECM NOT listarreglo
    (101) expresion -> . ID PARIZQ listexpr PARDER
    (102) expresion -> . ID
    (103) expresion -> . ID listaarreglo
    (106) expresion -> . CORIZQ listexpr CORDER
    (107) expresion -> . CHARE
    (108) expresion -> . expresion DPT2 expresion
    (109) expresion -> . AMP expresion
    (110) expresion -> . tipos DPT2 POW PARIZQ logica COMA logica PARDER
    (111) expresion -> . tipos DPT2 POWF PARIZQ logica COMA logica PARDER
    (112) expresion -> . instrloop
    (113) expresion -> . instrmatch
    (114) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (115) expresion -> . expresion PT SQRT PARIZQ PARDER
    (116) expresion -> . expresion PT ABS PARIZQ PARDER
    (117) expresion -> . expresion PT CLONE PARIZQ PARDER
    (118) expresion -> . expresion PT LEN PARIZQ PARDER
    (119) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (120) expresion -> . expresion PT CONTA PARIZQ expresion PARDER
    (49) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE
    (37) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (45) instrmatch -> . MATCH logica LLAVEIZQ opmatch LLAVEDER

    NOT             shift and go to state 87
    MENOS           shift and go to state 90
    PARIZQ          shift and go to state 93
    ENTERO          shift and go to state 94
    DECIMAL         shift and go to state 95
    FORM            shift and go to state 96
    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    VECM            shift and go to state 99
    ID              shift and go to state 100
    CORIZQ          shift and go to state 101
    CHARE           shift and go to state 102
    AMP             shift and go to state 103
    IF              shift and go to state 85
    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    USIZE           shift and go to state 69
    LOOP            shift and go to state 106
    MATCH           shift and go to state 107

    logica                         shift and go to state 109
    rel                            shift and go to state 88
    expresion                      shift and go to state 89
    tipos                          shift and go to state 91
    instrif                        shift and go to state 92
    instrloop                      shift and go to state 104
    instrmatch                     shift and go to state 105

state 57

    (26) instruccion -> FOR . ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER

    ID              shift and go to state 110


state 58

    (27) instruccion -> MATCH . logica LLAVEIZQ insmatch LLAVEDER
    (58) logica -> . logica AND logica
    (59) logica -> . logica OR logica
    (60) logica -> . NOT logica
    (61) logica -> . rel
    (62) rel -> . rel IGUAL IGUAL rel
    (63) rel -> . rel MENOR rel
    (64) rel -> . rel MAYOR rel
    (65) rel -> . rel MEIGUAL rel
    (66) rel -> . rel MAIGUAL rel
    (67) rel -> . rel DIS rel
    (68) rel -> . expresion
    (86) expresion -> . expresion MAS expresion
    (87) expresion -> . expresion MENOS expresion
    (88) expresion -> . expresion POR expresion
    (89) expresion -> . expresion DIVIDIDO expresion
    (90) expresion -> . expresion MOD expresion
    (91) expresion -> . expresion AS tipos
    (92) expresion -> . instrif
    (93) expresion -> . MENOS expresion
    (94) expresion -> . PARIZQ logica PARDER
    (95) expresion -> . ENTERO
    (96) expresion -> . DECIMAL
    (97) expresion -> . FORM
    (98) expresion -> . TRUE
    (99) expresion -> . FALSE
    (100) expresion -> . VECM NOT listarreglo
    (101) expresion -> . ID PARIZQ listexpr PARDER
    (102) expresion -> . ID
    (103) expresion -> . ID listaarreglo
    (106) expresion -> . CORIZQ listexpr CORDER
    (107) expresion -> . CHARE
    (108) expresion -> . expresion DPT2 expresion
    (109) expresion -> . AMP expresion
    (110) expresion -> . tipos DPT2 POW PARIZQ logica COMA logica PARDER
    (111) expresion -> . tipos DPT2 POWF PARIZQ logica COMA logica PARDER
    (112) expresion -> . instrloop
    (113) expresion -> . instrmatch
    (114) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (115) expresion -> . expresion PT SQRT PARIZQ PARDER
    (116) expresion -> . expresion PT ABS PARIZQ PARDER
    (117) expresion -> . expresion PT CLONE PARIZQ PARDER
    (118) expresion -> . expresion PT LEN PARIZQ PARDER
    (119) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (120) expresion -> . expresion PT CONTA PARIZQ expresion PARDER
    (49) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE
    (37) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (45) instrmatch -> . MATCH logica LLAVEIZQ opmatch LLAVEDER

    NOT             shift and go to state 87
    MENOS           shift and go to state 90
    PARIZQ          shift and go to state 93
    ENTERO          shift and go to state 94
    DECIMAL         shift and go to state 95
    FORM            shift and go to state 96
    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    VECM            shift and go to state 99
    ID              shift and go to state 100
    CORIZQ          shift and go to state 101
    CHARE           shift and go to state 102
    AMP             shift and go to state 103
    IF              shift and go to state 85
    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    USIZE           shift and go to state 69
    LOOP            shift and go to state 106
    MATCH           shift and go to state 107

    logica                         shift and go to state 111
    rel                            shift and go to state 88
    expresion                      shift and go to state 89
    tipos                          shift and go to state 91
    instrif                        shift and go to state 92
    instrloop                      shift and go to state 104
    instrmatch                     shift and go to state 105

state 59

    (28) instruccion -> BREAK . PTCOMA
    (30) instruccion -> BREAK . logica PTCOMA
    (58) logica -> . logica AND logica
    (59) logica -> . logica OR logica
    (60) logica -> . NOT logica
    (61) logica -> . rel
    (62) rel -> . rel IGUAL IGUAL rel
    (63) rel -> . rel MENOR rel
    (64) rel -> . rel MAYOR rel
    (65) rel -> . rel MEIGUAL rel
    (66) rel -> . rel MAIGUAL rel
    (67) rel -> . rel DIS rel
    (68) rel -> . expresion
    (86) expresion -> . expresion MAS expresion
    (87) expresion -> . expresion MENOS expresion
    (88) expresion -> . expresion POR expresion
    (89) expresion -> . expresion DIVIDIDO expresion
    (90) expresion -> . expresion MOD expresion
    (91) expresion -> . expresion AS tipos
    (92) expresion -> . instrif
    (93) expresion -> . MENOS expresion
    (94) expresion -> . PARIZQ logica PARDER
    (95) expresion -> . ENTERO
    (96) expresion -> . DECIMAL
    (97) expresion -> . FORM
    (98) expresion -> . TRUE
    (99) expresion -> . FALSE
    (100) expresion -> . VECM NOT listarreglo
    (101) expresion -> . ID PARIZQ listexpr PARDER
    (102) expresion -> . ID
    (103) expresion -> . ID listaarreglo
    (106) expresion -> . CORIZQ listexpr CORDER
    (107) expresion -> . CHARE
    (108) expresion -> . expresion DPT2 expresion
    (109) expresion -> . AMP expresion
    (110) expresion -> . tipos DPT2 POW PARIZQ logica COMA logica PARDER
    (111) expresion -> . tipos DPT2 POWF PARIZQ logica COMA logica PARDER
    (112) expresion -> . instrloop
    (113) expresion -> . instrmatch
    (114) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (115) expresion -> . expresion PT SQRT PARIZQ PARDER
    (116) expresion -> . expresion PT ABS PARIZQ PARDER
    (117) expresion -> . expresion PT CLONE PARIZQ PARDER
    (118) expresion -> . expresion PT LEN PARIZQ PARDER
    (119) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (120) expresion -> . expresion PT CONTA PARIZQ expresion PARDER
    (49) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE
    (37) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (45) instrmatch -> . MATCH logica LLAVEIZQ opmatch LLAVEDER

    PTCOMA          shift and go to state 112
    NOT             shift and go to state 87
    MENOS           shift and go to state 90
    PARIZQ          shift and go to state 93
    ENTERO          shift and go to state 94
    DECIMAL         shift and go to state 95
    FORM            shift and go to state 96
    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    VECM            shift and go to state 99
    ID              shift and go to state 100
    CORIZQ          shift and go to state 101
    CHARE           shift and go to state 102
    AMP             shift and go to state 103
    IF              shift and go to state 85
    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    USIZE           shift and go to state 69
    LOOP            shift and go to state 106
    MATCH           shift and go to state 107

    logica                         shift and go to state 113
    rel                            shift and go to state 88
    expresion                      shift and go to state 89
    tipos                          shift and go to state 91
    instrif                        shift and go to state 92
    instrloop                      shift and go to state 104
    instrmatch                     shift and go to state 105

state 60

    (29) instruccion -> CONTINUE . PTCOMA

    PTCOMA          shift and go to state 114


state 61

    (31) instruccion -> RETURN . logica PTCOMA
    (58) logica -> . logica AND logica
    (59) logica -> . logica OR logica
    (60) logica -> . NOT logica
    (61) logica -> . rel
    (62) rel -> . rel IGUAL IGUAL rel
    (63) rel -> . rel MENOR rel
    (64) rel -> . rel MAYOR rel
    (65) rel -> . rel MEIGUAL rel
    (66) rel -> . rel MAIGUAL rel
    (67) rel -> . rel DIS rel
    (68) rel -> . expresion
    (86) expresion -> . expresion MAS expresion
    (87) expresion -> . expresion MENOS expresion
    (88) expresion -> . expresion POR expresion
    (89) expresion -> . expresion DIVIDIDO expresion
    (90) expresion -> . expresion MOD expresion
    (91) expresion -> . expresion AS tipos
    (92) expresion -> . instrif
    (93) expresion -> . MENOS expresion
    (94) expresion -> . PARIZQ logica PARDER
    (95) expresion -> . ENTERO
    (96) expresion -> . DECIMAL
    (97) expresion -> . FORM
    (98) expresion -> . TRUE
    (99) expresion -> . FALSE
    (100) expresion -> . VECM NOT listarreglo
    (101) expresion -> . ID PARIZQ listexpr PARDER
    (102) expresion -> . ID
    (103) expresion -> . ID listaarreglo
    (106) expresion -> . CORIZQ listexpr CORDER
    (107) expresion -> . CHARE
    (108) expresion -> . expresion DPT2 expresion
    (109) expresion -> . AMP expresion
    (110) expresion -> . tipos DPT2 POW PARIZQ logica COMA logica PARDER
    (111) expresion -> . tipos DPT2 POWF PARIZQ logica COMA logica PARDER
    (112) expresion -> . instrloop
    (113) expresion -> . instrmatch
    (114) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (115) expresion -> . expresion PT SQRT PARIZQ PARDER
    (116) expresion -> . expresion PT ABS PARIZQ PARDER
    (117) expresion -> . expresion PT CLONE PARIZQ PARDER
    (118) expresion -> . expresion PT LEN PARIZQ PARDER
    (119) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (120) expresion -> . expresion PT CONTA PARIZQ expresion PARDER
    (49) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE
    (37) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (45) instrmatch -> . MATCH logica LLAVEIZQ opmatch LLAVEDER

    NOT             shift and go to state 87
    MENOS           shift and go to state 90
    PARIZQ          shift and go to state 93
    ENTERO          shift and go to state 94
    DECIMAL         shift and go to state 95
    FORM            shift and go to state 96
    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    VECM            shift and go to state 99
    ID              shift and go to state 100
    CORIZQ          shift and go to state 101
    CHARE           shift and go to state 102
    AMP             shift and go to state 103
    IF              shift and go to state 85
    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    USIZE           shift and go to state 69
    LOOP            shift and go to state 106
    MATCH           shift and go to state 107

    logica                         shift and go to state 115
    rel                            shift and go to state 88
    expresion                      shift and go to state 89
    tipos                          shift and go to state 91
    instrif                        shift and go to state 92
    instrloop                      shift and go to state 104
    instrmatch                     shift and go to state 105

state 62

    (14) liststruct -> ID DPT tipos .

    LLAVEDER        reduce using rule 14 (liststruct -> ID DPT tipos .)
    COMA            reduce using rule 14 (liststruct -> ID DPT tipos .)


state 63

    (79) tipos -> I64 .

    LLAVEDER        reduce using rule 79 (tipos -> I64 .)
    COMA            reduce using rule 79 (tipos -> I64 .)
    PARDER          reduce using rule 79 (tipos -> I64 .)
    DPT2            reduce using rule 79 (tipos -> I64 .)
    LLAVEIZQ        reduce using rule 79 (tipos -> I64 .)
    MAS             reduce using rule 79 (tipos -> I64 .)
    MENOS           reduce using rule 79 (tipos -> I64 .)
    POR             reduce using rule 79 (tipos -> I64 .)
    DIVIDIDO        reduce using rule 79 (tipos -> I64 .)
    MOD             reduce using rule 79 (tipos -> I64 .)
    AS              reduce using rule 79 (tipos -> I64 .)
    PT              reduce using rule 79 (tipos -> I64 .)
    IGUAL           reduce using rule 79 (tipos -> I64 .)
    MENOR           reduce using rule 79 (tipos -> I64 .)
    MAYOR           reduce using rule 79 (tipos -> I64 .)
    MEIGUAL         reduce using rule 79 (tipos -> I64 .)
    MAIGUAL         reduce using rule 79 (tipos -> I64 .)
    DIS             reduce using rule 79 (tipos -> I64 .)
    AND             reduce using rule 79 (tipos -> I64 .)
    OR              reduce using rule 79 (tipos -> I64 .)
    PTCOMA          reduce using rule 79 (tipos -> I64 .)
    CORDER          reduce using rule 79 (tipos -> I64 .)
    PT2             reduce using rule 79 (tipos -> I64 .)
    IMAYOR          reduce using rule 79 (tipos -> I64 .)
    AB              reduce using rule 79 (tipos -> I64 .)


state 64

    (80) tipos -> F64 .

    LLAVEDER        reduce using rule 80 (tipos -> F64 .)
    COMA            reduce using rule 80 (tipos -> F64 .)
    PARDER          reduce using rule 80 (tipos -> F64 .)
    DPT2            reduce using rule 80 (tipos -> F64 .)
    LLAVEIZQ        reduce using rule 80 (tipos -> F64 .)
    MAS             reduce using rule 80 (tipos -> F64 .)
    MENOS           reduce using rule 80 (tipos -> F64 .)
    POR             reduce using rule 80 (tipos -> F64 .)
    DIVIDIDO        reduce using rule 80 (tipos -> F64 .)
    MOD             reduce using rule 80 (tipos -> F64 .)
    AS              reduce using rule 80 (tipos -> F64 .)
    PT              reduce using rule 80 (tipos -> F64 .)
    IGUAL           reduce using rule 80 (tipos -> F64 .)
    MENOR           reduce using rule 80 (tipos -> F64 .)
    MAYOR           reduce using rule 80 (tipos -> F64 .)
    MEIGUAL         reduce using rule 80 (tipos -> F64 .)
    MAIGUAL         reduce using rule 80 (tipos -> F64 .)
    DIS             reduce using rule 80 (tipos -> F64 .)
    AND             reduce using rule 80 (tipos -> F64 .)
    OR              reduce using rule 80 (tipos -> F64 .)
    PTCOMA          reduce using rule 80 (tipos -> F64 .)
    CORDER          reduce using rule 80 (tipos -> F64 .)
    PT2             reduce using rule 80 (tipos -> F64 .)
    IMAYOR          reduce using rule 80 (tipos -> F64 .)
    AB              reduce using rule 80 (tipos -> F64 .)


state 65

    (81) tipos -> BOOL .

    LLAVEDER        reduce using rule 81 (tipos -> BOOL .)
    COMA            reduce using rule 81 (tipos -> BOOL .)
    PARDER          reduce using rule 81 (tipos -> BOOL .)
    DPT2            reduce using rule 81 (tipos -> BOOL .)
    LLAVEIZQ        reduce using rule 81 (tipos -> BOOL .)
    MAS             reduce using rule 81 (tipos -> BOOL .)
    MENOS           reduce using rule 81 (tipos -> BOOL .)
    POR             reduce using rule 81 (tipos -> BOOL .)
    DIVIDIDO        reduce using rule 81 (tipos -> BOOL .)
    MOD             reduce using rule 81 (tipos -> BOOL .)
    AS              reduce using rule 81 (tipos -> BOOL .)
    PT              reduce using rule 81 (tipos -> BOOL .)
    IGUAL           reduce using rule 81 (tipos -> BOOL .)
    MENOR           reduce using rule 81 (tipos -> BOOL .)
    MAYOR           reduce using rule 81 (tipos -> BOOL .)
    MEIGUAL         reduce using rule 81 (tipos -> BOOL .)
    MAIGUAL         reduce using rule 81 (tipos -> BOOL .)
    DIS             reduce using rule 81 (tipos -> BOOL .)
    AND             reduce using rule 81 (tipos -> BOOL .)
    OR              reduce using rule 81 (tipos -> BOOL .)
    PTCOMA          reduce using rule 81 (tipos -> BOOL .)
    CORDER          reduce using rule 81 (tipos -> BOOL .)
    PT2             reduce using rule 81 (tipos -> BOOL .)
    IMAYOR          reduce using rule 81 (tipos -> BOOL .)
    AB              reduce using rule 81 (tipos -> BOOL .)


state 66

    (82) tipos -> CHAR .

    LLAVEDER        reduce using rule 82 (tipos -> CHAR .)
    COMA            reduce using rule 82 (tipos -> CHAR .)
    PARDER          reduce using rule 82 (tipos -> CHAR .)
    DPT2            reduce using rule 82 (tipos -> CHAR .)
    LLAVEIZQ        reduce using rule 82 (tipos -> CHAR .)
    MAS             reduce using rule 82 (tipos -> CHAR .)
    MENOS           reduce using rule 82 (tipos -> CHAR .)
    POR             reduce using rule 82 (tipos -> CHAR .)
    DIVIDIDO        reduce using rule 82 (tipos -> CHAR .)
    MOD             reduce using rule 82 (tipos -> CHAR .)
    AS              reduce using rule 82 (tipos -> CHAR .)
    PT              reduce using rule 82 (tipos -> CHAR .)
    IGUAL           reduce using rule 82 (tipos -> CHAR .)
    MENOR           reduce using rule 82 (tipos -> CHAR .)
    MAYOR           reduce using rule 82 (tipos -> CHAR .)
    MEIGUAL         reduce using rule 82 (tipos -> CHAR .)
    MAIGUAL         reduce using rule 82 (tipos -> CHAR .)
    DIS             reduce using rule 82 (tipos -> CHAR .)
    AND             reduce using rule 82 (tipos -> CHAR .)
    OR              reduce using rule 82 (tipos -> CHAR .)
    PTCOMA          reduce using rule 82 (tipos -> CHAR .)
    CORDER          reduce using rule 82 (tipos -> CHAR .)
    PT2             reduce using rule 82 (tipos -> CHAR .)
    IMAYOR          reduce using rule 82 (tipos -> CHAR .)
    AB              reduce using rule 82 (tipos -> CHAR .)


state 67

    (83) tipos -> STRING .

    LLAVEDER        reduce using rule 83 (tipos -> STRING .)
    COMA            reduce using rule 83 (tipos -> STRING .)
    PARDER          reduce using rule 83 (tipos -> STRING .)
    DPT2            reduce using rule 83 (tipos -> STRING .)
    LLAVEIZQ        reduce using rule 83 (tipos -> STRING .)
    MAS             reduce using rule 83 (tipos -> STRING .)
    MENOS           reduce using rule 83 (tipos -> STRING .)
    POR             reduce using rule 83 (tipos -> STRING .)
    DIVIDIDO        reduce using rule 83 (tipos -> STRING .)
    MOD             reduce using rule 83 (tipos -> STRING .)
    AS              reduce using rule 83 (tipos -> STRING .)
    PT              reduce using rule 83 (tipos -> STRING .)
    IGUAL           reduce using rule 83 (tipos -> STRING .)
    MENOR           reduce using rule 83 (tipos -> STRING .)
    MAYOR           reduce using rule 83 (tipos -> STRING .)
    MEIGUAL         reduce using rule 83 (tipos -> STRING .)
    MAIGUAL         reduce using rule 83 (tipos -> STRING .)
    DIS             reduce using rule 83 (tipos -> STRING .)
    AND             reduce using rule 83 (tipos -> STRING .)
    OR              reduce using rule 83 (tipos -> STRING .)
    PTCOMA          reduce using rule 83 (tipos -> STRING .)
    CORDER          reduce using rule 83 (tipos -> STRING .)
    PT2             reduce using rule 83 (tipos -> STRING .)
    IMAYOR          reduce using rule 83 (tipos -> STRING .)
    AB              reduce using rule 83 (tipos -> STRING .)


state 68

    (84) tipos -> AMP . STR

    STR             shift and go to state 116


state 69

    (85) tipos -> USIZE .

    LLAVEDER        reduce using rule 85 (tipos -> USIZE .)
    COMA            reduce using rule 85 (tipos -> USIZE .)
    PARDER          reduce using rule 85 (tipos -> USIZE .)
    DPT2            reduce using rule 85 (tipos -> USIZE .)
    LLAVEIZQ        reduce using rule 85 (tipos -> USIZE .)
    MAS             reduce using rule 85 (tipos -> USIZE .)
    MENOS           reduce using rule 85 (tipos -> USIZE .)
    POR             reduce using rule 85 (tipos -> USIZE .)
    DIVIDIDO        reduce using rule 85 (tipos -> USIZE .)
    MOD             reduce using rule 85 (tipos -> USIZE .)
    AS              reduce using rule 85 (tipos -> USIZE .)
    PT              reduce using rule 85 (tipos -> USIZE .)
    IGUAL           reduce using rule 85 (tipos -> USIZE .)
    MENOR           reduce using rule 85 (tipos -> USIZE .)
    MAYOR           reduce using rule 85 (tipos -> USIZE .)
    MEIGUAL         reduce using rule 85 (tipos -> USIZE .)
    MAIGUAL         reduce using rule 85 (tipos -> USIZE .)
    DIS             reduce using rule 85 (tipos -> USIZE .)
    AND             reduce using rule 85 (tipos -> USIZE .)
    OR              reduce using rule 85 (tipos -> USIZE .)
    PTCOMA          reduce using rule 85 (tipos -> USIZE .)
    CORDER          reduce using rule 85 (tipos -> USIZE .)
    PT2             reduce using rule 85 (tipos -> USIZE .)
    IMAYOR          reduce using rule 85 (tipos -> USIZE .)
    AB              reduce using rule 85 (tipos -> USIZE .)


state 70

    (13) liststruct -> liststruct COMA ID . DPT tipos

    DPT             shift and go to state 117


state 71

    (3) funcion -> PUB FN ID PARIZQ parametros PARDER tipofun . LLAVEIZQ instrucciones LLAVEDER

    LLAVEIZQ        shift and go to state 118


state 72

    (4) funcion -> FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ . instrucciones LLAVEDER
    (17) instrucciones -> . instruccion instrucciones
    (18) instrucciones -> . instruccion
    (19) instruccion -> . LET mutable ID pyc arrtipos IGUAL logica PTCOMA
    (20) instruccion -> . ID listarreglo IGUAL logica PTCOMA
    (21) instruccion -> . ID PARIZQ listexpr PARDER PTCOMA
    (22) instruccion -> . PRINT NOT PARIZQ listexpr PARDER PTCOMA
    (23) instruccion -> . IF logica LLAVEIZQ instrucciones LLAVEDER unelse
    (24) instruccion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (25) instruccion -> . WHILE logica LLAVEIZQ instrucciones LLAVEDER
    (26) instruccion -> . FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER
    (27) instruccion -> . MATCH logica LLAVEIZQ insmatch LLAVEDER
    (28) instruccion -> . BREAK PTCOMA
    (29) instruccion -> . CONTINUE PTCOMA
    (30) instruccion -> . BREAK logica PTCOMA
    (31) instruccion -> . RETURN logica PTCOMA

    LET             shift and go to state 51
    ID              shift and go to state 52
    PRINT           shift and go to state 53
    IF              shift and go to state 54
    LOOP            shift and go to state 55
    WHILE           shift and go to state 56
    FOR             shift and go to state 57
    MATCH           shift and go to state 58
    BREAK           shift and go to state 59
    CONTINUE        shift and go to state 60
    RETURN          shift and go to state 61

    instrucciones                  shift and go to state 119
    instruccion                    shift and go to state 50

state 73

    (15) tipofun -> MENOS MAYOR . tipos
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE

    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    AMP             shift and go to state 68
    USIZE           shift and go to state 69

    tipos                          shift and go to state 120

state 74

    (11) parametros2 -> parametros2 COMA mutable ID . DPT tipos

    DPT             shift and go to state 121


state 75

    (12) parametros2 -> mutable ID DPT tipos .

    COMA            reduce using rule 12 (parametros2 -> mutable ID DPT tipos .)
    PARDER          reduce using rule 12 (parametros2 -> mutable ID DPT tipos .)


state 76

    (7) funcion -> FN MAIN PARIZQ PARDER LLAVEIZQ instrucciones LLAVEDER .

    PUB             reduce using rule 7 (funcion -> FN MAIN PARIZQ PARDER LLAVEIZQ instrucciones LLAVEDER .)
    FN              reduce using rule 7 (funcion -> FN MAIN PARIZQ PARDER LLAVEIZQ instrucciones LLAVEDER .)
    MODF            reduce using rule 7 (funcion -> FN MAIN PARIZQ PARDER LLAVEIZQ instrucciones LLAVEDER .)
    STRUCT          reduce using rule 7 (funcion -> FN MAIN PARIZQ PARDER LLAVEIZQ instrucciones LLAVEDER .)
    $end            reduce using rule 7 (funcion -> FN MAIN PARIZQ PARDER LLAVEIZQ instrucciones LLAVEDER .)
    LLAVEDER        reduce using rule 7 (funcion -> FN MAIN PARIZQ PARDER LLAVEIZQ instrucciones LLAVEDER .)


state 77

    (17) instrucciones -> instruccion instrucciones .

    LLAVEDER        reduce using rule 17 (instrucciones -> instruccion instrucciones .)
    COMA            reduce using rule 17 (instrucciones -> instruccion instrucciones .)


state 78

    (19) instruccion -> LET mutable . ID pyc arrtipos IGUAL logica PTCOMA

    ID              shift and go to state 122


state 79

    (20) instruccion -> ID listarreglo . IGUAL logica PTCOMA

    IGUAL           shift and go to state 123


state 80

    (21) instruccion -> ID PARIZQ . listexpr PARDER PTCOMA
    (123) listexpr -> . listexpr COMA logica
    (124) listexpr -> . logica
    (58) logica -> . logica AND logica
    (59) logica -> . logica OR logica
    (60) logica -> . NOT logica
    (61) logica -> . rel
    (62) rel -> . rel IGUAL IGUAL rel
    (63) rel -> . rel MENOR rel
    (64) rel -> . rel MAYOR rel
    (65) rel -> . rel MEIGUAL rel
    (66) rel -> . rel MAIGUAL rel
    (67) rel -> . rel DIS rel
    (68) rel -> . expresion
    (86) expresion -> . expresion MAS expresion
    (87) expresion -> . expresion MENOS expresion
    (88) expresion -> . expresion POR expresion
    (89) expresion -> . expresion DIVIDIDO expresion
    (90) expresion -> . expresion MOD expresion
    (91) expresion -> . expresion AS tipos
    (92) expresion -> . instrif
    (93) expresion -> . MENOS expresion
    (94) expresion -> . PARIZQ logica PARDER
    (95) expresion -> . ENTERO
    (96) expresion -> . DECIMAL
    (97) expresion -> . FORM
    (98) expresion -> . TRUE
    (99) expresion -> . FALSE
    (100) expresion -> . VECM NOT listarreglo
    (101) expresion -> . ID PARIZQ listexpr PARDER
    (102) expresion -> . ID
    (103) expresion -> . ID listaarreglo
    (106) expresion -> . CORIZQ listexpr CORDER
    (107) expresion -> . CHARE
    (108) expresion -> . expresion DPT2 expresion
    (109) expresion -> . AMP expresion
    (110) expresion -> . tipos DPT2 POW PARIZQ logica COMA logica PARDER
    (111) expresion -> . tipos DPT2 POWF PARIZQ logica COMA logica PARDER
    (112) expresion -> . instrloop
    (113) expresion -> . instrmatch
    (114) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (115) expresion -> . expresion PT SQRT PARIZQ PARDER
    (116) expresion -> . expresion PT ABS PARIZQ PARDER
    (117) expresion -> . expresion PT CLONE PARIZQ PARDER
    (118) expresion -> . expresion PT LEN PARIZQ PARDER
    (119) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (120) expresion -> . expresion PT CONTA PARIZQ expresion PARDER
    (49) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE
    (37) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (45) instrmatch -> . MATCH logica LLAVEIZQ opmatch LLAVEDER

    NOT             shift and go to state 87
    MENOS           shift and go to state 90
    PARIZQ          shift and go to state 93
    ENTERO          shift and go to state 94
    DECIMAL         shift and go to state 95
    FORM            shift and go to state 96
    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    VECM            shift and go to state 99
    ID              shift and go to state 100
    CORIZQ          shift and go to state 101
    CHARE           shift and go to state 102
    AMP             shift and go to state 103
    IF              shift and go to state 85
    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    USIZE           shift and go to state 69
    LOOP            shift and go to state 106
    MATCH           shift and go to state 107

    listexpr                       shift and go to state 124
    logica                         shift and go to state 125
    rel                            shift and go to state 88
    expresion                      shift and go to state 89
    tipos                          shift and go to state 91
    instrif                        shift and go to state 92
    instrloop                      shift and go to state 104
    instrmatch                     shift and go to state 105

state 81

    (121) listarreglo -> listaarreglo .
    (104) listaarreglo -> listaarreglo . CORIZQ expresion CORDER

    IGUAL           reduce using rule 121 (listarreglo -> listaarreglo .)
    MAS             reduce using rule 121 (listarreglo -> listaarreglo .)
    MENOS           reduce using rule 121 (listarreglo -> listaarreglo .)
    POR             reduce using rule 121 (listarreglo -> listaarreglo .)
    DIVIDIDO        reduce using rule 121 (listarreglo -> listaarreglo .)
    MOD             reduce using rule 121 (listarreglo -> listaarreglo .)
    AS              reduce using rule 121 (listarreglo -> listaarreglo .)
    DPT2            reduce using rule 121 (listarreglo -> listaarreglo .)
    PT              reduce using rule 121 (listarreglo -> listaarreglo .)
    MENOR           reduce using rule 121 (listarreglo -> listaarreglo .)
    MAYOR           reduce using rule 121 (listarreglo -> listaarreglo .)
    MEIGUAL         reduce using rule 121 (listarreglo -> listaarreglo .)
    MAIGUAL         reduce using rule 121 (listarreglo -> listaarreglo .)
    DIS             reduce using rule 121 (listarreglo -> listaarreglo .)
    LLAVEIZQ        reduce using rule 121 (listarreglo -> listaarreglo .)
    AND             reduce using rule 121 (listarreglo -> listaarreglo .)
    OR              reduce using rule 121 (listarreglo -> listaarreglo .)
    PTCOMA          reduce using rule 121 (listarreglo -> listaarreglo .)
    PARDER          reduce using rule 121 (listarreglo -> listaarreglo .)
    COMA            reduce using rule 121 (listarreglo -> listaarreglo .)
    CORDER          reduce using rule 121 (listarreglo -> listaarreglo .)
    PT2             reduce using rule 121 (listarreglo -> listaarreglo .)
    IMAYOR          reduce using rule 121 (listarreglo -> listaarreglo .)
    AB              reduce using rule 121 (listarreglo -> listaarreglo .)
    LLAVEDER        reduce using rule 121 (listarreglo -> listaarreglo .)
    CORIZQ          shift and go to state 126


state 82

    (122) listarreglo -> empty .

    IGUAL           reduce using rule 122 (listarreglo -> empty .)
    MAS             reduce using rule 122 (listarreglo -> empty .)
    MENOS           reduce using rule 122 (listarreglo -> empty .)
    POR             reduce using rule 122 (listarreglo -> empty .)
    DIVIDIDO        reduce using rule 122 (listarreglo -> empty .)
    MOD             reduce using rule 122 (listarreglo -> empty .)
    AS              reduce using rule 122 (listarreglo -> empty .)
    DPT2            reduce using rule 122 (listarreglo -> empty .)
    PT              reduce using rule 122 (listarreglo -> empty .)
    MENOR           reduce using rule 122 (listarreglo -> empty .)
    MAYOR           reduce using rule 122 (listarreglo -> empty .)
    MEIGUAL         reduce using rule 122 (listarreglo -> empty .)
    MAIGUAL         reduce using rule 122 (listarreglo -> empty .)
    DIS             reduce using rule 122 (listarreglo -> empty .)
    LLAVEIZQ        reduce using rule 122 (listarreglo -> empty .)
    AND             reduce using rule 122 (listarreglo -> empty .)
    OR              reduce using rule 122 (listarreglo -> empty .)
    PTCOMA          reduce using rule 122 (listarreglo -> empty .)
    PARDER          reduce using rule 122 (listarreglo -> empty .)
    COMA            reduce using rule 122 (listarreglo -> empty .)
    CORDER          reduce using rule 122 (listarreglo -> empty .)
    PT2             reduce using rule 122 (listarreglo -> empty .)
    IMAYOR          reduce using rule 122 (listarreglo -> empty .)
    AB              reduce using rule 122 (listarreglo -> empty .)
    LLAVEDER        reduce using rule 122 (listarreglo -> empty .)


state 83

    (105) listaarreglo -> CORIZQ . expresion CORDER
    (86) expresion -> . expresion MAS expresion
    (87) expresion -> . expresion MENOS expresion
    (88) expresion -> . expresion POR expresion
    (89) expresion -> . expresion DIVIDIDO expresion
    (90) expresion -> . expresion MOD expresion
    (91) expresion -> . expresion AS tipos
    (92) expresion -> . instrif
    (93) expresion -> . MENOS expresion
    (94) expresion -> . PARIZQ logica PARDER
    (95) expresion -> . ENTERO
    (96) expresion -> . DECIMAL
    (97) expresion -> . FORM
    (98) expresion -> . TRUE
    (99) expresion -> . FALSE
    (100) expresion -> . VECM NOT listarreglo
    (101) expresion -> . ID PARIZQ listexpr PARDER
    (102) expresion -> . ID
    (103) expresion -> . ID listaarreglo
    (106) expresion -> . CORIZQ listexpr CORDER
    (107) expresion -> . CHARE
    (108) expresion -> . expresion DPT2 expresion
    (109) expresion -> . AMP expresion
    (110) expresion -> . tipos DPT2 POW PARIZQ logica COMA logica PARDER
    (111) expresion -> . tipos DPT2 POWF PARIZQ logica COMA logica PARDER
    (112) expresion -> . instrloop
    (113) expresion -> . instrmatch
    (114) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (115) expresion -> . expresion PT SQRT PARIZQ PARDER
    (116) expresion -> . expresion PT ABS PARIZQ PARDER
    (117) expresion -> . expresion PT CLONE PARIZQ PARDER
    (118) expresion -> . expresion PT LEN PARIZQ PARDER
    (119) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (120) expresion -> . expresion PT CONTA PARIZQ expresion PARDER
    (49) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE
    (37) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (45) instrmatch -> . MATCH logica LLAVEIZQ opmatch LLAVEDER

    MENOS           shift and go to state 90
    PARIZQ          shift and go to state 93
    ENTERO          shift and go to state 94
    DECIMAL         shift and go to state 95
    FORM            shift and go to state 96
    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    VECM            shift and go to state 99
    ID              shift and go to state 100
    CORIZQ          shift and go to state 101
    CHARE           shift and go to state 102
    AMP             shift and go to state 103
    IF              shift and go to state 85
    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    USIZE           shift and go to state 69
    LOOP            shift and go to state 106
    MATCH           shift and go to state 107

    expresion                      shift and go to state 127
    tipos                          shift and go to state 91
    instrif                        shift and go to state 92
    instrloop                      shift and go to state 104
    instrmatch                     shift and go to state 105

state 84

    (22) instruccion -> PRINT NOT . PARIZQ listexpr PARDER PTCOMA

    PARIZQ          shift and go to state 128


state 85

    (49) instrif -> IF . logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (58) logica -> . logica AND logica
    (59) logica -> . logica OR logica
    (60) logica -> . NOT logica
    (61) logica -> . rel
    (62) rel -> . rel IGUAL IGUAL rel
    (63) rel -> . rel MENOR rel
    (64) rel -> . rel MAYOR rel
    (65) rel -> . rel MEIGUAL rel
    (66) rel -> . rel MAIGUAL rel
    (67) rel -> . rel DIS rel
    (68) rel -> . expresion
    (86) expresion -> . expresion MAS expresion
    (87) expresion -> . expresion MENOS expresion
    (88) expresion -> . expresion POR expresion
    (89) expresion -> . expresion DIVIDIDO expresion
    (90) expresion -> . expresion MOD expresion
    (91) expresion -> . expresion AS tipos
    (92) expresion -> . instrif
    (93) expresion -> . MENOS expresion
    (94) expresion -> . PARIZQ logica PARDER
    (95) expresion -> . ENTERO
    (96) expresion -> . DECIMAL
    (97) expresion -> . FORM
    (98) expresion -> . TRUE
    (99) expresion -> . FALSE
    (100) expresion -> . VECM NOT listarreglo
    (101) expresion -> . ID PARIZQ listexpr PARDER
    (102) expresion -> . ID
    (103) expresion -> . ID listaarreglo
    (106) expresion -> . CORIZQ listexpr CORDER
    (107) expresion -> . CHARE
    (108) expresion -> . expresion DPT2 expresion
    (109) expresion -> . AMP expresion
    (110) expresion -> . tipos DPT2 POW PARIZQ logica COMA logica PARDER
    (111) expresion -> . tipos DPT2 POWF PARIZQ logica COMA logica PARDER
    (112) expresion -> . instrloop
    (113) expresion -> . instrmatch
    (114) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (115) expresion -> . expresion PT SQRT PARIZQ PARDER
    (116) expresion -> . expresion PT ABS PARIZQ PARDER
    (117) expresion -> . expresion PT CLONE PARIZQ PARDER
    (118) expresion -> . expresion PT LEN PARIZQ PARDER
    (119) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (120) expresion -> . expresion PT CONTA PARIZQ expresion PARDER
    (49) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE
    (37) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (45) instrmatch -> . MATCH logica LLAVEIZQ opmatch LLAVEDER

    NOT             shift and go to state 87
    MENOS           shift and go to state 90
    PARIZQ          shift and go to state 93
    ENTERO          shift and go to state 94
    DECIMAL         shift and go to state 95
    FORM            shift and go to state 96
    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    VECM            shift and go to state 99
    ID              shift and go to state 100
    CORIZQ          shift and go to state 101
    CHARE           shift and go to state 102
    AMP             shift and go to state 103
    IF              shift and go to state 85
    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    USIZE           shift and go to state 69
    LOOP            shift and go to state 106
    MATCH           shift and go to state 107

    logica                         shift and go to state 129
    rel                            shift and go to state 88
    expresion                      shift and go to state 89
    tipos                          shift and go to state 91
    instrif                        shift and go to state 92
    instrloop                      shift and go to state 104
    instrmatch                     shift and go to state 105

state 86

    (23) instruccion -> IF logica . LLAVEIZQ instrucciones LLAVEDER unelse
    (58) logica -> logica . AND logica
    (59) logica -> logica . OR logica

    LLAVEIZQ        shift and go to state 130
    AND             shift and go to state 131
    OR              shift and go to state 132


state 87

    (60) logica -> NOT . logica
    (58) logica -> . logica AND logica
    (59) logica -> . logica OR logica
    (60) logica -> . NOT logica
    (61) logica -> . rel
    (62) rel -> . rel IGUAL IGUAL rel
    (63) rel -> . rel MENOR rel
    (64) rel -> . rel MAYOR rel
    (65) rel -> . rel MEIGUAL rel
    (66) rel -> . rel MAIGUAL rel
    (67) rel -> . rel DIS rel
    (68) rel -> . expresion
    (86) expresion -> . expresion MAS expresion
    (87) expresion -> . expresion MENOS expresion
    (88) expresion -> . expresion POR expresion
    (89) expresion -> . expresion DIVIDIDO expresion
    (90) expresion -> . expresion MOD expresion
    (91) expresion -> . expresion AS tipos
    (92) expresion -> . instrif
    (93) expresion -> . MENOS expresion
    (94) expresion -> . PARIZQ logica PARDER
    (95) expresion -> . ENTERO
    (96) expresion -> . DECIMAL
    (97) expresion -> . FORM
    (98) expresion -> . TRUE
    (99) expresion -> . FALSE
    (100) expresion -> . VECM NOT listarreglo
    (101) expresion -> . ID PARIZQ listexpr PARDER
    (102) expresion -> . ID
    (103) expresion -> . ID listaarreglo
    (106) expresion -> . CORIZQ listexpr CORDER
    (107) expresion -> . CHARE
    (108) expresion -> . expresion DPT2 expresion
    (109) expresion -> . AMP expresion
    (110) expresion -> . tipos DPT2 POW PARIZQ logica COMA logica PARDER
    (111) expresion -> . tipos DPT2 POWF PARIZQ logica COMA logica PARDER
    (112) expresion -> . instrloop
    (113) expresion -> . instrmatch
    (114) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (115) expresion -> . expresion PT SQRT PARIZQ PARDER
    (116) expresion -> . expresion PT ABS PARIZQ PARDER
    (117) expresion -> . expresion PT CLONE PARIZQ PARDER
    (118) expresion -> . expresion PT LEN PARIZQ PARDER
    (119) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (120) expresion -> . expresion PT CONTA PARIZQ expresion PARDER
    (49) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE
    (37) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (45) instrmatch -> . MATCH logica LLAVEIZQ opmatch LLAVEDER

    NOT             shift and go to state 87
    MENOS           shift and go to state 90
    PARIZQ          shift and go to state 93
    ENTERO          shift and go to state 94
    DECIMAL         shift and go to state 95
    FORM            shift and go to state 96
    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    VECM            shift and go to state 99
    ID              shift and go to state 100
    CORIZQ          shift and go to state 101
    CHARE           shift and go to state 102
    AMP             shift and go to state 103
    IF              shift and go to state 85
    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    USIZE           shift and go to state 69
    LOOP            shift and go to state 106
    MATCH           shift and go to state 107

    logica                         shift and go to state 133
    rel                            shift and go to state 88
    expresion                      shift and go to state 89
    tipos                          shift and go to state 91
    instrif                        shift and go to state 92
    instrloop                      shift and go to state 104
    instrmatch                     shift and go to state 105

state 88

    (61) logica -> rel .
    (62) rel -> rel . IGUAL IGUAL rel
    (63) rel -> rel . MENOR rel
    (64) rel -> rel . MAYOR rel
    (65) rel -> rel . MEIGUAL rel
    (66) rel -> rel . MAIGUAL rel
    (67) rel -> rel . DIS rel

    LLAVEIZQ        reduce using rule 61 (logica -> rel .)
    AND             reduce using rule 61 (logica -> rel .)
    OR              reduce using rule 61 (logica -> rel .)
    PTCOMA          reduce using rule 61 (logica -> rel .)
    PARDER          reduce using rule 61 (logica -> rel .)
    COMA            reduce using rule 61 (logica -> rel .)
    CORDER          reduce using rule 61 (logica -> rel .)
    PT2             reduce using rule 61 (logica -> rel .)
    IMAYOR          reduce using rule 61 (logica -> rel .)
    AB              reduce using rule 61 (logica -> rel .)
    IGUAL           shift and go to state 134
    MENOR           shift and go to state 135
    MAYOR           shift and go to state 136
    MEIGUAL         shift and go to state 137
    MAIGUAL         shift and go to state 138
    DIS             shift and go to state 139


state 89

    (68) rel -> expresion .
    (86) expresion -> expresion . MAS expresion
    (87) expresion -> expresion . MENOS expresion
    (88) expresion -> expresion . POR expresion
    (89) expresion -> expresion . DIVIDIDO expresion
    (90) expresion -> expresion . MOD expresion
    (91) expresion -> expresion . AS tipos
    (108) expresion -> expresion . DPT2 expresion
    (114) expresion -> expresion . PT TOSTRING PARIZQ PARDER
    (115) expresion -> expresion . PT SQRT PARIZQ PARDER
    (116) expresion -> expresion . PT ABS PARIZQ PARDER
    (117) expresion -> expresion . PT CLONE PARIZQ PARDER
    (118) expresion -> expresion . PT LEN PARIZQ PARDER
    (119) expresion -> expresion . PT TOOWNED PARIZQ PARDER
    (120) expresion -> expresion . PT CONTA PARIZQ expresion PARDER

    IGUAL           reduce using rule 68 (rel -> expresion .)
    MENOR           reduce using rule 68 (rel -> expresion .)
    MAYOR           reduce using rule 68 (rel -> expresion .)
    MEIGUAL         reduce using rule 68 (rel -> expresion .)
    MAIGUAL         reduce using rule 68 (rel -> expresion .)
    DIS             reduce using rule 68 (rel -> expresion .)
    LLAVEIZQ        reduce using rule 68 (rel -> expresion .)
    AND             reduce using rule 68 (rel -> expresion .)
    OR              reduce using rule 68 (rel -> expresion .)
    PTCOMA          reduce using rule 68 (rel -> expresion .)
    PARDER          reduce using rule 68 (rel -> expresion .)
    COMA            reduce using rule 68 (rel -> expresion .)
    CORDER          reduce using rule 68 (rel -> expresion .)
    PT2             reduce using rule 68 (rel -> expresion .)
    IMAYOR          reduce using rule 68 (rel -> expresion .)
    AB              reduce using rule 68 (rel -> expresion .)
    MAS             shift and go to state 140
    MENOS           shift and go to state 141
    POR             shift and go to state 142
    DIVIDIDO        shift and go to state 143
    MOD             shift and go to state 144
    AS              shift and go to state 145
    DPT2            shift and go to state 146
    PT              shift and go to state 147


state 90

    (93) expresion -> MENOS . expresion
    (86) expresion -> . expresion MAS expresion
    (87) expresion -> . expresion MENOS expresion
    (88) expresion -> . expresion POR expresion
    (89) expresion -> . expresion DIVIDIDO expresion
    (90) expresion -> . expresion MOD expresion
    (91) expresion -> . expresion AS tipos
    (92) expresion -> . instrif
    (93) expresion -> . MENOS expresion
    (94) expresion -> . PARIZQ logica PARDER
    (95) expresion -> . ENTERO
    (96) expresion -> . DECIMAL
    (97) expresion -> . FORM
    (98) expresion -> . TRUE
    (99) expresion -> . FALSE
    (100) expresion -> . VECM NOT listarreglo
    (101) expresion -> . ID PARIZQ listexpr PARDER
    (102) expresion -> . ID
    (103) expresion -> . ID listaarreglo
    (106) expresion -> . CORIZQ listexpr CORDER
    (107) expresion -> . CHARE
    (108) expresion -> . expresion DPT2 expresion
    (109) expresion -> . AMP expresion
    (110) expresion -> . tipos DPT2 POW PARIZQ logica COMA logica PARDER
    (111) expresion -> . tipos DPT2 POWF PARIZQ logica COMA logica PARDER
    (112) expresion -> . instrloop
    (113) expresion -> . instrmatch
    (114) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (115) expresion -> . expresion PT SQRT PARIZQ PARDER
    (116) expresion -> . expresion PT ABS PARIZQ PARDER
    (117) expresion -> . expresion PT CLONE PARIZQ PARDER
    (118) expresion -> . expresion PT LEN PARIZQ PARDER
    (119) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (120) expresion -> . expresion PT CONTA PARIZQ expresion PARDER
    (49) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE
    (37) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (45) instrmatch -> . MATCH logica LLAVEIZQ opmatch LLAVEDER

    MENOS           shift and go to state 90
    PARIZQ          shift and go to state 93
    ENTERO          shift and go to state 94
    DECIMAL         shift and go to state 95
    FORM            shift and go to state 96
    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    VECM            shift and go to state 99
    ID              shift and go to state 100
    CORIZQ          shift and go to state 101
    CHARE           shift and go to state 102
    AMP             shift and go to state 103
    IF              shift and go to state 85
    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    USIZE           shift and go to state 69
    LOOP            shift and go to state 106
    MATCH           shift and go to state 107

    expresion                      shift and go to state 148
    tipos                          shift and go to state 91
    instrif                        shift and go to state 92
    instrloop                      shift and go to state 104
    instrmatch                     shift and go to state 105

state 91

    (110) expresion -> tipos . DPT2 POW PARIZQ logica COMA logica PARDER
    (111) expresion -> tipos . DPT2 POWF PARIZQ logica COMA logica PARDER

    DPT2            shift and go to state 149


state 92

    (92) expresion -> instrif .

    MAS             reduce using rule 92 (expresion -> instrif .)
    MENOS           reduce using rule 92 (expresion -> instrif .)
    POR             reduce using rule 92 (expresion -> instrif .)
    DIVIDIDO        reduce using rule 92 (expresion -> instrif .)
    MOD             reduce using rule 92 (expresion -> instrif .)
    AS              reduce using rule 92 (expresion -> instrif .)
    DPT2            reduce using rule 92 (expresion -> instrif .)
    PT              reduce using rule 92 (expresion -> instrif .)
    IGUAL           reduce using rule 92 (expresion -> instrif .)
    MENOR           reduce using rule 92 (expresion -> instrif .)
    MAYOR           reduce using rule 92 (expresion -> instrif .)
    MEIGUAL         reduce using rule 92 (expresion -> instrif .)
    MAIGUAL         reduce using rule 92 (expresion -> instrif .)
    DIS             reduce using rule 92 (expresion -> instrif .)
    LLAVEIZQ        reduce using rule 92 (expresion -> instrif .)
    AND             reduce using rule 92 (expresion -> instrif .)
    OR              reduce using rule 92 (expresion -> instrif .)
    PTCOMA          reduce using rule 92 (expresion -> instrif .)
    PARDER          reduce using rule 92 (expresion -> instrif .)
    COMA            reduce using rule 92 (expresion -> instrif .)
    CORDER          reduce using rule 92 (expresion -> instrif .)
    PT2             reduce using rule 92 (expresion -> instrif .)
    IMAYOR          reduce using rule 92 (expresion -> instrif .)
    AB              reduce using rule 92 (expresion -> instrif .)
    LLAVEDER        reduce using rule 92 (expresion -> instrif .)


state 93

    (94) expresion -> PARIZQ . logica PARDER
    (58) logica -> . logica AND logica
    (59) logica -> . logica OR logica
    (60) logica -> . NOT logica
    (61) logica -> . rel
    (62) rel -> . rel IGUAL IGUAL rel
    (63) rel -> . rel MENOR rel
    (64) rel -> . rel MAYOR rel
    (65) rel -> . rel MEIGUAL rel
    (66) rel -> . rel MAIGUAL rel
    (67) rel -> . rel DIS rel
    (68) rel -> . expresion
    (86) expresion -> . expresion MAS expresion
    (87) expresion -> . expresion MENOS expresion
    (88) expresion -> . expresion POR expresion
    (89) expresion -> . expresion DIVIDIDO expresion
    (90) expresion -> . expresion MOD expresion
    (91) expresion -> . expresion AS tipos
    (92) expresion -> . instrif
    (93) expresion -> . MENOS expresion
    (94) expresion -> . PARIZQ logica PARDER
    (95) expresion -> . ENTERO
    (96) expresion -> . DECIMAL
    (97) expresion -> . FORM
    (98) expresion -> . TRUE
    (99) expresion -> . FALSE
    (100) expresion -> . VECM NOT listarreglo
    (101) expresion -> . ID PARIZQ listexpr PARDER
    (102) expresion -> . ID
    (103) expresion -> . ID listaarreglo
    (106) expresion -> . CORIZQ listexpr CORDER
    (107) expresion -> . CHARE
    (108) expresion -> . expresion DPT2 expresion
    (109) expresion -> . AMP expresion
    (110) expresion -> . tipos DPT2 POW PARIZQ logica COMA logica PARDER
    (111) expresion -> . tipos DPT2 POWF PARIZQ logica COMA logica PARDER
    (112) expresion -> . instrloop
    (113) expresion -> . instrmatch
    (114) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (115) expresion -> . expresion PT SQRT PARIZQ PARDER
    (116) expresion -> . expresion PT ABS PARIZQ PARDER
    (117) expresion -> . expresion PT CLONE PARIZQ PARDER
    (118) expresion -> . expresion PT LEN PARIZQ PARDER
    (119) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (120) expresion -> . expresion PT CONTA PARIZQ expresion PARDER
    (49) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE
    (37) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (45) instrmatch -> . MATCH logica LLAVEIZQ opmatch LLAVEDER

    NOT             shift and go to state 87
    MENOS           shift and go to state 90
    PARIZQ          shift and go to state 93
    ENTERO          shift and go to state 94
    DECIMAL         shift and go to state 95
    FORM            shift and go to state 96
    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    VECM            shift and go to state 99
    ID              shift and go to state 100
    CORIZQ          shift and go to state 101
    CHARE           shift and go to state 102
    AMP             shift and go to state 103
    IF              shift and go to state 85
    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    USIZE           shift and go to state 69
    LOOP            shift and go to state 106
    MATCH           shift and go to state 107

    logica                         shift and go to state 150
    rel                            shift and go to state 88
    expresion                      shift and go to state 89
    tipos                          shift and go to state 91
    instrif                        shift and go to state 92
    instrloop                      shift and go to state 104
    instrmatch                     shift and go to state 105

state 94

    (95) expresion -> ENTERO .

    MAS             reduce using rule 95 (expresion -> ENTERO .)
    MENOS           reduce using rule 95 (expresion -> ENTERO .)
    POR             reduce using rule 95 (expresion -> ENTERO .)
    DIVIDIDO        reduce using rule 95 (expresion -> ENTERO .)
    MOD             reduce using rule 95 (expresion -> ENTERO .)
    AS              reduce using rule 95 (expresion -> ENTERO .)
    DPT2            reduce using rule 95 (expresion -> ENTERO .)
    PT              reduce using rule 95 (expresion -> ENTERO .)
    IGUAL           reduce using rule 95 (expresion -> ENTERO .)
    MENOR           reduce using rule 95 (expresion -> ENTERO .)
    MAYOR           reduce using rule 95 (expresion -> ENTERO .)
    MEIGUAL         reduce using rule 95 (expresion -> ENTERO .)
    MAIGUAL         reduce using rule 95 (expresion -> ENTERO .)
    DIS             reduce using rule 95 (expresion -> ENTERO .)
    LLAVEIZQ        reduce using rule 95 (expresion -> ENTERO .)
    AND             reduce using rule 95 (expresion -> ENTERO .)
    OR              reduce using rule 95 (expresion -> ENTERO .)
    PTCOMA          reduce using rule 95 (expresion -> ENTERO .)
    PARDER          reduce using rule 95 (expresion -> ENTERO .)
    COMA            reduce using rule 95 (expresion -> ENTERO .)
    CORDER          reduce using rule 95 (expresion -> ENTERO .)
    PT2             reduce using rule 95 (expresion -> ENTERO .)
    IMAYOR          reduce using rule 95 (expresion -> ENTERO .)
    AB              reduce using rule 95 (expresion -> ENTERO .)
    LLAVEDER        reduce using rule 95 (expresion -> ENTERO .)


state 95

    (96) expresion -> DECIMAL .

    MAS             reduce using rule 96 (expresion -> DECIMAL .)
    MENOS           reduce using rule 96 (expresion -> DECIMAL .)
    POR             reduce using rule 96 (expresion -> DECIMAL .)
    DIVIDIDO        reduce using rule 96 (expresion -> DECIMAL .)
    MOD             reduce using rule 96 (expresion -> DECIMAL .)
    AS              reduce using rule 96 (expresion -> DECIMAL .)
    DPT2            reduce using rule 96 (expresion -> DECIMAL .)
    PT              reduce using rule 96 (expresion -> DECIMAL .)
    IGUAL           reduce using rule 96 (expresion -> DECIMAL .)
    MENOR           reduce using rule 96 (expresion -> DECIMAL .)
    MAYOR           reduce using rule 96 (expresion -> DECIMAL .)
    MEIGUAL         reduce using rule 96 (expresion -> DECIMAL .)
    MAIGUAL         reduce using rule 96 (expresion -> DECIMAL .)
    DIS             reduce using rule 96 (expresion -> DECIMAL .)
    LLAVEIZQ        reduce using rule 96 (expresion -> DECIMAL .)
    AND             reduce using rule 96 (expresion -> DECIMAL .)
    OR              reduce using rule 96 (expresion -> DECIMAL .)
    PTCOMA          reduce using rule 96 (expresion -> DECIMAL .)
    PARDER          reduce using rule 96 (expresion -> DECIMAL .)
    COMA            reduce using rule 96 (expresion -> DECIMAL .)
    CORDER          reduce using rule 96 (expresion -> DECIMAL .)
    PT2             reduce using rule 96 (expresion -> DECIMAL .)
    IMAYOR          reduce using rule 96 (expresion -> DECIMAL .)
    AB              reduce using rule 96 (expresion -> DECIMAL .)
    LLAVEDER        reduce using rule 96 (expresion -> DECIMAL .)


state 96

    (97) expresion -> FORM .

    MAS             reduce using rule 97 (expresion -> FORM .)
    MENOS           reduce using rule 97 (expresion -> FORM .)
    POR             reduce using rule 97 (expresion -> FORM .)
    DIVIDIDO        reduce using rule 97 (expresion -> FORM .)
    MOD             reduce using rule 97 (expresion -> FORM .)
    AS              reduce using rule 97 (expresion -> FORM .)
    DPT2            reduce using rule 97 (expresion -> FORM .)
    PT              reduce using rule 97 (expresion -> FORM .)
    IGUAL           reduce using rule 97 (expresion -> FORM .)
    MENOR           reduce using rule 97 (expresion -> FORM .)
    MAYOR           reduce using rule 97 (expresion -> FORM .)
    MEIGUAL         reduce using rule 97 (expresion -> FORM .)
    MAIGUAL         reduce using rule 97 (expresion -> FORM .)
    DIS             reduce using rule 97 (expresion -> FORM .)
    LLAVEIZQ        reduce using rule 97 (expresion -> FORM .)
    AND             reduce using rule 97 (expresion -> FORM .)
    OR              reduce using rule 97 (expresion -> FORM .)
    PTCOMA          reduce using rule 97 (expresion -> FORM .)
    PARDER          reduce using rule 97 (expresion -> FORM .)
    COMA            reduce using rule 97 (expresion -> FORM .)
    CORDER          reduce using rule 97 (expresion -> FORM .)
    PT2             reduce using rule 97 (expresion -> FORM .)
    IMAYOR          reduce using rule 97 (expresion -> FORM .)
    AB              reduce using rule 97 (expresion -> FORM .)
    LLAVEDER        reduce using rule 97 (expresion -> FORM .)


state 97

    (98) expresion -> TRUE .

    MAS             reduce using rule 98 (expresion -> TRUE .)
    MENOS           reduce using rule 98 (expresion -> TRUE .)
    POR             reduce using rule 98 (expresion -> TRUE .)
    DIVIDIDO        reduce using rule 98 (expresion -> TRUE .)
    MOD             reduce using rule 98 (expresion -> TRUE .)
    AS              reduce using rule 98 (expresion -> TRUE .)
    DPT2            reduce using rule 98 (expresion -> TRUE .)
    PT              reduce using rule 98 (expresion -> TRUE .)
    IGUAL           reduce using rule 98 (expresion -> TRUE .)
    MENOR           reduce using rule 98 (expresion -> TRUE .)
    MAYOR           reduce using rule 98 (expresion -> TRUE .)
    MEIGUAL         reduce using rule 98 (expresion -> TRUE .)
    MAIGUAL         reduce using rule 98 (expresion -> TRUE .)
    DIS             reduce using rule 98 (expresion -> TRUE .)
    LLAVEIZQ        reduce using rule 98 (expresion -> TRUE .)
    AND             reduce using rule 98 (expresion -> TRUE .)
    OR              reduce using rule 98 (expresion -> TRUE .)
    PTCOMA          reduce using rule 98 (expresion -> TRUE .)
    PARDER          reduce using rule 98 (expresion -> TRUE .)
    COMA            reduce using rule 98 (expresion -> TRUE .)
    CORDER          reduce using rule 98 (expresion -> TRUE .)
    PT2             reduce using rule 98 (expresion -> TRUE .)
    IMAYOR          reduce using rule 98 (expresion -> TRUE .)
    AB              reduce using rule 98 (expresion -> TRUE .)
    LLAVEDER        reduce using rule 98 (expresion -> TRUE .)


state 98

    (99) expresion -> FALSE .

    MAS             reduce using rule 99 (expresion -> FALSE .)
    MENOS           reduce using rule 99 (expresion -> FALSE .)
    POR             reduce using rule 99 (expresion -> FALSE .)
    DIVIDIDO        reduce using rule 99 (expresion -> FALSE .)
    MOD             reduce using rule 99 (expresion -> FALSE .)
    AS              reduce using rule 99 (expresion -> FALSE .)
    DPT2            reduce using rule 99 (expresion -> FALSE .)
    PT              reduce using rule 99 (expresion -> FALSE .)
    IGUAL           reduce using rule 99 (expresion -> FALSE .)
    MENOR           reduce using rule 99 (expresion -> FALSE .)
    MAYOR           reduce using rule 99 (expresion -> FALSE .)
    MEIGUAL         reduce using rule 99 (expresion -> FALSE .)
    MAIGUAL         reduce using rule 99 (expresion -> FALSE .)
    DIS             reduce using rule 99 (expresion -> FALSE .)
    LLAVEIZQ        reduce using rule 99 (expresion -> FALSE .)
    AND             reduce using rule 99 (expresion -> FALSE .)
    OR              reduce using rule 99 (expresion -> FALSE .)
    PTCOMA          reduce using rule 99 (expresion -> FALSE .)
    PARDER          reduce using rule 99 (expresion -> FALSE .)
    COMA            reduce using rule 99 (expresion -> FALSE .)
    CORDER          reduce using rule 99 (expresion -> FALSE .)
    PT2             reduce using rule 99 (expresion -> FALSE .)
    IMAYOR          reduce using rule 99 (expresion -> FALSE .)
    AB              reduce using rule 99 (expresion -> FALSE .)
    LLAVEDER        reduce using rule 99 (expresion -> FALSE .)


state 99

    (100) expresion -> VECM . NOT listarreglo

    NOT             shift and go to state 151


state 100

    (101) expresion -> ID . PARIZQ listexpr PARDER
    (102) expresion -> ID .
    (103) expresion -> ID . listaarreglo
    (104) listaarreglo -> . listaarreglo CORIZQ expresion CORDER
    (105) listaarreglo -> . CORIZQ expresion CORDER

    PARIZQ          shift and go to state 152
    MAS             reduce using rule 102 (expresion -> ID .)
    MENOS           reduce using rule 102 (expresion -> ID .)
    POR             reduce using rule 102 (expresion -> ID .)
    DIVIDIDO        reduce using rule 102 (expresion -> ID .)
    MOD             reduce using rule 102 (expresion -> ID .)
    AS              reduce using rule 102 (expresion -> ID .)
    DPT2            reduce using rule 102 (expresion -> ID .)
    PT              reduce using rule 102 (expresion -> ID .)
    IGUAL           reduce using rule 102 (expresion -> ID .)
    MENOR           reduce using rule 102 (expresion -> ID .)
    MAYOR           reduce using rule 102 (expresion -> ID .)
    MEIGUAL         reduce using rule 102 (expresion -> ID .)
    MAIGUAL         reduce using rule 102 (expresion -> ID .)
    DIS             reduce using rule 102 (expresion -> ID .)
    LLAVEIZQ        reduce using rule 102 (expresion -> ID .)
    AND             reduce using rule 102 (expresion -> ID .)
    OR              reduce using rule 102 (expresion -> ID .)
    PTCOMA          reduce using rule 102 (expresion -> ID .)
    PARDER          reduce using rule 102 (expresion -> ID .)
    COMA            reduce using rule 102 (expresion -> ID .)
    CORDER          reduce using rule 102 (expresion -> ID .)
    PT2             reduce using rule 102 (expresion -> ID .)
    IMAYOR          reduce using rule 102 (expresion -> ID .)
    AB              reduce using rule 102 (expresion -> ID .)
    LLAVEDER        reduce using rule 102 (expresion -> ID .)
    CORIZQ          shift and go to state 83

    listaarreglo                   shift and go to state 153

state 101

    (106) expresion -> CORIZQ . listexpr CORDER
    (123) listexpr -> . listexpr COMA logica
    (124) listexpr -> . logica
    (58) logica -> . logica AND logica
    (59) logica -> . logica OR logica
    (60) logica -> . NOT logica
    (61) logica -> . rel
    (62) rel -> . rel IGUAL IGUAL rel
    (63) rel -> . rel MENOR rel
    (64) rel -> . rel MAYOR rel
    (65) rel -> . rel MEIGUAL rel
    (66) rel -> . rel MAIGUAL rel
    (67) rel -> . rel DIS rel
    (68) rel -> . expresion
    (86) expresion -> . expresion MAS expresion
    (87) expresion -> . expresion MENOS expresion
    (88) expresion -> . expresion POR expresion
    (89) expresion -> . expresion DIVIDIDO expresion
    (90) expresion -> . expresion MOD expresion
    (91) expresion -> . expresion AS tipos
    (92) expresion -> . instrif
    (93) expresion -> . MENOS expresion
    (94) expresion -> . PARIZQ logica PARDER
    (95) expresion -> . ENTERO
    (96) expresion -> . DECIMAL
    (97) expresion -> . FORM
    (98) expresion -> . TRUE
    (99) expresion -> . FALSE
    (100) expresion -> . VECM NOT listarreglo
    (101) expresion -> . ID PARIZQ listexpr PARDER
    (102) expresion -> . ID
    (103) expresion -> . ID listaarreglo
    (106) expresion -> . CORIZQ listexpr CORDER
    (107) expresion -> . CHARE
    (108) expresion -> . expresion DPT2 expresion
    (109) expresion -> . AMP expresion
    (110) expresion -> . tipos DPT2 POW PARIZQ logica COMA logica PARDER
    (111) expresion -> . tipos DPT2 POWF PARIZQ logica COMA logica PARDER
    (112) expresion -> . instrloop
    (113) expresion -> . instrmatch
    (114) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (115) expresion -> . expresion PT SQRT PARIZQ PARDER
    (116) expresion -> . expresion PT ABS PARIZQ PARDER
    (117) expresion -> . expresion PT CLONE PARIZQ PARDER
    (118) expresion -> . expresion PT LEN PARIZQ PARDER
    (119) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (120) expresion -> . expresion PT CONTA PARIZQ expresion PARDER
    (49) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE
    (37) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (45) instrmatch -> . MATCH logica LLAVEIZQ opmatch LLAVEDER

    NOT             shift and go to state 87
    MENOS           shift and go to state 90
    PARIZQ          shift and go to state 93
    ENTERO          shift and go to state 94
    DECIMAL         shift and go to state 95
    FORM            shift and go to state 96
    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    VECM            shift and go to state 99
    ID              shift and go to state 100
    CORIZQ          shift and go to state 101
    CHARE           shift and go to state 102
    AMP             shift and go to state 103
    IF              shift and go to state 85
    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    USIZE           shift and go to state 69
    LOOP            shift and go to state 106
    MATCH           shift and go to state 107

    listexpr                       shift and go to state 154
    logica                         shift and go to state 125
    rel                            shift and go to state 88
    expresion                      shift and go to state 89
    tipos                          shift and go to state 91
    instrif                        shift and go to state 92
    instrloop                      shift and go to state 104
    instrmatch                     shift and go to state 105

state 102

    (107) expresion -> CHARE .

    MAS             reduce using rule 107 (expresion -> CHARE .)
    MENOS           reduce using rule 107 (expresion -> CHARE .)
    POR             reduce using rule 107 (expresion -> CHARE .)
    DIVIDIDO        reduce using rule 107 (expresion -> CHARE .)
    MOD             reduce using rule 107 (expresion -> CHARE .)
    AS              reduce using rule 107 (expresion -> CHARE .)
    DPT2            reduce using rule 107 (expresion -> CHARE .)
    PT              reduce using rule 107 (expresion -> CHARE .)
    IGUAL           reduce using rule 107 (expresion -> CHARE .)
    MENOR           reduce using rule 107 (expresion -> CHARE .)
    MAYOR           reduce using rule 107 (expresion -> CHARE .)
    MEIGUAL         reduce using rule 107 (expresion -> CHARE .)
    MAIGUAL         reduce using rule 107 (expresion -> CHARE .)
    DIS             reduce using rule 107 (expresion -> CHARE .)
    LLAVEIZQ        reduce using rule 107 (expresion -> CHARE .)
    AND             reduce using rule 107 (expresion -> CHARE .)
    OR              reduce using rule 107 (expresion -> CHARE .)
    PTCOMA          reduce using rule 107 (expresion -> CHARE .)
    PARDER          reduce using rule 107 (expresion -> CHARE .)
    COMA            reduce using rule 107 (expresion -> CHARE .)
    CORDER          reduce using rule 107 (expresion -> CHARE .)
    PT2             reduce using rule 107 (expresion -> CHARE .)
    IMAYOR          reduce using rule 107 (expresion -> CHARE .)
    AB              reduce using rule 107 (expresion -> CHARE .)
    LLAVEDER        reduce using rule 107 (expresion -> CHARE .)


state 103

    (109) expresion -> AMP . expresion
    (84) tipos -> AMP . STR
    (86) expresion -> . expresion MAS expresion
    (87) expresion -> . expresion MENOS expresion
    (88) expresion -> . expresion POR expresion
    (89) expresion -> . expresion DIVIDIDO expresion
    (90) expresion -> . expresion MOD expresion
    (91) expresion -> . expresion AS tipos
    (92) expresion -> . instrif
    (93) expresion -> . MENOS expresion
    (94) expresion -> . PARIZQ logica PARDER
    (95) expresion -> . ENTERO
    (96) expresion -> . DECIMAL
    (97) expresion -> . FORM
    (98) expresion -> . TRUE
    (99) expresion -> . FALSE
    (100) expresion -> . VECM NOT listarreglo
    (101) expresion -> . ID PARIZQ listexpr PARDER
    (102) expresion -> . ID
    (103) expresion -> . ID listaarreglo
    (106) expresion -> . CORIZQ listexpr CORDER
    (107) expresion -> . CHARE
    (108) expresion -> . expresion DPT2 expresion
    (109) expresion -> . AMP expresion
    (110) expresion -> . tipos DPT2 POW PARIZQ logica COMA logica PARDER
    (111) expresion -> . tipos DPT2 POWF PARIZQ logica COMA logica PARDER
    (112) expresion -> . instrloop
    (113) expresion -> . instrmatch
    (114) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (115) expresion -> . expresion PT SQRT PARIZQ PARDER
    (116) expresion -> . expresion PT ABS PARIZQ PARDER
    (117) expresion -> . expresion PT CLONE PARIZQ PARDER
    (118) expresion -> . expresion PT LEN PARIZQ PARDER
    (119) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (120) expresion -> . expresion PT CONTA PARIZQ expresion PARDER
    (49) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE
    (37) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (45) instrmatch -> . MATCH logica LLAVEIZQ opmatch LLAVEDER

    STR             shift and go to state 116
    MENOS           shift and go to state 90
    PARIZQ          shift and go to state 93
    ENTERO          shift and go to state 94
    DECIMAL         shift and go to state 95
    FORM            shift and go to state 96
    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    VECM            shift and go to state 99
    ID              shift and go to state 100
    CORIZQ          shift and go to state 101
    CHARE           shift and go to state 102
    AMP             shift and go to state 103
    IF              shift and go to state 85
    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    USIZE           shift and go to state 69
    LOOP            shift and go to state 106
    MATCH           shift and go to state 107

    expresion                      shift and go to state 155
    tipos                          shift and go to state 91
    instrif                        shift and go to state 92
    instrloop                      shift and go to state 104
    instrmatch                     shift and go to state 105

state 104

    (112) expresion -> instrloop .

    MAS             reduce using rule 112 (expresion -> instrloop .)
    MENOS           reduce using rule 112 (expresion -> instrloop .)
    POR             reduce using rule 112 (expresion -> instrloop .)
    DIVIDIDO        reduce using rule 112 (expresion -> instrloop .)
    MOD             reduce using rule 112 (expresion -> instrloop .)
    AS              reduce using rule 112 (expresion -> instrloop .)
    DPT2            reduce using rule 112 (expresion -> instrloop .)
    PT              reduce using rule 112 (expresion -> instrloop .)
    IGUAL           reduce using rule 112 (expresion -> instrloop .)
    MENOR           reduce using rule 112 (expresion -> instrloop .)
    MAYOR           reduce using rule 112 (expresion -> instrloop .)
    MEIGUAL         reduce using rule 112 (expresion -> instrloop .)
    MAIGUAL         reduce using rule 112 (expresion -> instrloop .)
    DIS             reduce using rule 112 (expresion -> instrloop .)
    LLAVEIZQ        reduce using rule 112 (expresion -> instrloop .)
    AND             reduce using rule 112 (expresion -> instrloop .)
    OR              reduce using rule 112 (expresion -> instrloop .)
    PTCOMA          reduce using rule 112 (expresion -> instrloop .)
    PARDER          reduce using rule 112 (expresion -> instrloop .)
    COMA            reduce using rule 112 (expresion -> instrloop .)
    CORDER          reduce using rule 112 (expresion -> instrloop .)
    PT2             reduce using rule 112 (expresion -> instrloop .)
    IMAYOR          reduce using rule 112 (expresion -> instrloop .)
    AB              reduce using rule 112 (expresion -> instrloop .)
    LLAVEDER        reduce using rule 112 (expresion -> instrloop .)


state 105

    (113) expresion -> instrmatch .

    MAS             reduce using rule 113 (expresion -> instrmatch .)
    MENOS           reduce using rule 113 (expresion -> instrmatch .)
    POR             reduce using rule 113 (expresion -> instrmatch .)
    DIVIDIDO        reduce using rule 113 (expresion -> instrmatch .)
    MOD             reduce using rule 113 (expresion -> instrmatch .)
    AS              reduce using rule 113 (expresion -> instrmatch .)
    DPT2            reduce using rule 113 (expresion -> instrmatch .)
    PT              reduce using rule 113 (expresion -> instrmatch .)
    IGUAL           reduce using rule 113 (expresion -> instrmatch .)
    MENOR           reduce using rule 113 (expresion -> instrmatch .)
    MAYOR           reduce using rule 113 (expresion -> instrmatch .)
    MEIGUAL         reduce using rule 113 (expresion -> instrmatch .)
    MAIGUAL         reduce using rule 113 (expresion -> instrmatch .)
    DIS             reduce using rule 113 (expresion -> instrmatch .)
    LLAVEIZQ        reduce using rule 113 (expresion -> instrmatch .)
    AND             reduce using rule 113 (expresion -> instrmatch .)
    OR              reduce using rule 113 (expresion -> instrmatch .)
    PTCOMA          reduce using rule 113 (expresion -> instrmatch .)
    PARDER          reduce using rule 113 (expresion -> instrmatch .)
    COMA            reduce using rule 113 (expresion -> instrmatch .)
    CORDER          reduce using rule 113 (expresion -> instrmatch .)
    PT2             reduce using rule 113 (expresion -> instrmatch .)
    IMAYOR          reduce using rule 113 (expresion -> instrmatch .)
    AB              reduce using rule 113 (expresion -> instrmatch .)
    LLAVEDER        reduce using rule 113 (expresion -> instrmatch .)


state 106

    (37) instrloop -> LOOP . LLAVEIZQ instrucciones LLAVEDER

    LLAVEIZQ        shift and go to state 156


state 107

    (45) instrmatch -> MATCH . logica LLAVEIZQ opmatch LLAVEDER
    (58) logica -> . logica AND logica
    (59) logica -> . logica OR logica
    (60) logica -> . NOT logica
    (61) logica -> . rel
    (62) rel -> . rel IGUAL IGUAL rel
    (63) rel -> . rel MENOR rel
    (64) rel -> . rel MAYOR rel
    (65) rel -> . rel MEIGUAL rel
    (66) rel -> . rel MAIGUAL rel
    (67) rel -> . rel DIS rel
    (68) rel -> . expresion
    (86) expresion -> . expresion MAS expresion
    (87) expresion -> . expresion MENOS expresion
    (88) expresion -> . expresion POR expresion
    (89) expresion -> . expresion DIVIDIDO expresion
    (90) expresion -> . expresion MOD expresion
    (91) expresion -> . expresion AS tipos
    (92) expresion -> . instrif
    (93) expresion -> . MENOS expresion
    (94) expresion -> . PARIZQ logica PARDER
    (95) expresion -> . ENTERO
    (96) expresion -> . DECIMAL
    (97) expresion -> . FORM
    (98) expresion -> . TRUE
    (99) expresion -> . FALSE
    (100) expresion -> . VECM NOT listarreglo
    (101) expresion -> . ID PARIZQ listexpr PARDER
    (102) expresion -> . ID
    (103) expresion -> . ID listaarreglo
    (106) expresion -> . CORIZQ listexpr CORDER
    (107) expresion -> . CHARE
    (108) expresion -> . expresion DPT2 expresion
    (109) expresion -> . AMP expresion
    (110) expresion -> . tipos DPT2 POW PARIZQ logica COMA logica PARDER
    (111) expresion -> . tipos DPT2 POWF PARIZQ logica COMA logica PARDER
    (112) expresion -> . instrloop
    (113) expresion -> . instrmatch
    (114) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (115) expresion -> . expresion PT SQRT PARIZQ PARDER
    (116) expresion -> . expresion PT ABS PARIZQ PARDER
    (117) expresion -> . expresion PT CLONE PARIZQ PARDER
    (118) expresion -> . expresion PT LEN PARIZQ PARDER
    (119) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (120) expresion -> . expresion PT CONTA PARIZQ expresion PARDER
    (49) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE
    (37) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (45) instrmatch -> . MATCH logica LLAVEIZQ opmatch LLAVEDER

    NOT             shift and go to state 87
    MENOS           shift and go to state 90
    PARIZQ          shift and go to state 93
    ENTERO          shift and go to state 94
    DECIMAL         shift and go to state 95
    FORM            shift and go to state 96
    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    VECM            shift and go to state 99
    ID              shift and go to state 100
    CORIZQ          shift and go to state 101
    CHARE           shift and go to state 102
    AMP             shift and go to state 103
    IF              shift and go to state 85
    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    USIZE           shift and go to state 69
    LOOP            shift and go to state 106
    MATCH           shift and go to state 107

    logica                         shift and go to state 157
    rel                            shift and go to state 88
    expresion                      shift and go to state 89
    tipos                          shift and go to state 91
    instrif                        shift and go to state 92
    instrloop                      shift and go to state 104
    instrmatch                     shift and go to state 105

state 108

    (24) instruccion -> LOOP LLAVEIZQ . instrucciones LLAVEDER
    (17) instrucciones -> . instruccion instrucciones
    (18) instrucciones -> . instruccion
    (19) instruccion -> . LET mutable ID pyc arrtipos IGUAL logica PTCOMA
    (20) instruccion -> . ID listarreglo IGUAL logica PTCOMA
    (21) instruccion -> . ID PARIZQ listexpr PARDER PTCOMA
    (22) instruccion -> . PRINT NOT PARIZQ listexpr PARDER PTCOMA
    (23) instruccion -> . IF logica LLAVEIZQ instrucciones LLAVEDER unelse
    (24) instruccion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (25) instruccion -> . WHILE logica LLAVEIZQ instrucciones LLAVEDER
    (26) instruccion -> . FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER
    (27) instruccion -> . MATCH logica LLAVEIZQ insmatch LLAVEDER
    (28) instruccion -> . BREAK PTCOMA
    (29) instruccion -> . CONTINUE PTCOMA
    (30) instruccion -> . BREAK logica PTCOMA
    (31) instruccion -> . RETURN logica PTCOMA

    LET             shift and go to state 51
    ID              shift and go to state 52
    PRINT           shift and go to state 53
    IF              shift and go to state 54
    LOOP            shift and go to state 55
    WHILE           shift and go to state 56
    FOR             shift and go to state 57
    MATCH           shift and go to state 58
    BREAK           shift and go to state 59
    CONTINUE        shift and go to state 60
    RETURN          shift and go to state 61

    instrucciones                  shift and go to state 158
    instruccion                    shift and go to state 50

state 109

    (25) instruccion -> WHILE logica . LLAVEIZQ instrucciones LLAVEDER
    (58) logica -> logica . AND logica
    (59) logica -> logica . OR logica

    LLAVEIZQ        shift and go to state 159
    AND             shift and go to state 131
    OR              shift and go to state 132


state 110

    (26) instruccion -> FOR ID . IN opcionfor LLAVEIZQ instrucciones LLAVEDER

    IN              shift and go to state 160


state 111

    (27) instruccion -> MATCH logica . LLAVEIZQ insmatch LLAVEDER
    (58) logica -> logica . AND logica
    (59) logica -> logica . OR logica

    LLAVEIZQ        shift and go to state 161
    AND             shift and go to state 131
    OR              shift and go to state 132


state 112

    (28) instruccion -> BREAK PTCOMA .

    LET             reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    ID              reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    PRINT           reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    IF              reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    LOOP            reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    WHILE           reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    FOR             reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    MATCH           reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    BREAK           reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    CONTINUE        reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    RETURN          reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    LLAVEDER        reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    COMA            reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    MENOS           reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    PARIZQ          reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    ENTERO          reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    DECIMAL         reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    FORM            reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    TRUE            reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    FALSE           reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    VECM            reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    CORIZQ          reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    CHARE           reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    AMP             reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    I64             reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    F64             reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    BOOL            reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    CHAR            reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    STRING          reduce using rule 28 (instruccion -> BREAK PTCOMA .)
    USIZE           reduce using rule 28 (instruccion -> BREAK PTCOMA .)


state 113

    (30) instruccion -> BREAK logica . PTCOMA
    (58) logica -> logica . AND logica
    (59) logica -> logica . OR logica

    PTCOMA          shift and go to state 162
    AND             shift and go to state 131
    OR              shift and go to state 132


state 114

    (29) instruccion -> CONTINUE PTCOMA .

    LET             reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    ID              reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    PRINT           reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    IF              reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    LOOP            reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    WHILE           reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    FOR             reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    MATCH           reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    BREAK           reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    CONTINUE        reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    RETURN          reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    LLAVEDER        reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    COMA            reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    MENOS           reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    PARIZQ          reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    ENTERO          reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    DECIMAL         reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    FORM            reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    TRUE            reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    FALSE           reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    VECM            reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    CORIZQ          reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    CHARE           reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    AMP             reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    I64             reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    F64             reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    BOOL            reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    CHAR            reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    STRING          reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)
    USIZE           reduce using rule 29 (instruccion -> CONTINUE PTCOMA .)


state 115

    (31) instruccion -> RETURN logica . PTCOMA
    (58) logica -> logica . AND logica
    (59) logica -> logica . OR logica

    PTCOMA          shift and go to state 163
    AND             shift and go to state 131
    OR              shift and go to state 132


state 116

    (84) tipos -> AMP STR .

    LLAVEDER        reduce using rule 84 (tipos -> AMP STR .)
    COMA            reduce using rule 84 (tipos -> AMP STR .)
    PARDER          reduce using rule 84 (tipos -> AMP STR .)
    DPT2            reduce using rule 84 (tipos -> AMP STR .)
    LLAVEIZQ        reduce using rule 84 (tipos -> AMP STR .)
    MAS             reduce using rule 84 (tipos -> AMP STR .)
    MENOS           reduce using rule 84 (tipos -> AMP STR .)
    POR             reduce using rule 84 (tipos -> AMP STR .)
    DIVIDIDO        reduce using rule 84 (tipos -> AMP STR .)
    MOD             reduce using rule 84 (tipos -> AMP STR .)
    AS              reduce using rule 84 (tipos -> AMP STR .)
    PT              reduce using rule 84 (tipos -> AMP STR .)
    IGUAL           reduce using rule 84 (tipos -> AMP STR .)
    MENOR           reduce using rule 84 (tipos -> AMP STR .)
    MAYOR           reduce using rule 84 (tipos -> AMP STR .)
    MEIGUAL         reduce using rule 84 (tipos -> AMP STR .)
    MAIGUAL         reduce using rule 84 (tipos -> AMP STR .)
    DIS             reduce using rule 84 (tipos -> AMP STR .)
    AND             reduce using rule 84 (tipos -> AMP STR .)
    OR              reduce using rule 84 (tipos -> AMP STR .)
    PTCOMA          reduce using rule 84 (tipos -> AMP STR .)
    CORDER          reduce using rule 84 (tipos -> AMP STR .)
    PT2             reduce using rule 84 (tipos -> AMP STR .)
    IMAYOR          reduce using rule 84 (tipos -> AMP STR .)
    AB              reduce using rule 84 (tipos -> AMP STR .)


state 117

    (13) liststruct -> liststruct COMA ID DPT . tipos
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE

    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    AMP             shift and go to state 68
    USIZE           shift and go to state 69

    tipos                          shift and go to state 164

state 118

    (3) funcion -> PUB FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ . instrucciones LLAVEDER
    (17) instrucciones -> . instruccion instrucciones
    (18) instrucciones -> . instruccion
    (19) instruccion -> . LET mutable ID pyc arrtipos IGUAL logica PTCOMA
    (20) instruccion -> . ID listarreglo IGUAL logica PTCOMA
    (21) instruccion -> . ID PARIZQ listexpr PARDER PTCOMA
    (22) instruccion -> . PRINT NOT PARIZQ listexpr PARDER PTCOMA
    (23) instruccion -> . IF logica LLAVEIZQ instrucciones LLAVEDER unelse
    (24) instruccion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (25) instruccion -> . WHILE logica LLAVEIZQ instrucciones LLAVEDER
    (26) instruccion -> . FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER
    (27) instruccion -> . MATCH logica LLAVEIZQ insmatch LLAVEDER
    (28) instruccion -> . BREAK PTCOMA
    (29) instruccion -> . CONTINUE PTCOMA
    (30) instruccion -> . BREAK logica PTCOMA
    (31) instruccion -> . RETURN logica PTCOMA

    LET             shift and go to state 51
    ID              shift and go to state 52
    PRINT           shift and go to state 53
    IF              shift and go to state 54
    LOOP            shift and go to state 55
    WHILE           shift and go to state 56
    FOR             shift and go to state 57
    MATCH           shift and go to state 58
    BREAK           shift and go to state 59
    CONTINUE        shift and go to state 60
    RETURN          shift and go to state 61

    instrucciones                  shift and go to state 165
    instruccion                    shift and go to state 50

state 119

    (4) funcion -> FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones . LLAVEDER

    LLAVEDER        shift and go to state 166


state 120

    (15) tipofun -> MENOS MAYOR tipos .

    LLAVEIZQ        reduce using rule 15 (tipofun -> MENOS MAYOR tipos .)


state 121

    (11) parametros2 -> parametros2 COMA mutable ID DPT . tipos
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE

    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    AMP             shift and go to state 68
    USIZE           shift and go to state 69

    tipos                          shift and go to state 167

state 122

    (19) instruccion -> LET mutable ID . pyc arrtipos IGUAL logica PTCOMA
    (71) pyc -> . DPT
    (72) pyc -> . empty
    (125) empty -> .

    DPT             shift and go to state 169
    I64             reduce using rule 125 (empty -> .)
    F64             reduce using rule 125 (empty -> .)
    BOOL            reduce using rule 125 (empty -> .)
    CHAR            reduce using rule 125 (empty -> .)
    STRING          reduce using rule 125 (empty -> .)
    AMP             reduce using rule 125 (empty -> .)
    USIZE           reduce using rule 125 (empty -> .)
    CORIZQ          reduce using rule 125 (empty -> .)
    ID              reduce using rule 125 (empty -> .)
    IGUAL           reduce using rule 125 (empty -> .)

    pyc                            shift and go to state 168
    empty                          shift and go to state 170

state 123

    (20) instruccion -> ID listarreglo IGUAL . logica PTCOMA
    (58) logica -> . logica AND logica
    (59) logica -> . logica OR logica
    (60) logica -> . NOT logica
    (61) logica -> . rel
    (62) rel -> . rel IGUAL IGUAL rel
    (63) rel -> . rel MENOR rel
    (64) rel -> . rel MAYOR rel
    (65) rel -> . rel MEIGUAL rel
    (66) rel -> . rel MAIGUAL rel
    (67) rel -> . rel DIS rel
    (68) rel -> . expresion
    (86) expresion -> . expresion MAS expresion
    (87) expresion -> . expresion MENOS expresion
    (88) expresion -> . expresion POR expresion
    (89) expresion -> . expresion DIVIDIDO expresion
    (90) expresion -> . expresion MOD expresion
    (91) expresion -> . expresion AS tipos
    (92) expresion -> . instrif
    (93) expresion -> . MENOS expresion
    (94) expresion -> . PARIZQ logica PARDER
    (95) expresion -> . ENTERO
    (96) expresion -> . DECIMAL
    (97) expresion -> . FORM
    (98) expresion -> . TRUE
    (99) expresion -> . FALSE
    (100) expresion -> . VECM NOT listarreglo
    (101) expresion -> . ID PARIZQ listexpr PARDER
    (102) expresion -> . ID
    (103) expresion -> . ID listaarreglo
    (106) expresion -> . CORIZQ listexpr CORDER
    (107) expresion -> . CHARE
    (108) expresion -> . expresion DPT2 expresion
    (109) expresion -> . AMP expresion
    (110) expresion -> . tipos DPT2 POW PARIZQ logica COMA logica PARDER
    (111) expresion -> . tipos DPT2 POWF PARIZQ logica COMA logica PARDER
    (112) expresion -> . instrloop
    (113) expresion -> . instrmatch
    (114) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (115) expresion -> . expresion PT SQRT PARIZQ PARDER
    (116) expresion -> . expresion PT ABS PARIZQ PARDER
    (117) expresion -> . expresion PT CLONE PARIZQ PARDER
    (118) expresion -> . expresion PT LEN PARIZQ PARDER
    (119) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (120) expresion -> . expresion PT CONTA PARIZQ expresion PARDER
    (49) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE
    (37) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (45) instrmatch -> . MATCH logica LLAVEIZQ opmatch LLAVEDER

    NOT             shift and go to state 87
    MENOS           shift and go to state 90
    PARIZQ          shift and go to state 93
    ENTERO          shift and go to state 94
    DECIMAL         shift and go to state 95
    FORM            shift and go to state 96
    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    VECM            shift and go to state 99
    ID              shift and go to state 100
    CORIZQ          shift and go to state 101
    CHARE           shift and go to state 102
    AMP             shift and go to state 103
    IF              shift and go to state 85
    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    USIZE           shift and go to state 69
    LOOP            shift and go to state 106
    MATCH           shift and go to state 107

    logica                         shift and go to state 171
    rel                            shift and go to state 88
    expresion                      shift and go to state 89
    tipos                          shift and go to state 91
    instrif                        shift and go to state 92
    instrloop                      shift and go to state 104
    instrmatch                     shift and go to state 105

state 124

    (21) instruccion -> ID PARIZQ listexpr . PARDER PTCOMA
    (123) listexpr -> listexpr . COMA logica

    PARDER          shift and go to state 172
    COMA            shift and go to state 173


state 125

    (124) listexpr -> logica .
    (58) logica -> logica . AND logica
    (59) logica -> logica . OR logica

    PARDER          reduce using rule 124 (listexpr -> logica .)
    COMA            reduce using rule 124 (listexpr -> logica .)
    CORDER          reduce using rule 124 (listexpr -> logica .)
    AND             shift and go to state 131
    OR              shift and go to state 132


state 126

    (104) listaarreglo -> listaarreglo CORIZQ . expresion CORDER
    (86) expresion -> . expresion MAS expresion
    (87) expresion -> . expresion MENOS expresion
    (88) expresion -> . expresion POR expresion
    (89) expresion -> . expresion DIVIDIDO expresion
    (90) expresion -> . expresion MOD expresion
    (91) expresion -> . expresion AS tipos
    (92) expresion -> . instrif
    (93) expresion -> . MENOS expresion
    (94) expresion -> . PARIZQ logica PARDER
    (95) expresion -> . ENTERO
    (96) expresion -> . DECIMAL
    (97) expresion -> . FORM
    (98) expresion -> . TRUE
    (99) expresion -> . FALSE
    (100) expresion -> . VECM NOT listarreglo
    (101) expresion -> . ID PARIZQ listexpr PARDER
    (102) expresion -> . ID
    (103) expresion -> . ID listaarreglo
    (106) expresion -> . CORIZQ listexpr CORDER
    (107) expresion -> . CHARE
    (108) expresion -> . expresion DPT2 expresion
    (109) expresion -> . AMP expresion
    (110) expresion -> . tipos DPT2 POW PARIZQ logica COMA logica PARDER
    (111) expresion -> . tipos DPT2 POWF PARIZQ logica COMA logica PARDER
    (112) expresion -> . instrloop
    (113) expresion -> . instrmatch
    (114) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (115) expresion -> . expresion PT SQRT PARIZQ PARDER
    (116) expresion -> . expresion PT ABS PARIZQ PARDER
    (117) expresion -> . expresion PT CLONE PARIZQ PARDER
    (118) expresion -> . expresion PT LEN PARIZQ PARDER
    (119) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (120) expresion -> . expresion PT CONTA PARIZQ expresion PARDER
    (49) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE
    (37) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (45) instrmatch -> . MATCH logica LLAVEIZQ opmatch LLAVEDER

    MENOS           shift and go to state 90
    PARIZQ          shift and go to state 93
    ENTERO          shift and go to state 94
    DECIMAL         shift and go to state 95
    FORM            shift and go to state 96
    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    VECM            shift and go to state 99
    ID              shift and go to state 100
    CORIZQ          shift and go to state 101
    CHARE           shift and go to state 102
    AMP             shift and go to state 103
    IF              shift and go to state 85
    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    USIZE           shift and go to state 69
    LOOP            shift and go to state 106
    MATCH           shift and go to state 107

    expresion                      shift and go to state 174
    tipos                          shift and go to state 91
    instrif                        shift and go to state 92
    instrloop                      shift and go to state 104
    instrmatch                     shift and go to state 105

state 127

    (105) listaarreglo -> CORIZQ expresion . CORDER
    (86) expresion -> expresion . MAS expresion
    (87) expresion -> expresion . MENOS expresion
    (88) expresion -> expresion . POR expresion
    (89) expresion -> expresion . DIVIDIDO expresion
    (90) expresion -> expresion . MOD expresion
    (91) expresion -> expresion . AS tipos
    (108) expresion -> expresion . DPT2 expresion
    (114) expresion -> expresion . PT TOSTRING PARIZQ PARDER
    (115) expresion -> expresion . PT SQRT PARIZQ PARDER
    (116) expresion -> expresion . PT ABS PARIZQ PARDER
    (117) expresion -> expresion . PT CLONE PARIZQ PARDER
    (118) expresion -> expresion . PT LEN PARIZQ PARDER
    (119) expresion -> expresion . PT TOOWNED PARIZQ PARDER
    (120) expresion -> expresion . PT CONTA PARIZQ expresion PARDER

    CORDER          shift and go to state 175
    MAS             shift and go to state 140
    MENOS           shift and go to state 141
    POR             shift and go to state 142
    DIVIDIDO        shift and go to state 143
    MOD             shift and go to state 144
    AS              shift and go to state 145
    DPT2            shift and go to state 146
    PT              shift and go to state 147


state 128

    (22) instruccion -> PRINT NOT PARIZQ . listexpr PARDER PTCOMA
    (123) listexpr -> . listexpr COMA logica
    (124) listexpr -> . logica
    (58) logica -> . logica AND logica
    (59) logica -> . logica OR logica
    (60) logica -> . NOT logica
    (61) logica -> . rel
    (62) rel -> . rel IGUAL IGUAL rel
    (63) rel -> . rel MENOR rel
    (64) rel -> . rel MAYOR rel
    (65) rel -> . rel MEIGUAL rel
    (66) rel -> . rel MAIGUAL rel
    (67) rel -> . rel DIS rel
    (68) rel -> . expresion
    (86) expresion -> . expresion MAS expresion
    (87) expresion -> . expresion MENOS expresion
    (88) expresion -> . expresion POR expresion
    (89) expresion -> . expresion DIVIDIDO expresion
    (90) expresion -> . expresion MOD expresion
    (91) expresion -> . expresion AS tipos
    (92) expresion -> . instrif
    (93) expresion -> . MENOS expresion
    (94) expresion -> . PARIZQ logica PARDER
    (95) expresion -> . ENTERO
    (96) expresion -> . DECIMAL
    (97) expresion -> . FORM
    (98) expresion -> . TRUE
    (99) expresion -> . FALSE
    (100) expresion -> . VECM NOT listarreglo
    (101) expresion -> . ID PARIZQ listexpr PARDER
    (102) expresion -> . ID
    (103) expresion -> . ID listaarreglo
    (106) expresion -> . CORIZQ listexpr CORDER
    (107) expresion -> . CHARE
    (108) expresion -> . expresion DPT2 expresion
    (109) expresion -> . AMP expresion
    (110) expresion -> . tipos DPT2 POW PARIZQ logica COMA logica PARDER
    (111) expresion -> . tipos DPT2 POWF PARIZQ logica COMA logica PARDER
    (112) expresion -> . instrloop
    (113) expresion -> . instrmatch
    (114) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (115) expresion -> . expresion PT SQRT PARIZQ PARDER
    (116) expresion -> . expresion PT ABS PARIZQ PARDER
    (117) expresion -> . expresion PT CLONE PARIZQ PARDER
    (118) expresion -> . expresion PT LEN PARIZQ PARDER
    (119) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (120) expresion -> . expresion PT CONTA PARIZQ expresion PARDER
    (49) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE
    (37) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (45) instrmatch -> . MATCH logica LLAVEIZQ opmatch LLAVEDER

    NOT             shift and go to state 87
    MENOS           shift and go to state 90
    PARIZQ          shift and go to state 93
    ENTERO          shift and go to state 94
    DECIMAL         shift and go to state 95
    FORM            shift and go to state 96
    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    VECM            shift and go to state 99
    ID              shift and go to state 100
    CORIZQ          shift and go to state 101
    CHARE           shift and go to state 102
    AMP             shift and go to state 103
    IF              shift and go to state 85
    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    USIZE           shift and go to state 69
    LOOP            shift and go to state 106
    MATCH           shift and go to state 107

    listexpr                       shift and go to state 176
    logica                         shift and go to state 125
    rel                            shift and go to state 88
    expresion                      shift and go to state 89
    tipos                          shift and go to state 91
    instrif                        shift and go to state 92
    instrloop                      shift and go to state 104
    instrmatch                     shift and go to state 105

state 129

    (49) instrif -> IF logica . LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (58) logica -> logica . AND logica
    (59) logica -> logica . OR logica

    LLAVEIZQ        shift and go to state 177
    AND             shift and go to state 131
    OR              shift and go to state 132


state 130

    (23) instruccion -> IF logica LLAVEIZQ . instrucciones LLAVEDER unelse
    (17) instrucciones -> . instruccion instrucciones
    (18) instrucciones -> . instruccion
    (19) instruccion -> . LET mutable ID pyc arrtipos IGUAL logica PTCOMA
    (20) instruccion -> . ID listarreglo IGUAL logica PTCOMA
    (21) instruccion -> . ID PARIZQ listexpr PARDER PTCOMA
    (22) instruccion -> . PRINT NOT PARIZQ listexpr PARDER PTCOMA
    (23) instruccion -> . IF logica LLAVEIZQ instrucciones LLAVEDER unelse
    (24) instruccion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (25) instruccion -> . WHILE logica LLAVEIZQ instrucciones LLAVEDER
    (26) instruccion -> . FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER
    (27) instruccion -> . MATCH logica LLAVEIZQ insmatch LLAVEDER
    (28) instruccion -> . BREAK PTCOMA
    (29) instruccion -> . CONTINUE PTCOMA
    (30) instruccion -> . BREAK logica PTCOMA
    (31) instruccion -> . RETURN logica PTCOMA

    LET             shift and go to state 51
    ID              shift and go to state 52
    PRINT           shift and go to state 53
    IF              shift and go to state 54
    LOOP            shift and go to state 55
    WHILE           shift and go to state 56
    FOR             shift and go to state 57
    MATCH           shift and go to state 58
    BREAK           shift and go to state 59
    CONTINUE        shift and go to state 60
    RETURN          shift and go to state 61

    instrucciones                  shift and go to state 178
    instruccion                    shift and go to state 50

state 131

    (58) logica -> logica AND . logica
    (58) logica -> . logica AND logica
    (59) logica -> . logica OR logica
    (60) logica -> . NOT logica
    (61) logica -> . rel
    (62) rel -> . rel IGUAL IGUAL rel
    (63) rel -> . rel MENOR rel
    (64) rel -> . rel MAYOR rel
    (65) rel -> . rel MEIGUAL rel
    (66) rel -> . rel MAIGUAL rel
    (67) rel -> . rel DIS rel
    (68) rel -> . expresion
    (86) expresion -> . expresion MAS expresion
    (87) expresion -> . expresion MENOS expresion
    (88) expresion -> . expresion POR expresion
    (89) expresion -> . expresion DIVIDIDO expresion
    (90) expresion -> . expresion MOD expresion
    (91) expresion -> . expresion AS tipos
    (92) expresion -> . instrif
    (93) expresion -> . MENOS expresion
    (94) expresion -> . PARIZQ logica PARDER
    (95) expresion -> . ENTERO
    (96) expresion -> . DECIMAL
    (97) expresion -> . FORM
    (98) expresion -> . TRUE
    (99) expresion -> . FALSE
    (100) expresion -> . VECM NOT listarreglo
    (101) expresion -> . ID PARIZQ listexpr PARDER
    (102) expresion -> . ID
    (103) expresion -> . ID listaarreglo
    (106) expresion -> . CORIZQ listexpr CORDER
    (107) expresion -> . CHARE
    (108) expresion -> . expresion DPT2 expresion
    (109) expresion -> . AMP expresion
    (110) expresion -> . tipos DPT2 POW PARIZQ logica COMA logica PARDER
    (111) expresion -> . tipos DPT2 POWF PARIZQ logica COMA logica PARDER
    (112) expresion -> . instrloop
    (113) expresion -> . instrmatch
    (114) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (115) expresion -> . expresion PT SQRT PARIZQ PARDER
    (116) expresion -> . expresion PT ABS PARIZQ PARDER
    (117) expresion -> . expresion PT CLONE PARIZQ PARDER
    (118) expresion -> . expresion PT LEN PARIZQ PARDER
    (119) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (120) expresion -> . expresion PT CONTA PARIZQ expresion PARDER
    (49) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE
    (37) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (45) instrmatch -> . MATCH logica LLAVEIZQ opmatch LLAVEDER

    NOT             shift and go to state 87
    MENOS           shift and go to state 90
    PARIZQ          shift and go to state 93
    ENTERO          shift and go to state 94
    DECIMAL         shift and go to state 95
    FORM            shift and go to state 96
    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    VECM            shift and go to state 99
    ID              shift and go to state 100
    CORIZQ          shift and go to state 101
    CHARE           shift and go to state 102
    AMP             shift and go to state 103
    IF              shift and go to state 85
    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    USIZE           shift and go to state 69
    LOOP            shift and go to state 106
    MATCH           shift and go to state 107

    logica                         shift and go to state 179
    rel                            shift and go to state 88
    expresion                      shift and go to state 89
    tipos                          shift and go to state 91
    instrif                        shift and go to state 92
    instrloop                      shift and go to state 104
    instrmatch                     shift and go to state 105

state 132

    (59) logica -> logica OR . logica
    (58) logica -> . logica AND logica
    (59) logica -> . logica OR logica
    (60) logica -> . NOT logica
    (61) logica -> . rel
    (62) rel -> . rel IGUAL IGUAL rel
    (63) rel -> . rel MENOR rel
    (64) rel -> . rel MAYOR rel
    (65) rel -> . rel MEIGUAL rel
    (66) rel -> . rel MAIGUAL rel
    (67) rel -> . rel DIS rel
    (68) rel -> . expresion
    (86) expresion -> . expresion MAS expresion
    (87) expresion -> . expresion MENOS expresion
    (88) expresion -> . expresion POR expresion
    (89) expresion -> . expresion DIVIDIDO expresion
    (90) expresion -> . expresion MOD expresion
    (91) expresion -> . expresion AS tipos
    (92) expresion -> . instrif
    (93) expresion -> . MENOS expresion
    (94) expresion -> . PARIZQ logica PARDER
    (95) expresion -> . ENTERO
    (96) expresion -> . DECIMAL
    (97) expresion -> . FORM
    (98) expresion -> . TRUE
    (99) expresion -> . FALSE
    (100) expresion -> . VECM NOT listarreglo
    (101) expresion -> . ID PARIZQ listexpr PARDER
    (102) expresion -> . ID
    (103) expresion -> . ID listaarreglo
    (106) expresion -> . CORIZQ listexpr CORDER
    (107) expresion -> . CHARE
    (108) expresion -> . expresion DPT2 expresion
    (109) expresion -> . AMP expresion
    (110) expresion -> . tipos DPT2 POW PARIZQ logica COMA logica PARDER
    (111) expresion -> . tipos DPT2 POWF PARIZQ logica COMA logica PARDER
    (112) expresion -> . instrloop
    (113) expresion -> . instrmatch
    (114) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (115) expresion -> . expresion PT SQRT PARIZQ PARDER
    (116) expresion -> . expresion PT ABS PARIZQ PARDER
    (117) expresion -> . expresion PT CLONE PARIZQ PARDER
    (118) expresion -> . expresion PT LEN PARIZQ PARDER
    (119) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (120) expresion -> . expresion PT CONTA PARIZQ expresion PARDER
    (49) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE
    (37) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (45) instrmatch -> . MATCH logica LLAVEIZQ opmatch LLAVEDER

    NOT             shift and go to state 87
    MENOS           shift and go to state 90
    PARIZQ          shift and go to state 93
    ENTERO          shift and go to state 94
    DECIMAL         shift and go to state 95
    FORM            shift and go to state 96
    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    VECM            shift and go to state 99
    ID              shift and go to state 100
    CORIZQ          shift and go to state 101
    CHARE           shift and go to state 102
    AMP             shift and go to state 103
    IF              shift and go to state 85
    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    USIZE           shift and go to state 69
    LOOP            shift and go to state 106
    MATCH           shift and go to state 107

    logica                         shift and go to state 180
    rel                            shift and go to state 88
    expresion                      shift and go to state 89
    tipos                          shift and go to state 91
    instrif                        shift and go to state 92
    instrloop                      shift and go to state 104
    instrmatch                     shift and go to state 105

state 133

    (60) logica -> NOT logica .
    (58) logica -> logica . AND logica
    (59) logica -> logica . OR logica

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    LLAVEIZQ        reduce using rule 60 (logica -> NOT logica .)
    PTCOMA          reduce using rule 60 (logica -> NOT logica .)
    PARDER          reduce using rule 60 (logica -> NOT logica .)
    COMA            reduce using rule 60 (logica -> NOT logica .)
    CORDER          reduce using rule 60 (logica -> NOT logica .)
    PT2             reduce using rule 60 (logica -> NOT logica .)
    IMAYOR          reduce using rule 60 (logica -> NOT logica .)
    AB              reduce using rule 60 (logica -> NOT logica .)
    AND             shift and go to state 131
    OR              shift and go to state 132

  ! AND             [ reduce using rule 60 (logica -> NOT logica .) ]
  ! OR              [ reduce using rule 60 (logica -> NOT logica .) ]


state 134

    (62) rel -> rel IGUAL . IGUAL rel

    IGUAL           shift and go to state 181


state 135

    (63) rel -> rel MENOR . rel
    (62) rel -> . rel IGUAL IGUAL rel
    (63) rel -> . rel MENOR rel
    (64) rel -> . rel MAYOR rel
    (65) rel -> . rel MEIGUAL rel
    (66) rel -> . rel MAIGUAL rel
    (67) rel -> . rel DIS rel
    (68) rel -> . expresion
    (86) expresion -> . expresion MAS expresion
    (87) expresion -> . expresion MENOS expresion
    (88) expresion -> . expresion POR expresion
    (89) expresion -> . expresion DIVIDIDO expresion
    (90) expresion -> . expresion MOD expresion
    (91) expresion -> . expresion AS tipos
    (92) expresion -> . instrif
    (93) expresion -> . MENOS expresion
    (94) expresion -> . PARIZQ logica PARDER
    (95) expresion -> . ENTERO
    (96) expresion -> . DECIMAL
    (97) expresion -> . FORM
    (98) expresion -> . TRUE
    (99) expresion -> . FALSE
    (100) expresion -> . VECM NOT listarreglo
    (101) expresion -> . ID PARIZQ listexpr PARDER
    (102) expresion -> . ID
    (103) expresion -> . ID listaarreglo
    (106) expresion -> . CORIZQ listexpr CORDER
    (107) expresion -> . CHARE
    (108) expresion -> . expresion DPT2 expresion
    (109) expresion -> . AMP expresion
    (110) expresion -> . tipos DPT2 POW PARIZQ logica COMA logica PARDER
    (111) expresion -> . tipos DPT2 POWF PARIZQ logica COMA logica PARDER
    (112) expresion -> . instrloop
    (113) expresion -> . instrmatch
    (114) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (115) expresion -> . expresion PT SQRT PARIZQ PARDER
    (116) expresion -> . expresion PT ABS PARIZQ PARDER
    (117) expresion -> . expresion PT CLONE PARIZQ PARDER
    (118) expresion -> . expresion PT LEN PARIZQ PARDER
    (119) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (120) expresion -> . expresion PT CONTA PARIZQ expresion PARDER
    (49) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE
    (37) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (45) instrmatch -> . MATCH logica LLAVEIZQ opmatch LLAVEDER

    MENOS           shift and go to state 90
    PARIZQ          shift and go to state 93
    ENTERO          shift and go to state 94
    DECIMAL         shift and go to state 95
    FORM            shift and go to state 96
    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    VECM            shift and go to state 99
    ID              shift and go to state 100
    CORIZQ          shift and go to state 101
    CHARE           shift and go to state 102
    AMP             shift and go to state 103
    IF              shift and go to state 85
    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    USIZE           shift and go to state 69
    LOOP            shift and go to state 106
    MATCH           shift and go to state 107

    rel                            shift and go to state 182
    expresion                      shift and go to state 89
    tipos                          shift and go to state 91
    instrif                        shift and go to state 92
    instrloop                      shift and go to state 104
    instrmatch                     shift and go to state 105

state 136

    (64) rel -> rel MAYOR . rel
    (62) rel -> . rel IGUAL IGUAL rel
    (63) rel -> . rel MENOR rel
    (64) rel -> . rel MAYOR rel
    (65) rel -> . rel MEIGUAL rel
    (66) rel -> . rel MAIGUAL rel
    (67) rel -> . rel DIS rel
    (68) rel -> . expresion
    (86) expresion -> . expresion MAS expresion
    (87) expresion -> . expresion MENOS expresion
    (88) expresion -> . expresion POR expresion
    (89) expresion -> . expresion DIVIDIDO expresion
    (90) expresion -> . expresion MOD expresion
    (91) expresion -> . expresion AS tipos
    (92) expresion -> . instrif
    (93) expresion -> . MENOS expresion
    (94) expresion -> . PARIZQ logica PARDER
    (95) expresion -> . ENTERO
    (96) expresion -> . DECIMAL
    (97) expresion -> . FORM
    (98) expresion -> . TRUE
    (99) expresion -> . FALSE
    (100) expresion -> . VECM NOT listarreglo
    (101) expresion -> . ID PARIZQ listexpr PARDER
    (102) expresion -> . ID
    (103) expresion -> . ID listaarreglo
    (106) expresion -> . CORIZQ listexpr CORDER
    (107) expresion -> . CHARE
    (108) expresion -> . expresion DPT2 expresion
    (109) expresion -> . AMP expresion
    (110) expresion -> . tipos DPT2 POW PARIZQ logica COMA logica PARDER
    (111) expresion -> . tipos DPT2 POWF PARIZQ logica COMA logica PARDER
    (112) expresion -> . instrloop
    (113) expresion -> . instrmatch
    (114) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (115) expresion -> . expresion PT SQRT PARIZQ PARDER
    (116) expresion -> . expresion PT ABS PARIZQ PARDER
    (117) expresion -> . expresion PT CLONE PARIZQ PARDER
    (118) expresion -> . expresion PT LEN PARIZQ PARDER
    (119) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (120) expresion -> . expresion PT CONTA PARIZQ expresion PARDER
    (49) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE
    (37) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (45) instrmatch -> . MATCH logica LLAVEIZQ opmatch LLAVEDER

    MENOS           shift and go to state 90
    PARIZQ          shift and go to state 93
    ENTERO          shift and go to state 94
    DECIMAL         shift and go to state 95
    FORM            shift and go to state 96
    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    VECM            shift and go to state 99
    ID              shift and go to state 100
    CORIZQ          shift and go to state 101
    CHARE           shift and go to state 102
    AMP             shift and go to state 103
    IF              shift and go to state 85
    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    USIZE           shift and go to state 69
    LOOP            shift and go to state 106
    MATCH           shift and go to state 107

    rel                            shift and go to state 183
    expresion                      shift and go to state 89
    tipos                          shift and go to state 91
    instrif                        shift and go to state 92
    instrloop                      shift and go to state 104
    instrmatch                     shift and go to state 105

state 137

    (65) rel -> rel MEIGUAL . rel
    (62) rel -> . rel IGUAL IGUAL rel
    (63) rel -> . rel MENOR rel
    (64) rel -> . rel MAYOR rel
    (65) rel -> . rel MEIGUAL rel
    (66) rel -> . rel MAIGUAL rel
    (67) rel -> . rel DIS rel
    (68) rel -> . expresion
    (86) expresion -> . expresion MAS expresion
    (87) expresion -> . expresion MENOS expresion
    (88) expresion -> . expresion POR expresion
    (89) expresion -> . expresion DIVIDIDO expresion
    (90) expresion -> . expresion MOD expresion
    (91) expresion -> . expresion AS tipos
    (92) expresion -> . instrif
    (93) expresion -> . MENOS expresion
    (94) expresion -> . PARIZQ logica PARDER
    (95) expresion -> . ENTERO
    (96) expresion -> . DECIMAL
    (97) expresion -> . FORM
    (98) expresion -> . TRUE
    (99) expresion -> . FALSE
    (100) expresion -> . VECM NOT listarreglo
    (101) expresion -> . ID PARIZQ listexpr PARDER
    (102) expresion -> . ID
    (103) expresion -> . ID listaarreglo
    (106) expresion -> . CORIZQ listexpr CORDER
    (107) expresion -> . CHARE
    (108) expresion -> . expresion DPT2 expresion
    (109) expresion -> . AMP expresion
    (110) expresion -> . tipos DPT2 POW PARIZQ logica COMA logica PARDER
    (111) expresion -> . tipos DPT2 POWF PARIZQ logica COMA logica PARDER
    (112) expresion -> . instrloop
    (113) expresion -> . instrmatch
    (114) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (115) expresion -> . expresion PT SQRT PARIZQ PARDER
    (116) expresion -> . expresion PT ABS PARIZQ PARDER
    (117) expresion -> . expresion PT CLONE PARIZQ PARDER
    (118) expresion -> . expresion PT LEN PARIZQ PARDER
    (119) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (120) expresion -> . expresion PT CONTA PARIZQ expresion PARDER
    (49) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE
    (37) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (45) instrmatch -> . MATCH logica LLAVEIZQ opmatch LLAVEDER

    MENOS           shift and go to state 90
    PARIZQ          shift and go to state 93
    ENTERO          shift and go to state 94
    DECIMAL         shift and go to state 95
    FORM            shift and go to state 96
    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    VECM            shift and go to state 99
    ID              shift and go to state 100
    CORIZQ          shift and go to state 101
    CHARE           shift and go to state 102
    AMP             shift and go to state 103
    IF              shift and go to state 85
    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    USIZE           shift and go to state 69
    LOOP            shift and go to state 106
    MATCH           shift and go to state 107

    rel                            shift and go to state 184
    expresion                      shift and go to state 89
    tipos                          shift and go to state 91
    instrif                        shift and go to state 92
    instrloop                      shift and go to state 104
    instrmatch                     shift and go to state 105

state 138

    (66) rel -> rel MAIGUAL . rel
    (62) rel -> . rel IGUAL IGUAL rel
    (63) rel -> . rel MENOR rel
    (64) rel -> . rel MAYOR rel
    (65) rel -> . rel MEIGUAL rel
    (66) rel -> . rel MAIGUAL rel
    (67) rel -> . rel DIS rel
    (68) rel -> . expresion
    (86) expresion -> . expresion MAS expresion
    (87) expresion -> . expresion MENOS expresion
    (88) expresion -> . expresion POR expresion
    (89) expresion -> . expresion DIVIDIDO expresion
    (90) expresion -> . expresion MOD expresion
    (91) expresion -> . expresion AS tipos
    (92) expresion -> . instrif
    (93) expresion -> . MENOS expresion
    (94) expresion -> . PARIZQ logica PARDER
    (95) expresion -> . ENTERO
    (96) expresion -> . DECIMAL
    (97) expresion -> . FORM
    (98) expresion -> . TRUE
    (99) expresion -> . FALSE
    (100) expresion -> . VECM NOT listarreglo
    (101) expresion -> . ID PARIZQ listexpr PARDER
    (102) expresion -> . ID
    (103) expresion -> . ID listaarreglo
    (106) expresion -> . CORIZQ listexpr CORDER
    (107) expresion -> . CHARE
    (108) expresion -> . expresion DPT2 expresion
    (109) expresion -> . AMP expresion
    (110) expresion -> . tipos DPT2 POW PARIZQ logica COMA logica PARDER
    (111) expresion -> . tipos DPT2 POWF PARIZQ logica COMA logica PARDER
    (112) expresion -> . instrloop
    (113) expresion -> . instrmatch
    (114) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (115) expresion -> . expresion PT SQRT PARIZQ PARDER
    (116) expresion -> . expresion PT ABS PARIZQ PARDER
    (117) expresion -> . expresion PT CLONE PARIZQ PARDER
    (118) expresion -> . expresion PT LEN PARIZQ PARDER
    (119) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (120) expresion -> . expresion PT CONTA PARIZQ expresion PARDER
    (49) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE
    (37) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (45) instrmatch -> . MATCH logica LLAVEIZQ opmatch LLAVEDER

    MENOS           shift and go to state 90
    PARIZQ          shift and go to state 93
    ENTERO          shift and go to state 94
    DECIMAL         shift and go to state 95
    FORM            shift and go to state 96
    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    VECM            shift and go to state 99
    ID              shift and go to state 100
    CORIZQ          shift and go to state 101
    CHARE           shift and go to state 102
    AMP             shift and go to state 103
    IF              shift and go to state 85
    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    USIZE           shift and go to state 69
    LOOP            shift and go to state 106
    MATCH           shift and go to state 107

    rel                            shift and go to state 185
    expresion                      shift and go to state 89
    tipos                          shift and go to state 91
    instrif                        shift and go to state 92
    instrloop                      shift and go to state 104
    instrmatch                     shift and go to state 105

state 139

    (67) rel -> rel DIS . rel
    (62) rel -> . rel IGUAL IGUAL rel
    (63) rel -> . rel MENOR rel
    (64) rel -> . rel MAYOR rel
    (65) rel -> . rel MEIGUAL rel
    (66) rel -> . rel MAIGUAL rel
    (67) rel -> . rel DIS rel
    (68) rel -> . expresion
    (86) expresion -> . expresion MAS expresion
    (87) expresion -> . expresion MENOS expresion
    (88) expresion -> . expresion POR expresion
    (89) expresion -> . expresion DIVIDIDO expresion
    (90) expresion -> . expresion MOD expresion
    (91) expresion -> . expresion AS tipos
    (92) expresion -> . instrif
    (93) expresion -> . MENOS expresion
    (94) expresion -> . PARIZQ logica PARDER
    (95) expresion -> . ENTERO
    (96) expresion -> . DECIMAL
    (97) expresion -> . FORM
    (98) expresion -> . TRUE
    (99) expresion -> . FALSE
    (100) expresion -> . VECM NOT listarreglo
    (101) expresion -> . ID PARIZQ listexpr PARDER
    (102) expresion -> . ID
    (103) expresion -> . ID listaarreglo
    (106) expresion -> . CORIZQ listexpr CORDER
    (107) expresion -> . CHARE
    (108) expresion -> . expresion DPT2 expresion
    (109) expresion -> . AMP expresion
    (110) expresion -> . tipos DPT2 POW PARIZQ logica COMA logica PARDER
    (111) expresion -> . tipos DPT2 POWF PARIZQ logica COMA logica PARDER
    (112) expresion -> . instrloop
    (113) expresion -> . instrmatch
    (114) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (115) expresion -> . expresion PT SQRT PARIZQ PARDER
    (116) expresion -> . expresion PT ABS PARIZQ PARDER
    (117) expresion -> . expresion PT CLONE PARIZQ PARDER
    (118) expresion -> . expresion PT LEN PARIZQ PARDER
    (119) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (120) expresion -> . expresion PT CONTA PARIZQ expresion PARDER
    (49) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE
    (37) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (45) instrmatch -> . MATCH logica LLAVEIZQ opmatch LLAVEDER

    MENOS           shift and go to state 90
    PARIZQ          shift and go to state 93
    ENTERO          shift and go to state 94
    DECIMAL         shift and go to state 95
    FORM            shift and go to state 96
    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    VECM            shift and go to state 99
    ID              shift and go to state 100
    CORIZQ          shift and go to state 101
    CHARE           shift and go to state 102
    AMP             shift and go to state 103
    IF              shift and go to state 85
    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    USIZE           shift and go to state 69
    LOOP            shift and go to state 106
    MATCH           shift and go to state 107

    rel                            shift and go to state 186
    expresion                      shift and go to state 89
    tipos                          shift and go to state 91
    instrif                        shift and go to state 92
    instrloop                      shift and go to state 104
    instrmatch                     shift and go to state 105

state 140

    (86) expresion -> expresion MAS . expresion
    (86) expresion -> . expresion MAS expresion
    (87) expresion -> . expresion MENOS expresion
    (88) expresion -> . expresion POR expresion
    (89) expresion -> . expresion DIVIDIDO expresion
    (90) expresion -> . expresion MOD expresion
    (91) expresion -> . expresion AS tipos
    (92) expresion -> . instrif
    (93) expresion -> . MENOS expresion
    (94) expresion -> . PARIZQ logica PARDER
    (95) expresion -> . ENTERO
    (96) expresion -> . DECIMAL
    (97) expresion -> . FORM
    (98) expresion -> . TRUE
    (99) expresion -> . FALSE
    (100) expresion -> . VECM NOT listarreglo
    (101) expresion -> . ID PARIZQ listexpr PARDER
    (102) expresion -> . ID
    (103) expresion -> . ID listaarreglo
    (106) expresion -> . CORIZQ listexpr CORDER
    (107) expresion -> . CHARE
    (108) expresion -> . expresion DPT2 expresion
    (109) expresion -> . AMP expresion
    (110) expresion -> . tipos DPT2 POW PARIZQ logica COMA logica PARDER
    (111) expresion -> . tipos DPT2 POWF PARIZQ logica COMA logica PARDER
    (112) expresion -> . instrloop
    (113) expresion -> . instrmatch
    (114) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (115) expresion -> . expresion PT SQRT PARIZQ PARDER
    (116) expresion -> . expresion PT ABS PARIZQ PARDER
    (117) expresion -> . expresion PT CLONE PARIZQ PARDER
    (118) expresion -> . expresion PT LEN PARIZQ PARDER
    (119) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (120) expresion -> . expresion PT CONTA PARIZQ expresion PARDER
    (49) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE
    (37) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (45) instrmatch -> . MATCH logica LLAVEIZQ opmatch LLAVEDER

    MENOS           shift and go to state 90
    PARIZQ          shift and go to state 93
    ENTERO          shift and go to state 94
    DECIMAL         shift and go to state 95
    FORM            shift and go to state 96
    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    VECM            shift and go to state 99
    ID              shift and go to state 100
    CORIZQ          shift and go to state 101
    CHARE           shift and go to state 102
    AMP             shift and go to state 103
    IF              shift and go to state 85
    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    USIZE           shift and go to state 69
    LOOP            shift and go to state 106
    MATCH           shift and go to state 107

    expresion                      shift and go to state 187
    tipos                          shift and go to state 91
    instrif                        shift and go to state 92
    instrloop                      shift and go to state 104
    instrmatch                     shift and go to state 105

state 141

    (87) expresion -> expresion MENOS . expresion
    (86) expresion -> . expresion MAS expresion
    (87) expresion -> . expresion MENOS expresion
    (88) expresion -> . expresion POR expresion
    (89) expresion -> . expresion DIVIDIDO expresion
    (90) expresion -> . expresion MOD expresion
    (91) expresion -> . expresion AS tipos
    (92) expresion -> . instrif
    (93) expresion -> . MENOS expresion
    (94) expresion -> . PARIZQ logica PARDER
    (95) expresion -> . ENTERO
    (96) expresion -> . DECIMAL
    (97) expresion -> . FORM
    (98) expresion -> . TRUE
    (99) expresion -> . FALSE
    (100) expresion -> . VECM NOT listarreglo
    (101) expresion -> . ID PARIZQ listexpr PARDER
    (102) expresion -> . ID
    (103) expresion -> . ID listaarreglo
    (106) expresion -> . CORIZQ listexpr CORDER
    (107) expresion -> . CHARE
    (108) expresion -> . expresion DPT2 expresion
    (109) expresion -> . AMP expresion
    (110) expresion -> . tipos DPT2 POW PARIZQ logica COMA logica PARDER
    (111) expresion -> . tipos DPT2 POWF PARIZQ logica COMA logica PARDER
    (112) expresion -> . instrloop
    (113) expresion -> . instrmatch
    (114) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (115) expresion -> . expresion PT SQRT PARIZQ PARDER
    (116) expresion -> . expresion PT ABS PARIZQ PARDER
    (117) expresion -> . expresion PT CLONE PARIZQ PARDER
    (118) expresion -> . expresion PT LEN PARIZQ PARDER
    (119) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (120) expresion -> . expresion PT CONTA PARIZQ expresion PARDER
    (49) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE
    (37) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (45) instrmatch -> . MATCH logica LLAVEIZQ opmatch LLAVEDER

    MENOS           shift and go to state 90
    PARIZQ          shift and go to state 93
    ENTERO          shift and go to state 94
    DECIMAL         shift and go to state 95
    FORM            shift and go to state 96
    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    VECM            shift and go to state 99
    ID              shift and go to state 100
    CORIZQ          shift and go to state 101
    CHARE           shift and go to state 102
    AMP             shift and go to state 103
    IF              shift and go to state 85
    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    USIZE           shift and go to state 69
    LOOP            shift and go to state 106
    MATCH           shift and go to state 107

    expresion                      shift and go to state 188
    tipos                          shift and go to state 91
    instrif                        shift and go to state 92
    instrloop                      shift and go to state 104
    instrmatch                     shift and go to state 105

state 142

    (88) expresion -> expresion POR . expresion
    (86) expresion -> . expresion MAS expresion
    (87) expresion -> . expresion MENOS expresion
    (88) expresion -> . expresion POR expresion
    (89) expresion -> . expresion DIVIDIDO expresion
    (90) expresion -> . expresion MOD expresion
    (91) expresion -> . expresion AS tipos
    (92) expresion -> . instrif
    (93) expresion -> . MENOS expresion
    (94) expresion -> . PARIZQ logica PARDER
    (95) expresion -> . ENTERO
    (96) expresion -> . DECIMAL
    (97) expresion -> . FORM
    (98) expresion -> . TRUE
    (99) expresion -> . FALSE
    (100) expresion -> . VECM NOT listarreglo
    (101) expresion -> . ID PARIZQ listexpr PARDER
    (102) expresion -> . ID
    (103) expresion -> . ID listaarreglo
    (106) expresion -> . CORIZQ listexpr CORDER
    (107) expresion -> . CHARE
    (108) expresion -> . expresion DPT2 expresion
    (109) expresion -> . AMP expresion
    (110) expresion -> . tipos DPT2 POW PARIZQ logica COMA logica PARDER
    (111) expresion -> . tipos DPT2 POWF PARIZQ logica COMA logica PARDER
    (112) expresion -> . instrloop
    (113) expresion -> . instrmatch
    (114) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (115) expresion -> . expresion PT SQRT PARIZQ PARDER
    (116) expresion -> . expresion PT ABS PARIZQ PARDER
    (117) expresion -> . expresion PT CLONE PARIZQ PARDER
    (118) expresion -> . expresion PT LEN PARIZQ PARDER
    (119) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (120) expresion -> . expresion PT CONTA PARIZQ expresion PARDER
    (49) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE
    (37) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (45) instrmatch -> . MATCH logica LLAVEIZQ opmatch LLAVEDER

    MENOS           shift and go to state 90
    PARIZQ          shift and go to state 93
    ENTERO          shift and go to state 94
    DECIMAL         shift and go to state 95
    FORM            shift and go to state 96
    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    VECM            shift and go to state 99
    ID              shift and go to state 100
    CORIZQ          shift and go to state 101
    CHARE           shift and go to state 102
    AMP             shift and go to state 103
    IF              shift and go to state 85
    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    USIZE           shift and go to state 69
    LOOP            shift and go to state 106
    MATCH           shift and go to state 107

    expresion                      shift and go to state 189
    tipos                          shift and go to state 91
    instrif                        shift and go to state 92
    instrloop                      shift and go to state 104
    instrmatch                     shift and go to state 105

state 143

    (89) expresion -> expresion DIVIDIDO . expresion
    (86) expresion -> . expresion MAS expresion
    (87) expresion -> . expresion MENOS expresion
    (88) expresion -> . expresion POR expresion
    (89) expresion -> . expresion DIVIDIDO expresion
    (90) expresion -> . expresion MOD expresion
    (91) expresion -> . expresion AS tipos
    (92) expresion -> . instrif
    (93) expresion -> . MENOS expresion
    (94) expresion -> . PARIZQ logica PARDER
    (95) expresion -> . ENTERO
    (96) expresion -> . DECIMAL
    (97) expresion -> . FORM
    (98) expresion -> . TRUE
    (99) expresion -> . FALSE
    (100) expresion -> . VECM NOT listarreglo
    (101) expresion -> . ID PARIZQ listexpr PARDER
    (102) expresion -> . ID
    (103) expresion -> . ID listaarreglo
    (106) expresion -> . CORIZQ listexpr CORDER
    (107) expresion -> . CHARE
    (108) expresion -> . expresion DPT2 expresion
    (109) expresion -> . AMP expresion
    (110) expresion -> . tipos DPT2 POW PARIZQ logica COMA logica PARDER
    (111) expresion -> . tipos DPT2 POWF PARIZQ logica COMA logica PARDER
    (112) expresion -> . instrloop
    (113) expresion -> . instrmatch
    (114) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (115) expresion -> . expresion PT SQRT PARIZQ PARDER
    (116) expresion -> . expresion PT ABS PARIZQ PARDER
    (117) expresion -> . expresion PT CLONE PARIZQ PARDER
    (118) expresion -> . expresion PT LEN PARIZQ PARDER
    (119) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (120) expresion -> . expresion PT CONTA PARIZQ expresion PARDER
    (49) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE
    (37) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (45) instrmatch -> . MATCH logica LLAVEIZQ opmatch LLAVEDER

    MENOS           shift and go to state 90
    PARIZQ          shift and go to state 93
    ENTERO          shift and go to state 94
    DECIMAL         shift and go to state 95
    FORM            shift and go to state 96
    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    VECM            shift and go to state 99
    ID              shift and go to state 100
    CORIZQ          shift and go to state 101
    CHARE           shift and go to state 102
    AMP             shift and go to state 103
    IF              shift and go to state 85
    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    USIZE           shift and go to state 69
    LOOP            shift and go to state 106
    MATCH           shift and go to state 107

    expresion                      shift and go to state 190
    tipos                          shift and go to state 91
    instrif                        shift and go to state 92
    instrloop                      shift and go to state 104
    instrmatch                     shift and go to state 105

state 144

    (90) expresion -> expresion MOD . expresion
    (86) expresion -> . expresion MAS expresion
    (87) expresion -> . expresion MENOS expresion
    (88) expresion -> . expresion POR expresion
    (89) expresion -> . expresion DIVIDIDO expresion
    (90) expresion -> . expresion MOD expresion
    (91) expresion -> . expresion AS tipos
    (92) expresion -> . instrif
    (93) expresion -> . MENOS expresion
    (94) expresion -> . PARIZQ logica PARDER
    (95) expresion -> . ENTERO
    (96) expresion -> . DECIMAL
    (97) expresion -> . FORM
    (98) expresion -> . TRUE
    (99) expresion -> . FALSE
    (100) expresion -> . VECM NOT listarreglo
    (101) expresion -> . ID PARIZQ listexpr PARDER
    (102) expresion -> . ID
    (103) expresion -> . ID listaarreglo
    (106) expresion -> . CORIZQ listexpr CORDER
    (107) expresion -> . CHARE
    (108) expresion -> . expresion DPT2 expresion
    (109) expresion -> . AMP expresion
    (110) expresion -> . tipos DPT2 POW PARIZQ logica COMA logica PARDER
    (111) expresion -> . tipos DPT2 POWF PARIZQ logica COMA logica PARDER
    (112) expresion -> . instrloop
    (113) expresion -> . instrmatch
    (114) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (115) expresion -> . expresion PT SQRT PARIZQ PARDER
    (116) expresion -> . expresion PT ABS PARIZQ PARDER
    (117) expresion -> . expresion PT CLONE PARIZQ PARDER
    (118) expresion -> . expresion PT LEN PARIZQ PARDER
    (119) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (120) expresion -> . expresion PT CONTA PARIZQ expresion PARDER
    (49) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE
    (37) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (45) instrmatch -> . MATCH logica LLAVEIZQ opmatch LLAVEDER

    MENOS           shift and go to state 90
    PARIZQ          shift and go to state 93
    ENTERO          shift and go to state 94
    DECIMAL         shift and go to state 95
    FORM            shift and go to state 96
    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    VECM            shift and go to state 99
    ID              shift and go to state 100
    CORIZQ          shift and go to state 101
    CHARE           shift and go to state 102
    AMP             shift and go to state 103
    IF              shift and go to state 85
    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    USIZE           shift and go to state 69
    LOOP            shift and go to state 106
    MATCH           shift and go to state 107

    expresion                      shift and go to state 191
    tipos                          shift and go to state 91
    instrif                        shift and go to state 92
    instrloop                      shift and go to state 104
    instrmatch                     shift and go to state 105

state 145

    (91) expresion -> expresion AS . tipos
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE

    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    AMP             shift and go to state 68
    USIZE           shift and go to state 69

    tipos                          shift and go to state 192

state 146

    (108) expresion -> expresion DPT2 . expresion
    (86) expresion -> . expresion MAS expresion
    (87) expresion -> . expresion MENOS expresion
    (88) expresion -> . expresion POR expresion
    (89) expresion -> . expresion DIVIDIDO expresion
    (90) expresion -> . expresion MOD expresion
    (91) expresion -> . expresion AS tipos
    (92) expresion -> . instrif
    (93) expresion -> . MENOS expresion
    (94) expresion -> . PARIZQ logica PARDER
    (95) expresion -> . ENTERO
    (96) expresion -> . DECIMAL
    (97) expresion -> . FORM
    (98) expresion -> . TRUE
    (99) expresion -> . FALSE
    (100) expresion -> . VECM NOT listarreglo
    (101) expresion -> . ID PARIZQ listexpr PARDER
    (102) expresion -> . ID
    (103) expresion -> . ID listaarreglo
    (106) expresion -> . CORIZQ listexpr CORDER
    (107) expresion -> . CHARE
    (108) expresion -> . expresion DPT2 expresion
    (109) expresion -> . AMP expresion
    (110) expresion -> . tipos DPT2 POW PARIZQ logica COMA logica PARDER
    (111) expresion -> . tipos DPT2 POWF PARIZQ logica COMA logica PARDER
    (112) expresion -> . instrloop
    (113) expresion -> . instrmatch
    (114) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (115) expresion -> . expresion PT SQRT PARIZQ PARDER
    (116) expresion -> . expresion PT ABS PARIZQ PARDER
    (117) expresion -> . expresion PT CLONE PARIZQ PARDER
    (118) expresion -> . expresion PT LEN PARIZQ PARDER
    (119) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (120) expresion -> . expresion PT CONTA PARIZQ expresion PARDER
    (49) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE
    (37) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (45) instrmatch -> . MATCH logica LLAVEIZQ opmatch LLAVEDER

    MENOS           shift and go to state 90
    PARIZQ          shift and go to state 93
    ENTERO          shift and go to state 94
    DECIMAL         shift and go to state 95
    FORM            shift and go to state 96
    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    VECM            shift and go to state 99
    ID              shift and go to state 100
    CORIZQ          shift and go to state 101
    CHARE           shift and go to state 102
    AMP             shift and go to state 103
    IF              shift and go to state 85
    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    USIZE           shift and go to state 69
    LOOP            shift and go to state 106
    MATCH           shift and go to state 107

    expresion                      shift and go to state 193
    tipos                          shift and go to state 91
    instrif                        shift and go to state 92
    instrloop                      shift and go to state 104
    instrmatch                     shift and go to state 105

state 147

    (114) expresion -> expresion PT . TOSTRING PARIZQ PARDER
    (115) expresion -> expresion PT . SQRT PARIZQ PARDER
    (116) expresion -> expresion PT . ABS PARIZQ PARDER
    (117) expresion -> expresion PT . CLONE PARIZQ PARDER
    (118) expresion -> expresion PT . LEN PARIZQ PARDER
    (119) expresion -> expresion PT . TOOWNED PARIZQ PARDER
    (120) expresion -> expresion PT . CONTA PARIZQ expresion PARDER

    TOSTRING        shift and go to state 194
    SQRT            shift and go to state 195
    ABS             shift and go to state 196
    CLONE           shift and go to state 197
    LEN             shift and go to state 198
    TOOWNED         shift and go to state 199
    CONTA           shift and go to state 200


state 148

    (93) expresion -> MENOS expresion .
    (86) expresion -> expresion . MAS expresion
    (87) expresion -> expresion . MENOS expresion
    (88) expresion -> expresion . POR expresion
    (89) expresion -> expresion . DIVIDIDO expresion
    (90) expresion -> expresion . MOD expresion
    (91) expresion -> expresion . AS tipos
    (108) expresion -> expresion . DPT2 expresion
    (114) expresion -> expresion . PT TOSTRING PARIZQ PARDER
    (115) expresion -> expresion . PT SQRT PARIZQ PARDER
    (116) expresion -> expresion . PT ABS PARIZQ PARDER
    (117) expresion -> expresion . PT CLONE PARIZQ PARDER
    (118) expresion -> expresion . PT LEN PARIZQ PARDER
    (119) expresion -> expresion . PT TOOWNED PARIZQ PARDER
    (120) expresion -> expresion . PT CONTA PARIZQ expresion PARDER

    MAS             reduce using rule 93 (expresion -> MENOS expresion .)
    MENOS           reduce using rule 93 (expresion -> MENOS expresion .)
    POR             reduce using rule 93 (expresion -> MENOS expresion .)
    DIVIDIDO        reduce using rule 93 (expresion -> MENOS expresion .)
    MOD             reduce using rule 93 (expresion -> MENOS expresion .)
    AS              reduce using rule 93 (expresion -> MENOS expresion .)
    DPT2            reduce using rule 93 (expresion -> MENOS expresion .)
    PT              reduce using rule 93 (expresion -> MENOS expresion .)
    IGUAL           reduce using rule 93 (expresion -> MENOS expresion .)
    MENOR           reduce using rule 93 (expresion -> MENOS expresion .)
    MAYOR           reduce using rule 93 (expresion -> MENOS expresion .)
    MEIGUAL         reduce using rule 93 (expresion -> MENOS expresion .)
    MAIGUAL         reduce using rule 93 (expresion -> MENOS expresion .)
    DIS             reduce using rule 93 (expresion -> MENOS expresion .)
    LLAVEIZQ        reduce using rule 93 (expresion -> MENOS expresion .)
    AND             reduce using rule 93 (expresion -> MENOS expresion .)
    OR              reduce using rule 93 (expresion -> MENOS expresion .)
    PTCOMA          reduce using rule 93 (expresion -> MENOS expresion .)
    PARDER          reduce using rule 93 (expresion -> MENOS expresion .)
    COMA            reduce using rule 93 (expresion -> MENOS expresion .)
    CORDER          reduce using rule 93 (expresion -> MENOS expresion .)
    PT2             reduce using rule 93 (expresion -> MENOS expresion .)
    IMAYOR          reduce using rule 93 (expresion -> MENOS expresion .)
    AB              reduce using rule 93 (expresion -> MENOS expresion .)
    LLAVEDER        reduce using rule 93 (expresion -> MENOS expresion .)

  ! MAS             [ shift and go to state 140 ]
  ! MENOS           [ shift and go to state 141 ]
  ! POR             [ shift and go to state 142 ]
  ! DIVIDIDO        [ shift and go to state 143 ]
  ! MOD             [ shift and go to state 144 ]
  ! AS              [ shift and go to state 145 ]
  ! DPT2            [ shift and go to state 146 ]
  ! PT              [ shift and go to state 147 ]


state 149

    (110) expresion -> tipos DPT2 . POW PARIZQ logica COMA logica PARDER
    (111) expresion -> tipos DPT2 . POWF PARIZQ logica COMA logica PARDER

    POW             shift and go to state 201
    POWF            shift and go to state 202


state 150

    (94) expresion -> PARIZQ logica . PARDER
    (58) logica -> logica . AND logica
    (59) logica -> logica . OR logica

    PARDER          shift and go to state 203
    AND             shift and go to state 131
    OR              shift and go to state 132


state 151

    (100) expresion -> VECM NOT . listarreglo
    (121) listarreglo -> . listaarreglo
    (122) listarreglo -> . empty
    (104) listaarreglo -> . listaarreglo CORIZQ expresion CORDER
    (105) listaarreglo -> . CORIZQ expresion CORDER
    (125) empty -> .

    CORIZQ          shift and go to state 83
    MAS             reduce using rule 125 (empty -> .)
    MENOS           reduce using rule 125 (empty -> .)
    POR             reduce using rule 125 (empty -> .)
    DIVIDIDO        reduce using rule 125 (empty -> .)
    MOD             reduce using rule 125 (empty -> .)
    AS              reduce using rule 125 (empty -> .)
    DPT2            reduce using rule 125 (empty -> .)
    PT              reduce using rule 125 (empty -> .)
    IGUAL           reduce using rule 125 (empty -> .)
    MENOR           reduce using rule 125 (empty -> .)
    MAYOR           reduce using rule 125 (empty -> .)
    MEIGUAL         reduce using rule 125 (empty -> .)
    MAIGUAL         reduce using rule 125 (empty -> .)
    DIS             reduce using rule 125 (empty -> .)
    LLAVEIZQ        reduce using rule 125 (empty -> .)
    AND             reduce using rule 125 (empty -> .)
    OR              reduce using rule 125 (empty -> .)
    PTCOMA          reduce using rule 125 (empty -> .)
    PARDER          reduce using rule 125 (empty -> .)
    COMA            reduce using rule 125 (empty -> .)
    CORDER          reduce using rule 125 (empty -> .)
    PT2             reduce using rule 125 (empty -> .)
    IMAYOR          reduce using rule 125 (empty -> .)
    AB              reduce using rule 125 (empty -> .)
    LLAVEDER        reduce using rule 125 (empty -> .)

    listarreglo                    shift and go to state 204
    listaarreglo                   shift and go to state 81
    empty                          shift and go to state 82

state 152

    (101) expresion -> ID PARIZQ . listexpr PARDER
    (123) listexpr -> . listexpr COMA logica
    (124) listexpr -> . logica
    (58) logica -> . logica AND logica
    (59) logica -> . logica OR logica
    (60) logica -> . NOT logica
    (61) logica -> . rel
    (62) rel -> . rel IGUAL IGUAL rel
    (63) rel -> . rel MENOR rel
    (64) rel -> . rel MAYOR rel
    (65) rel -> . rel MEIGUAL rel
    (66) rel -> . rel MAIGUAL rel
    (67) rel -> . rel DIS rel
    (68) rel -> . expresion
    (86) expresion -> . expresion MAS expresion
    (87) expresion -> . expresion MENOS expresion
    (88) expresion -> . expresion POR expresion
    (89) expresion -> . expresion DIVIDIDO expresion
    (90) expresion -> . expresion MOD expresion
    (91) expresion -> . expresion AS tipos
    (92) expresion -> . instrif
    (93) expresion -> . MENOS expresion
    (94) expresion -> . PARIZQ logica PARDER
    (95) expresion -> . ENTERO
    (96) expresion -> . DECIMAL
    (97) expresion -> . FORM
    (98) expresion -> . TRUE
    (99) expresion -> . FALSE
    (100) expresion -> . VECM NOT listarreglo
    (101) expresion -> . ID PARIZQ listexpr PARDER
    (102) expresion -> . ID
    (103) expresion -> . ID listaarreglo
    (106) expresion -> . CORIZQ listexpr CORDER
    (107) expresion -> . CHARE
    (108) expresion -> . expresion DPT2 expresion
    (109) expresion -> . AMP expresion
    (110) expresion -> . tipos DPT2 POW PARIZQ logica COMA logica PARDER
    (111) expresion -> . tipos DPT2 POWF PARIZQ logica COMA logica PARDER
    (112) expresion -> . instrloop
    (113) expresion -> . instrmatch
    (114) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (115) expresion -> . expresion PT SQRT PARIZQ PARDER
    (116) expresion -> . expresion PT ABS PARIZQ PARDER
    (117) expresion -> . expresion PT CLONE PARIZQ PARDER
    (118) expresion -> . expresion PT LEN PARIZQ PARDER
    (119) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (120) expresion -> . expresion PT CONTA PARIZQ expresion PARDER
    (49) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE
    (37) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (45) instrmatch -> . MATCH logica LLAVEIZQ opmatch LLAVEDER

    NOT             shift and go to state 87
    MENOS           shift and go to state 90
    PARIZQ          shift and go to state 93
    ENTERO          shift and go to state 94
    DECIMAL         shift and go to state 95
    FORM            shift and go to state 96
    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    VECM            shift and go to state 99
    ID              shift and go to state 100
    CORIZQ          shift and go to state 101
    CHARE           shift and go to state 102
    AMP             shift and go to state 103
    IF              shift and go to state 85
    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    USIZE           shift and go to state 69
    LOOP            shift and go to state 106
    MATCH           shift and go to state 107

    listexpr                       shift and go to state 205
    logica                         shift and go to state 125
    rel                            shift and go to state 88
    expresion                      shift and go to state 89
    tipos                          shift and go to state 91
    instrif                        shift and go to state 92
    instrloop                      shift and go to state 104
    instrmatch                     shift and go to state 105

state 153

    (103) expresion -> ID listaarreglo .
    (104) listaarreglo -> listaarreglo . CORIZQ expresion CORDER

    MAS             reduce using rule 103 (expresion -> ID listaarreglo .)
    MENOS           reduce using rule 103 (expresion -> ID listaarreglo .)
    POR             reduce using rule 103 (expresion -> ID listaarreglo .)
    DIVIDIDO        reduce using rule 103 (expresion -> ID listaarreglo .)
    MOD             reduce using rule 103 (expresion -> ID listaarreglo .)
    AS              reduce using rule 103 (expresion -> ID listaarreglo .)
    DPT2            reduce using rule 103 (expresion -> ID listaarreglo .)
    PT              reduce using rule 103 (expresion -> ID listaarreglo .)
    IGUAL           reduce using rule 103 (expresion -> ID listaarreglo .)
    MENOR           reduce using rule 103 (expresion -> ID listaarreglo .)
    MAYOR           reduce using rule 103 (expresion -> ID listaarreglo .)
    MEIGUAL         reduce using rule 103 (expresion -> ID listaarreglo .)
    MAIGUAL         reduce using rule 103 (expresion -> ID listaarreglo .)
    DIS             reduce using rule 103 (expresion -> ID listaarreglo .)
    LLAVEIZQ        reduce using rule 103 (expresion -> ID listaarreglo .)
    AND             reduce using rule 103 (expresion -> ID listaarreglo .)
    OR              reduce using rule 103 (expresion -> ID listaarreglo .)
    PTCOMA          reduce using rule 103 (expresion -> ID listaarreglo .)
    PARDER          reduce using rule 103 (expresion -> ID listaarreglo .)
    COMA            reduce using rule 103 (expresion -> ID listaarreglo .)
    CORDER          reduce using rule 103 (expresion -> ID listaarreglo .)
    PT2             reduce using rule 103 (expresion -> ID listaarreglo .)
    IMAYOR          reduce using rule 103 (expresion -> ID listaarreglo .)
    AB              reduce using rule 103 (expresion -> ID listaarreglo .)
    LLAVEDER        reduce using rule 103 (expresion -> ID listaarreglo .)
    CORIZQ          shift and go to state 126


state 154

    (106) expresion -> CORIZQ listexpr . CORDER
    (123) listexpr -> listexpr . COMA logica

    CORDER          shift and go to state 206
    COMA            shift and go to state 173


state 155

    (109) expresion -> AMP expresion .
    (86) expresion -> expresion . MAS expresion
    (87) expresion -> expresion . MENOS expresion
    (88) expresion -> expresion . POR expresion
    (89) expresion -> expresion . DIVIDIDO expresion
    (90) expresion -> expresion . MOD expresion
    (91) expresion -> expresion . AS tipos
    (108) expresion -> expresion . DPT2 expresion
    (114) expresion -> expresion . PT TOSTRING PARIZQ PARDER
    (115) expresion -> expresion . PT SQRT PARIZQ PARDER
    (116) expresion -> expresion . PT ABS PARIZQ PARDER
    (117) expresion -> expresion . PT CLONE PARIZQ PARDER
    (118) expresion -> expresion . PT LEN PARIZQ PARDER
    (119) expresion -> expresion . PT TOOWNED PARIZQ PARDER
    (120) expresion -> expresion . PT CONTA PARIZQ expresion PARDER

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for POR resolved as shift
  ! shift/reduce conflict for DIVIDIDO resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AS resolved as shift
  ! shift/reduce conflict for DPT2 resolved as shift
  ! shift/reduce conflict for PT resolved as shift
    IGUAL           reduce using rule 109 (expresion -> AMP expresion .)
    MENOR           reduce using rule 109 (expresion -> AMP expresion .)
    MAYOR           reduce using rule 109 (expresion -> AMP expresion .)
    MEIGUAL         reduce using rule 109 (expresion -> AMP expresion .)
    MAIGUAL         reduce using rule 109 (expresion -> AMP expresion .)
    DIS             reduce using rule 109 (expresion -> AMP expresion .)
    LLAVEIZQ        reduce using rule 109 (expresion -> AMP expresion .)
    AND             reduce using rule 109 (expresion -> AMP expresion .)
    OR              reduce using rule 109 (expresion -> AMP expresion .)
    PTCOMA          reduce using rule 109 (expresion -> AMP expresion .)
    PARDER          reduce using rule 109 (expresion -> AMP expresion .)
    COMA            reduce using rule 109 (expresion -> AMP expresion .)
    CORDER          reduce using rule 109 (expresion -> AMP expresion .)
    PT2             reduce using rule 109 (expresion -> AMP expresion .)
    IMAYOR          reduce using rule 109 (expresion -> AMP expresion .)
    AB              reduce using rule 109 (expresion -> AMP expresion .)
    LLAVEDER        reduce using rule 109 (expresion -> AMP expresion .)
    MAS             shift and go to state 140
    MENOS           shift and go to state 141
    POR             shift and go to state 142
    DIVIDIDO        shift and go to state 143
    MOD             shift and go to state 144
    AS              shift and go to state 145
    DPT2            shift and go to state 146
    PT              shift and go to state 147

  ! MAS             [ reduce using rule 109 (expresion -> AMP expresion .) ]
  ! MENOS           [ reduce using rule 109 (expresion -> AMP expresion .) ]
  ! POR             [ reduce using rule 109 (expresion -> AMP expresion .) ]
  ! DIVIDIDO        [ reduce using rule 109 (expresion -> AMP expresion .) ]
  ! MOD             [ reduce using rule 109 (expresion -> AMP expresion .) ]
  ! AS              [ reduce using rule 109 (expresion -> AMP expresion .) ]
  ! DPT2            [ reduce using rule 109 (expresion -> AMP expresion .) ]
  ! PT              [ reduce using rule 109 (expresion -> AMP expresion .) ]


state 156

    (37) instrloop -> LOOP LLAVEIZQ . instrucciones LLAVEDER
    (17) instrucciones -> . instruccion instrucciones
    (18) instrucciones -> . instruccion
    (19) instruccion -> . LET mutable ID pyc arrtipos IGUAL logica PTCOMA
    (20) instruccion -> . ID listarreglo IGUAL logica PTCOMA
    (21) instruccion -> . ID PARIZQ listexpr PARDER PTCOMA
    (22) instruccion -> . PRINT NOT PARIZQ listexpr PARDER PTCOMA
    (23) instruccion -> . IF logica LLAVEIZQ instrucciones LLAVEDER unelse
    (24) instruccion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (25) instruccion -> . WHILE logica LLAVEIZQ instrucciones LLAVEDER
    (26) instruccion -> . FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER
    (27) instruccion -> . MATCH logica LLAVEIZQ insmatch LLAVEDER
    (28) instruccion -> . BREAK PTCOMA
    (29) instruccion -> . CONTINUE PTCOMA
    (30) instruccion -> . BREAK logica PTCOMA
    (31) instruccion -> . RETURN logica PTCOMA

    LET             shift and go to state 51
    ID              shift and go to state 52
    PRINT           shift and go to state 53
    IF              shift and go to state 54
    LOOP            shift and go to state 55
    WHILE           shift and go to state 56
    FOR             shift and go to state 57
    MATCH           shift and go to state 58
    BREAK           shift and go to state 59
    CONTINUE        shift and go to state 60
    RETURN          shift and go to state 61

    instrucciones                  shift and go to state 207
    instruccion                    shift and go to state 50

state 157

    (45) instrmatch -> MATCH logica . LLAVEIZQ opmatch LLAVEDER
    (58) logica -> logica . AND logica
    (59) logica -> logica . OR logica

    LLAVEIZQ        shift and go to state 208
    AND             shift and go to state 131
    OR              shift and go to state 132


state 158

    (24) instruccion -> LOOP LLAVEIZQ instrucciones . LLAVEDER

    LLAVEDER        shift and go to state 209


state 159

    (25) instruccion -> WHILE logica LLAVEIZQ . instrucciones LLAVEDER
    (17) instrucciones -> . instruccion instrucciones
    (18) instrucciones -> . instruccion
    (19) instruccion -> . LET mutable ID pyc arrtipos IGUAL logica PTCOMA
    (20) instruccion -> . ID listarreglo IGUAL logica PTCOMA
    (21) instruccion -> . ID PARIZQ listexpr PARDER PTCOMA
    (22) instruccion -> . PRINT NOT PARIZQ listexpr PARDER PTCOMA
    (23) instruccion -> . IF logica LLAVEIZQ instrucciones LLAVEDER unelse
    (24) instruccion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (25) instruccion -> . WHILE logica LLAVEIZQ instrucciones LLAVEDER
    (26) instruccion -> . FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER
    (27) instruccion -> . MATCH logica LLAVEIZQ insmatch LLAVEDER
    (28) instruccion -> . BREAK PTCOMA
    (29) instruccion -> . CONTINUE PTCOMA
    (30) instruccion -> . BREAK logica PTCOMA
    (31) instruccion -> . RETURN logica PTCOMA

    LET             shift and go to state 51
    ID              shift and go to state 52
    PRINT           shift and go to state 53
    IF              shift and go to state 54
    LOOP            shift and go to state 55
    WHILE           shift and go to state 56
    FOR             shift and go to state 57
    MATCH           shift and go to state 58
    BREAK           shift and go to state 59
    CONTINUE        shift and go to state 60
    RETURN          shift and go to state 61

    instrucciones                  shift and go to state 210
    instruccion                    shift and go to state 50

state 160

    (26) instruccion -> FOR ID IN . opcionfor LLAVEIZQ instrucciones LLAVEDER
    (53) opcionfor -> . logica PT2 logica
    (54) opcionfor -> . logica
    (58) logica -> . logica AND logica
    (59) logica -> . logica OR logica
    (60) logica -> . NOT logica
    (61) logica -> . rel
    (62) rel -> . rel IGUAL IGUAL rel
    (63) rel -> . rel MENOR rel
    (64) rel -> . rel MAYOR rel
    (65) rel -> . rel MEIGUAL rel
    (66) rel -> . rel MAIGUAL rel
    (67) rel -> . rel DIS rel
    (68) rel -> . expresion
    (86) expresion -> . expresion MAS expresion
    (87) expresion -> . expresion MENOS expresion
    (88) expresion -> . expresion POR expresion
    (89) expresion -> . expresion DIVIDIDO expresion
    (90) expresion -> . expresion MOD expresion
    (91) expresion -> . expresion AS tipos
    (92) expresion -> . instrif
    (93) expresion -> . MENOS expresion
    (94) expresion -> . PARIZQ logica PARDER
    (95) expresion -> . ENTERO
    (96) expresion -> . DECIMAL
    (97) expresion -> . FORM
    (98) expresion -> . TRUE
    (99) expresion -> . FALSE
    (100) expresion -> . VECM NOT listarreglo
    (101) expresion -> . ID PARIZQ listexpr PARDER
    (102) expresion -> . ID
    (103) expresion -> . ID listaarreglo
    (106) expresion -> . CORIZQ listexpr CORDER
    (107) expresion -> . CHARE
    (108) expresion -> . expresion DPT2 expresion
    (109) expresion -> . AMP expresion
    (110) expresion -> . tipos DPT2 POW PARIZQ logica COMA logica PARDER
    (111) expresion -> . tipos DPT2 POWF PARIZQ logica COMA logica PARDER
    (112) expresion -> . instrloop
    (113) expresion -> . instrmatch
    (114) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (115) expresion -> . expresion PT SQRT PARIZQ PARDER
    (116) expresion -> . expresion PT ABS PARIZQ PARDER
    (117) expresion -> . expresion PT CLONE PARIZQ PARDER
    (118) expresion -> . expresion PT LEN PARIZQ PARDER
    (119) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (120) expresion -> . expresion PT CONTA PARIZQ expresion PARDER
    (49) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE
    (37) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (45) instrmatch -> . MATCH logica LLAVEIZQ opmatch LLAVEDER

    NOT             shift and go to state 87
    MENOS           shift and go to state 90
    PARIZQ          shift and go to state 93
    ENTERO          shift and go to state 94
    DECIMAL         shift and go to state 95
    FORM            shift and go to state 96
    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    VECM            shift and go to state 99
    ID              shift and go to state 100
    CORIZQ          shift and go to state 101
    CHARE           shift and go to state 102
    AMP             shift and go to state 103
    IF              shift and go to state 85
    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    USIZE           shift and go to state 69
    LOOP            shift and go to state 106
    MATCH           shift and go to state 107

    opcionfor                      shift and go to state 211
    logica                         shift and go to state 212
    rel                            shift and go to state 88
    expresion                      shift and go to state 89
    tipos                          shift and go to state 91
    instrif                        shift and go to state 92
    instrloop                      shift and go to state 104
    instrmatch                     shift and go to state 105

state 161

    (27) instruccion -> MATCH logica LLAVEIZQ . insmatch LLAVEDER
    (38) insmatch -> . insmatch otro2
    (39) insmatch -> . otro2
    (40) otro2 -> . lmatch IMAYOR opcion COMA
    (43) lmatch -> . lmatch AB logica
    (44) lmatch -> . logica
    (58) logica -> . logica AND logica
    (59) logica -> . logica OR logica
    (60) logica -> . NOT logica
    (61) logica -> . rel
    (62) rel -> . rel IGUAL IGUAL rel
    (63) rel -> . rel MENOR rel
    (64) rel -> . rel MAYOR rel
    (65) rel -> . rel MEIGUAL rel
    (66) rel -> . rel MAIGUAL rel
    (67) rel -> . rel DIS rel
    (68) rel -> . expresion
    (86) expresion -> . expresion MAS expresion
    (87) expresion -> . expresion MENOS expresion
    (88) expresion -> . expresion POR expresion
    (89) expresion -> . expresion DIVIDIDO expresion
    (90) expresion -> . expresion MOD expresion
    (91) expresion -> . expresion AS tipos
    (92) expresion -> . instrif
    (93) expresion -> . MENOS expresion
    (94) expresion -> . PARIZQ logica PARDER
    (95) expresion -> . ENTERO
    (96) expresion -> . DECIMAL
    (97) expresion -> . FORM
    (98) expresion -> . TRUE
    (99) expresion -> . FALSE
    (100) expresion -> . VECM NOT listarreglo
    (101) expresion -> . ID PARIZQ listexpr PARDER
    (102) expresion -> . ID
    (103) expresion -> . ID listaarreglo
    (106) expresion -> . CORIZQ listexpr CORDER
    (107) expresion -> . CHARE
    (108) expresion -> . expresion DPT2 expresion
    (109) expresion -> . AMP expresion
    (110) expresion -> . tipos DPT2 POW PARIZQ logica COMA logica PARDER
    (111) expresion -> . tipos DPT2 POWF PARIZQ logica COMA logica PARDER
    (112) expresion -> . instrloop
    (113) expresion -> . instrmatch
    (114) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (115) expresion -> . expresion PT SQRT PARIZQ PARDER
    (116) expresion -> . expresion PT ABS PARIZQ PARDER
    (117) expresion -> . expresion PT CLONE PARIZQ PARDER
    (118) expresion -> . expresion PT LEN PARIZQ PARDER
    (119) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (120) expresion -> . expresion PT CONTA PARIZQ expresion PARDER
    (49) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE
    (37) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (45) instrmatch -> . MATCH logica LLAVEIZQ opmatch LLAVEDER

    NOT             shift and go to state 87
    MENOS           shift and go to state 90
    PARIZQ          shift and go to state 93
    ENTERO          shift and go to state 94
    DECIMAL         shift and go to state 95
    FORM            shift and go to state 96
    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    VECM            shift and go to state 99
    ID              shift and go to state 100
    CORIZQ          shift and go to state 101
    CHARE           shift and go to state 102
    AMP             shift and go to state 103
    IF              shift and go to state 85
    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    USIZE           shift and go to state 69
    LOOP            shift and go to state 106
    MATCH           shift and go to state 107

    logica                         shift and go to state 213
    insmatch                       shift and go to state 214
    otro2                          shift and go to state 215
    lmatch                         shift and go to state 216
    rel                            shift and go to state 88
    expresion                      shift and go to state 89
    tipos                          shift and go to state 91
    instrif                        shift and go to state 92
    instrloop                      shift and go to state 104
    instrmatch                     shift and go to state 105

state 162

    (30) instruccion -> BREAK logica PTCOMA .

    LET             reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    ID              reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    PRINT           reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    IF              reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    LOOP            reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    WHILE           reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    FOR             reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    MATCH           reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    BREAK           reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    CONTINUE        reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    RETURN          reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    LLAVEDER        reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    COMA            reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    MENOS           reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    PARIZQ          reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    ENTERO          reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    DECIMAL         reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    FORM            reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    TRUE            reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    FALSE           reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    VECM            reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    CORIZQ          reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    CHARE           reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    AMP             reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    I64             reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    F64             reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    BOOL            reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    CHAR            reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    STRING          reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)
    USIZE           reduce using rule 30 (instruccion -> BREAK logica PTCOMA .)


state 163

    (31) instruccion -> RETURN logica PTCOMA .

    LET             reduce using rule 31 (instruccion -> RETURN logica PTCOMA .)
    ID              reduce using rule 31 (instruccion -> RETURN logica PTCOMA .)
    PRINT           reduce using rule 31 (instruccion -> RETURN logica PTCOMA .)
    IF              reduce using rule 31 (instruccion -> RETURN logica PTCOMA .)
    LOOP            reduce using rule 31 (instruccion -> RETURN logica PTCOMA .)
    WHILE           reduce using rule 31 (instruccion -> RETURN logica PTCOMA .)
    FOR             reduce using rule 31 (instruccion -> RETURN logica PTCOMA .)
    MATCH           reduce using rule 31 (instruccion -> RETURN logica PTCOMA .)
    BREAK           reduce using rule 31 (instruccion -> RETURN logica PTCOMA .)
    CONTINUE        reduce using rule 31 (instruccion -> RETURN logica PTCOMA .)
    RETURN          reduce using rule 31 (instruccion -> RETURN logica PTCOMA .)
    LLAVEDER        reduce using rule 31 (instruccion -> RETURN logica PTCOMA .)
    COMA            reduce using rule 31 (instruccion -> RETURN logica PTCOMA .)
    MENOS           reduce using rule 31 (instruccion -> RETURN logica PTCOMA .)
    PARIZQ          reduce using rule 31 (instruccion -> RETURN logica PTCOMA .)
    ENTERO          reduce using rule 31 (instruccion -> RETURN logica PTCOMA .)
    DECIMAL         reduce using rule 31 (instruccion -> RETURN logica PTCOMA .)
    FORM            reduce using rule 31 (instruccion -> RETURN logica PTCOMA .)
    TRUE            reduce using rule 31 (instruccion -> RETURN logica PTCOMA .)
    FALSE           reduce using rule 31 (instruccion -> RETURN logica PTCOMA .)
    VECM            reduce using rule 31 (instruccion -> RETURN logica PTCOMA .)
    CORIZQ          reduce using rule 31 (instruccion -> RETURN logica PTCOMA .)
    CHARE           reduce using rule 31 (instruccion -> RETURN logica PTCOMA .)
    AMP             reduce using rule 31 (instruccion -> RETURN logica PTCOMA .)
    I64             reduce using rule 31 (instruccion -> RETURN logica PTCOMA .)
    F64             reduce using rule 31 (instruccion -> RETURN logica PTCOMA .)
    BOOL            reduce using rule 31 (instruccion -> RETURN logica PTCOMA .)
    CHAR            reduce using rule 31 (instruccion -> RETURN logica PTCOMA .)
    STRING          reduce using rule 31 (instruccion -> RETURN logica PTCOMA .)
    USIZE           reduce using rule 31 (instruccion -> RETURN logica PTCOMA .)


state 164

    (13) liststruct -> liststruct COMA ID DPT tipos .

    LLAVEDER        reduce using rule 13 (liststruct -> liststruct COMA ID DPT tipos .)
    COMA            reduce using rule 13 (liststruct -> liststruct COMA ID DPT tipos .)


state 165

    (3) funcion -> PUB FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones . LLAVEDER

    LLAVEDER        shift and go to state 217


state 166

    (4) funcion -> FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER .

    PUB             reduce using rule 4 (funcion -> FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER .)
    FN              reduce using rule 4 (funcion -> FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER .)
    MODF            reduce using rule 4 (funcion -> FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER .)
    STRUCT          reduce using rule 4 (funcion -> FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER .)
    $end            reduce using rule 4 (funcion -> FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER .)
    LLAVEDER        reduce using rule 4 (funcion -> FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER .)


state 167

    (11) parametros2 -> parametros2 COMA mutable ID DPT tipos .

    COMA            reduce using rule 11 (parametros2 -> parametros2 COMA mutable ID DPT tipos .)
    PARDER          reduce using rule 11 (parametros2 -> parametros2 COMA mutable ID DPT tipos .)


state 168

    (19) instruccion -> LET mutable ID pyc . arrtipos IGUAL logica PTCOMA
    (73) arrtipos -> . tipos
    (74) arrtipos -> . arreglos
    (75) arrtipos -> . empty
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE
    (76) arreglos -> . CORIZQ arreglos PTCOMA ENTERO CORDER
    (77) arreglos -> . tipos
    (78) arreglos -> . ID
    (125) empty -> .

    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    AMP             shift and go to state 68
    USIZE           shift and go to state 69
    CORIZQ          shift and go to state 223
    ID              shift and go to state 218
    IGUAL           reduce using rule 125 (empty -> .)

    arrtipos                       shift and go to state 219
    tipos                          shift and go to state 220
    arreglos                       shift and go to state 221
    empty                          shift and go to state 222

state 169

    (71) pyc -> DPT .

    I64             reduce using rule 71 (pyc -> DPT .)
    F64             reduce using rule 71 (pyc -> DPT .)
    BOOL            reduce using rule 71 (pyc -> DPT .)
    CHAR            reduce using rule 71 (pyc -> DPT .)
    STRING          reduce using rule 71 (pyc -> DPT .)
    AMP             reduce using rule 71 (pyc -> DPT .)
    USIZE           reduce using rule 71 (pyc -> DPT .)
    CORIZQ          reduce using rule 71 (pyc -> DPT .)
    ID              reduce using rule 71 (pyc -> DPT .)
    IGUAL           reduce using rule 71 (pyc -> DPT .)


state 170

    (72) pyc -> empty .

    I64             reduce using rule 72 (pyc -> empty .)
    F64             reduce using rule 72 (pyc -> empty .)
    BOOL            reduce using rule 72 (pyc -> empty .)
    CHAR            reduce using rule 72 (pyc -> empty .)
    STRING          reduce using rule 72 (pyc -> empty .)
    AMP             reduce using rule 72 (pyc -> empty .)
    USIZE           reduce using rule 72 (pyc -> empty .)
    CORIZQ          reduce using rule 72 (pyc -> empty .)
    ID              reduce using rule 72 (pyc -> empty .)
    IGUAL           reduce using rule 72 (pyc -> empty .)


state 171

    (20) instruccion -> ID listarreglo IGUAL logica . PTCOMA
    (58) logica -> logica . AND logica
    (59) logica -> logica . OR logica

    PTCOMA          shift and go to state 224
    AND             shift and go to state 131
    OR              shift and go to state 132


state 172

    (21) instruccion -> ID PARIZQ listexpr PARDER . PTCOMA

    PTCOMA          shift and go to state 225


state 173

    (123) listexpr -> listexpr COMA . logica
    (58) logica -> . logica AND logica
    (59) logica -> . logica OR logica
    (60) logica -> . NOT logica
    (61) logica -> . rel
    (62) rel -> . rel IGUAL IGUAL rel
    (63) rel -> . rel MENOR rel
    (64) rel -> . rel MAYOR rel
    (65) rel -> . rel MEIGUAL rel
    (66) rel -> . rel MAIGUAL rel
    (67) rel -> . rel DIS rel
    (68) rel -> . expresion
    (86) expresion -> . expresion MAS expresion
    (87) expresion -> . expresion MENOS expresion
    (88) expresion -> . expresion POR expresion
    (89) expresion -> . expresion DIVIDIDO expresion
    (90) expresion -> . expresion MOD expresion
    (91) expresion -> . expresion AS tipos
    (92) expresion -> . instrif
    (93) expresion -> . MENOS expresion
    (94) expresion -> . PARIZQ logica PARDER
    (95) expresion -> . ENTERO
    (96) expresion -> . DECIMAL
    (97) expresion -> . FORM
    (98) expresion -> . TRUE
    (99) expresion -> . FALSE
    (100) expresion -> . VECM NOT listarreglo
    (101) expresion -> . ID PARIZQ listexpr PARDER
    (102) expresion -> . ID
    (103) expresion -> . ID listaarreglo
    (106) expresion -> . CORIZQ listexpr CORDER
    (107) expresion -> . CHARE
    (108) expresion -> . expresion DPT2 expresion
    (109) expresion -> . AMP expresion
    (110) expresion -> . tipos DPT2 POW PARIZQ logica COMA logica PARDER
    (111) expresion -> . tipos DPT2 POWF PARIZQ logica COMA logica PARDER
    (112) expresion -> . instrloop
    (113) expresion -> . instrmatch
    (114) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (115) expresion -> . expresion PT SQRT PARIZQ PARDER
    (116) expresion -> . expresion PT ABS PARIZQ PARDER
    (117) expresion -> . expresion PT CLONE PARIZQ PARDER
    (118) expresion -> . expresion PT LEN PARIZQ PARDER
    (119) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (120) expresion -> . expresion PT CONTA PARIZQ expresion PARDER
    (49) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE
    (37) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (45) instrmatch -> . MATCH logica LLAVEIZQ opmatch LLAVEDER

    NOT             shift and go to state 87
    MENOS           shift and go to state 90
    PARIZQ          shift and go to state 93
    ENTERO          shift and go to state 94
    DECIMAL         shift and go to state 95
    FORM            shift and go to state 96
    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    VECM            shift and go to state 99
    ID              shift and go to state 100
    CORIZQ          shift and go to state 101
    CHARE           shift and go to state 102
    AMP             shift and go to state 103
    IF              shift and go to state 85
    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    USIZE           shift and go to state 69
    LOOP            shift and go to state 106
    MATCH           shift and go to state 107

    logica                         shift and go to state 226
    rel                            shift and go to state 88
    expresion                      shift and go to state 89
    tipos                          shift and go to state 91
    instrif                        shift and go to state 92
    instrloop                      shift and go to state 104
    instrmatch                     shift and go to state 105

state 174

    (104) listaarreglo -> listaarreglo CORIZQ expresion . CORDER
    (86) expresion -> expresion . MAS expresion
    (87) expresion -> expresion . MENOS expresion
    (88) expresion -> expresion . POR expresion
    (89) expresion -> expresion . DIVIDIDO expresion
    (90) expresion -> expresion . MOD expresion
    (91) expresion -> expresion . AS tipos
    (108) expresion -> expresion . DPT2 expresion
    (114) expresion -> expresion . PT TOSTRING PARIZQ PARDER
    (115) expresion -> expresion . PT SQRT PARIZQ PARDER
    (116) expresion -> expresion . PT ABS PARIZQ PARDER
    (117) expresion -> expresion . PT CLONE PARIZQ PARDER
    (118) expresion -> expresion . PT LEN PARIZQ PARDER
    (119) expresion -> expresion . PT TOOWNED PARIZQ PARDER
    (120) expresion -> expresion . PT CONTA PARIZQ expresion PARDER

    CORDER          shift and go to state 227
    MAS             shift and go to state 140
    MENOS           shift and go to state 141
    POR             shift and go to state 142
    DIVIDIDO        shift and go to state 143
    MOD             shift and go to state 144
    AS              shift and go to state 145
    DPT2            shift and go to state 146
    PT              shift and go to state 147


state 175

    (105) listaarreglo -> CORIZQ expresion CORDER .

    CORIZQ          reduce using rule 105 (listaarreglo -> CORIZQ expresion CORDER .)
    IGUAL           reduce using rule 105 (listaarreglo -> CORIZQ expresion CORDER .)
    MAS             reduce using rule 105 (listaarreglo -> CORIZQ expresion CORDER .)
    MENOS           reduce using rule 105 (listaarreglo -> CORIZQ expresion CORDER .)
    POR             reduce using rule 105 (listaarreglo -> CORIZQ expresion CORDER .)
    DIVIDIDO        reduce using rule 105 (listaarreglo -> CORIZQ expresion CORDER .)
    MOD             reduce using rule 105 (listaarreglo -> CORIZQ expresion CORDER .)
    AS              reduce using rule 105 (listaarreglo -> CORIZQ expresion CORDER .)
    DPT2            reduce using rule 105 (listaarreglo -> CORIZQ expresion CORDER .)
    PT              reduce using rule 105 (listaarreglo -> CORIZQ expresion CORDER .)
    MENOR           reduce using rule 105 (listaarreglo -> CORIZQ expresion CORDER .)
    MAYOR           reduce using rule 105 (listaarreglo -> CORIZQ expresion CORDER .)
    MEIGUAL         reduce using rule 105 (listaarreglo -> CORIZQ expresion CORDER .)
    MAIGUAL         reduce using rule 105 (listaarreglo -> CORIZQ expresion CORDER .)
    DIS             reduce using rule 105 (listaarreglo -> CORIZQ expresion CORDER .)
    LLAVEIZQ        reduce using rule 105 (listaarreglo -> CORIZQ expresion CORDER .)
    AND             reduce using rule 105 (listaarreglo -> CORIZQ expresion CORDER .)
    OR              reduce using rule 105 (listaarreglo -> CORIZQ expresion CORDER .)
    PTCOMA          reduce using rule 105 (listaarreglo -> CORIZQ expresion CORDER .)
    PARDER          reduce using rule 105 (listaarreglo -> CORIZQ expresion CORDER .)
    COMA            reduce using rule 105 (listaarreglo -> CORIZQ expresion CORDER .)
    CORDER          reduce using rule 105 (listaarreglo -> CORIZQ expresion CORDER .)
    PT2             reduce using rule 105 (listaarreglo -> CORIZQ expresion CORDER .)
    IMAYOR          reduce using rule 105 (listaarreglo -> CORIZQ expresion CORDER .)
    AB              reduce using rule 105 (listaarreglo -> CORIZQ expresion CORDER .)
    LLAVEDER        reduce using rule 105 (listaarreglo -> CORIZQ expresion CORDER .)


state 176

    (22) instruccion -> PRINT NOT PARIZQ listexpr . PARDER PTCOMA
    (123) listexpr -> listexpr . COMA logica

    PARDER          shift and go to state 228
    COMA            shift and go to state 173


state 177

    (49) instrif -> IF logica LLAVEIZQ . instruccionesexp LLAVEDER instrelse
    (32) instruccionesexp -> . instruccion instruccionesexpfin
    (33) instruccionesexp -> . instruccionesexpfin
    (19) instruccion -> . LET mutable ID pyc arrtipos IGUAL logica PTCOMA
    (20) instruccion -> . ID listarreglo IGUAL logica PTCOMA
    (21) instruccion -> . ID PARIZQ listexpr PARDER PTCOMA
    (22) instruccion -> . PRINT NOT PARIZQ listexpr PARDER PTCOMA
    (23) instruccion -> . IF logica LLAVEIZQ instrucciones LLAVEDER unelse
    (24) instruccion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (25) instruccion -> . WHILE logica LLAVEIZQ instrucciones LLAVEDER
    (26) instruccion -> . FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER
    (27) instruccion -> . MATCH logica LLAVEIZQ insmatch LLAVEDER
    (28) instruccion -> . BREAK PTCOMA
    (29) instruccion -> . CONTINUE PTCOMA
    (30) instruccion -> . BREAK logica PTCOMA
    (31) instruccion -> . RETURN logica PTCOMA
    (34) instruccionesexpfin -> . instruccionesexp
    (35) instruccionesexpfin -> . expresion
    (36) instruccionesexpfin -> .
    (86) expresion -> . expresion MAS expresion
    (87) expresion -> . expresion MENOS expresion
    (88) expresion -> . expresion POR expresion
    (89) expresion -> . expresion DIVIDIDO expresion
    (90) expresion -> . expresion MOD expresion
    (91) expresion -> . expresion AS tipos
    (92) expresion -> . instrif
    (93) expresion -> . MENOS expresion
    (94) expresion -> . PARIZQ logica PARDER
    (95) expresion -> . ENTERO
    (96) expresion -> . DECIMAL
    (97) expresion -> . FORM
    (98) expresion -> . TRUE
    (99) expresion -> . FALSE
    (100) expresion -> . VECM NOT listarreglo
    (101) expresion -> . ID PARIZQ listexpr PARDER
    (102) expresion -> . ID
    (103) expresion -> . ID listaarreglo
    (106) expresion -> . CORIZQ listexpr CORDER
    (107) expresion -> . CHARE
    (108) expresion -> . expresion DPT2 expresion
    (109) expresion -> . AMP expresion
    (110) expresion -> . tipos DPT2 POW PARIZQ logica COMA logica PARDER
    (111) expresion -> . tipos DPT2 POWF PARIZQ logica COMA logica PARDER
    (112) expresion -> . instrloop
    (113) expresion -> . instrmatch
    (114) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (115) expresion -> . expresion PT SQRT PARIZQ PARDER
    (116) expresion -> . expresion PT ABS PARIZQ PARDER
    (117) expresion -> . expresion PT CLONE PARIZQ PARDER
    (118) expresion -> . expresion PT LEN PARIZQ PARDER
    (119) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (120) expresion -> . expresion PT CONTA PARIZQ expresion PARDER
    (49) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE
    (37) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (45) instrmatch -> . MATCH logica LLAVEIZQ opmatch LLAVEDER

    LET             shift and go to state 51
    ID              shift and go to state 233
    PRINT           shift and go to state 53
    IF              shift and go to state 229
    LOOP            shift and go to state 234
    WHILE           shift and go to state 56
    FOR             shift and go to state 57
    MATCH           shift and go to state 235
    BREAK           shift and go to state 59
    CONTINUE        shift and go to state 60
    RETURN          shift and go to state 61
    LLAVEDER        reduce using rule 36 (instruccionesexpfin -> .)
    MENOS           shift and go to state 90
    PARIZQ          shift and go to state 93
    ENTERO          shift and go to state 94
    DECIMAL         shift and go to state 95
    FORM            shift and go to state 96
    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    VECM            shift and go to state 99
    CORIZQ          shift and go to state 101
    CHARE           shift and go to state 102
    AMP             shift and go to state 103
    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    USIZE           shift and go to state 69

    instruccionesexp               shift and go to state 230
    instruccion                    shift and go to state 231
    instruccionesexpfin            shift and go to state 232
    expresion                      shift and go to state 236
    tipos                          shift and go to state 91
    instrif                        shift and go to state 92
    instrloop                      shift and go to state 104
    instrmatch                     shift and go to state 105

state 178

    (23) instruccion -> IF logica LLAVEIZQ instrucciones . LLAVEDER unelse

    LLAVEDER        shift and go to state 237


state 179

    (58) logica -> logica AND logica .
    (58) logica -> logica . AND logica
    (59) logica -> logica . OR logica

    LLAVEIZQ        reduce using rule 58 (logica -> logica AND logica .)
    AND             reduce using rule 58 (logica -> logica AND logica .)
    OR              reduce using rule 58 (logica -> logica AND logica .)
    PTCOMA          reduce using rule 58 (logica -> logica AND logica .)
    PARDER          reduce using rule 58 (logica -> logica AND logica .)
    COMA            reduce using rule 58 (logica -> logica AND logica .)
    CORDER          reduce using rule 58 (logica -> logica AND logica .)
    PT2             reduce using rule 58 (logica -> logica AND logica .)
    IMAYOR          reduce using rule 58 (logica -> logica AND logica .)
    AB              reduce using rule 58 (logica -> logica AND logica .)

  ! AND             [ shift and go to state 131 ]
  ! OR              [ shift and go to state 132 ]


state 180

    (59) logica -> logica OR logica .
    (58) logica -> logica . AND logica
    (59) logica -> logica . OR logica

    LLAVEIZQ        reduce using rule 59 (logica -> logica OR logica .)
    OR              reduce using rule 59 (logica -> logica OR logica .)
    PTCOMA          reduce using rule 59 (logica -> logica OR logica .)
    PARDER          reduce using rule 59 (logica -> logica OR logica .)
    COMA            reduce using rule 59 (logica -> logica OR logica .)
    CORDER          reduce using rule 59 (logica -> logica OR logica .)
    PT2             reduce using rule 59 (logica -> logica OR logica .)
    IMAYOR          reduce using rule 59 (logica -> logica OR logica .)
    AB              reduce using rule 59 (logica -> logica OR logica .)
    AND             shift and go to state 131

  ! AND             [ reduce using rule 59 (logica -> logica OR logica .) ]
  ! OR              [ shift and go to state 132 ]


state 181

    (62) rel -> rel IGUAL IGUAL . rel
    (62) rel -> . rel IGUAL IGUAL rel
    (63) rel -> . rel MENOR rel
    (64) rel -> . rel MAYOR rel
    (65) rel -> . rel MEIGUAL rel
    (66) rel -> . rel MAIGUAL rel
    (67) rel -> . rel DIS rel
    (68) rel -> . expresion
    (86) expresion -> . expresion MAS expresion
    (87) expresion -> . expresion MENOS expresion
    (88) expresion -> . expresion POR expresion
    (89) expresion -> . expresion DIVIDIDO expresion
    (90) expresion -> . expresion MOD expresion
    (91) expresion -> . expresion AS tipos
    (92) expresion -> . instrif
    (93) expresion -> . MENOS expresion
    (94) expresion -> . PARIZQ logica PARDER
    (95) expresion -> . ENTERO
    (96) expresion -> . DECIMAL
    (97) expresion -> . FORM
    (98) expresion -> . TRUE
    (99) expresion -> . FALSE
    (100) expresion -> . VECM NOT listarreglo
    (101) expresion -> . ID PARIZQ listexpr PARDER
    (102) expresion -> . ID
    (103) expresion -> . ID listaarreglo
    (106) expresion -> . CORIZQ listexpr CORDER
    (107) expresion -> . CHARE
    (108) expresion -> . expresion DPT2 expresion
    (109) expresion -> . AMP expresion
    (110) expresion -> . tipos DPT2 POW PARIZQ logica COMA logica PARDER
    (111) expresion -> . tipos DPT2 POWF PARIZQ logica COMA logica PARDER
    (112) expresion -> . instrloop
    (113) expresion -> . instrmatch
    (114) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (115) expresion -> . expresion PT SQRT PARIZQ PARDER
    (116) expresion -> . expresion PT ABS PARIZQ PARDER
    (117) expresion -> . expresion PT CLONE PARIZQ PARDER
    (118) expresion -> . expresion PT LEN PARIZQ PARDER
    (119) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (120) expresion -> . expresion PT CONTA PARIZQ expresion PARDER
    (49) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE
    (37) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (45) instrmatch -> . MATCH logica LLAVEIZQ opmatch LLAVEDER

    MENOS           shift and go to state 90
    PARIZQ          shift and go to state 93
    ENTERO          shift and go to state 94
    DECIMAL         shift and go to state 95
    FORM            shift and go to state 96
    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    VECM            shift and go to state 99
    ID              shift and go to state 100
    CORIZQ          shift and go to state 101
    CHARE           shift and go to state 102
    AMP             shift and go to state 103
    IF              shift and go to state 85
    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    USIZE           shift and go to state 69
    LOOP            shift and go to state 106
    MATCH           shift and go to state 107

    rel                            shift and go to state 238
    expresion                      shift and go to state 89
    tipos                          shift and go to state 91
    instrif                        shift and go to state 92
    instrloop                      shift and go to state 104
    instrmatch                     shift and go to state 105

state 182

    (63) rel -> rel MENOR rel .
    (62) rel -> rel . IGUAL IGUAL rel
    (63) rel -> rel . MENOR rel
    (64) rel -> rel . MAYOR rel
    (65) rel -> rel . MEIGUAL rel
    (66) rel -> rel . MAIGUAL rel
    (67) rel -> rel . DIS rel

  ! shift/reduce conflict for IGUAL resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for MEIGUAL resolved as shift
  ! shift/reduce conflict for MAIGUAL resolved as shift
  ! shift/reduce conflict for DIS resolved as shift
    LLAVEIZQ        reduce using rule 63 (rel -> rel MENOR rel .)
    AND             reduce using rule 63 (rel -> rel MENOR rel .)
    OR              reduce using rule 63 (rel -> rel MENOR rel .)
    PTCOMA          reduce using rule 63 (rel -> rel MENOR rel .)
    PARDER          reduce using rule 63 (rel -> rel MENOR rel .)
    COMA            reduce using rule 63 (rel -> rel MENOR rel .)
    CORDER          reduce using rule 63 (rel -> rel MENOR rel .)
    PT2             reduce using rule 63 (rel -> rel MENOR rel .)
    IMAYOR          reduce using rule 63 (rel -> rel MENOR rel .)
    AB              reduce using rule 63 (rel -> rel MENOR rel .)
    IGUAL           shift and go to state 134
    MENOR           shift and go to state 135
    MAYOR           shift and go to state 136
    MEIGUAL         shift and go to state 137
    MAIGUAL         shift and go to state 138
    DIS             shift and go to state 139

  ! IGUAL           [ reduce using rule 63 (rel -> rel MENOR rel .) ]
  ! MENOR           [ reduce using rule 63 (rel -> rel MENOR rel .) ]
  ! MAYOR           [ reduce using rule 63 (rel -> rel MENOR rel .) ]
  ! MEIGUAL         [ reduce using rule 63 (rel -> rel MENOR rel .) ]
  ! MAIGUAL         [ reduce using rule 63 (rel -> rel MENOR rel .) ]
  ! DIS             [ reduce using rule 63 (rel -> rel MENOR rel .) ]


state 183

    (64) rel -> rel MAYOR rel .
    (62) rel -> rel . IGUAL IGUAL rel
    (63) rel -> rel . MENOR rel
    (64) rel -> rel . MAYOR rel
    (65) rel -> rel . MEIGUAL rel
    (66) rel -> rel . MAIGUAL rel
    (67) rel -> rel . DIS rel

  ! shift/reduce conflict for IGUAL resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for MEIGUAL resolved as shift
  ! shift/reduce conflict for MAIGUAL resolved as shift
  ! shift/reduce conflict for DIS resolved as shift
    LLAVEIZQ        reduce using rule 64 (rel -> rel MAYOR rel .)
    AND             reduce using rule 64 (rel -> rel MAYOR rel .)
    OR              reduce using rule 64 (rel -> rel MAYOR rel .)
    PTCOMA          reduce using rule 64 (rel -> rel MAYOR rel .)
    PARDER          reduce using rule 64 (rel -> rel MAYOR rel .)
    COMA            reduce using rule 64 (rel -> rel MAYOR rel .)
    CORDER          reduce using rule 64 (rel -> rel MAYOR rel .)
    PT2             reduce using rule 64 (rel -> rel MAYOR rel .)
    IMAYOR          reduce using rule 64 (rel -> rel MAYOR rel .)
    AB              reduce using rule 64 (rel -> rel MAYOR rel .)
    IGUAL           shift and go to state 134
    MENOR           shift and go to state 135
    MAYOR           shift and go to state 136
    MEIGUAL         shift and go to state 137
    MAIGUAL         shift and go to state 138
    DIS             shift and go to state 139

  ! IGUAL           [ reduce using rule 64 (rel -> rel MAYOR rel .) ]
  ! MENOR           [ reduce using rule 64 (rel -> rel MAYOR rel .) ]
  ! MAYOR           [ reduce using rule 64 (rel -> rel MAYOR rel .) ]
  ! MEIGUAL         [ reduce using rule 64 (rel -> rel MAYOR rel .) ]
  ! MAIGUAL         [ reduce using rule 64 (rel -> rel MAYOR rel .) ]
  ! DIS             [ reduce using rule 64 (rel -> rel MAYOR rel .) ]


state 184

    (65) rel -> rel MEIGUAL rel .
    (62) rel -> rel . IGUAL IGUAL rel
    (63) rel -> rel . MENOR rel
    (64) rel -> rel . MAYOR rel
    (65) rel -> rel . MEIGUAL rel
    (66) rel -> rel . MAIGUAL rel
    (67) rel -> rel . DIS rel

  ! shift/reduce conflict for IGUAL resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for MEIGUAL resolved as shift
  ! shift/reduce conflict for MAIGUAL resolved as shift
  ! shift/reduce conflict for DIS resolved as shift
    LLAVEIZQ        reduce using rule 65 (rel -> rel MEIGUAL rel .)
    AND             reduce using rule 65 (rel -> rel MEIGUAL rel .)
    OR              reduce using rule 65 (rel -> rel MEIGUAL rel .)
    PTCOMA          reduce using rule 65 (rel -> rel MEIGUAL rel .)
    PARDER          reduce using rule 65 (rel -> rel MEIGUAL rel .)
    COMA            reduce using rule 65 (rel -> rel MEIGUAL rel .)
    CORDER          reduce using rule 65 (rel -> rel MEIGUAL rel .)
    PT2             reduce using rule 65 (rel -> rel MEIGUAL rel .)
    IMAYOR          reduce using rule 65 (rel -> rel MEIGUAL rel .)
    AB              reduce using rule 65 (rel -> rel MEIGUAL rel .)
    IGUAL           shift and go to state 134
    MENOR           shift and go to state 135
    MAYOR           shift and go to state 136
    MEIGUAL         shift and go to state 137
    MAIGUAL         shift and go to state 138
    DIS             shift and go to state 139

  ! IGUAL           [ reduce using rule 65 (rel -> rel MEIGUAL rel .) ]
  ! MENOR           [ reduce using rule 65 (rel -> rel MEIGUAL rel .) ]
  ! MAYOR           [ reduce using rule 65 (rel -> rel MEIGUAL rel .) ]
  ! MEIGUAL         [ reduce using rule 65 (rel -> rel MEIGUAL rel .) ]
  ! MAIGUAL         [ reduce using rule 65 (rel -> rel MEIGUAL rel .) ]
  ! DIS             [ reduce using rule 65 (rel -> rel MEIGUAL rel .) ]


state 185

    (66) rel -> rel MAIGUAL rel .
    (62) rel -> rel . IGUAL IGUAL rel
    (63) rel -> rel . MENOR rel
    (64) rel -> rel . MAYOR rel
    (65) rel -> rel . MEIGUAL rel
    (66) rel -> rel . MAIGUAL rel
    (67) rel -> rel . DIS rel

  ! shift/reduce conflict for IGUAL resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for MEIGUAL resolved as shift
  ! shift/reduce conflict for MAIGUAL resolved as shift
  ! shift/reduce conflict for DIS resolved as shift
    LLAVEIZQ        reduce using rule 66 (rel -> rel MAIGUAL rel .)
    AND             reduce using rule 66 (rel -> rel MAIGUAL rel .)
    OR              reduce using rule 66 (rel -> rel MAIGUAL rel .)
    PTCOMA          reduce using rule 66 (rel -> rel MAIGUAL rel .)
    PARDER          reduce using rule 66 (rel -> rel MAIGUAL rel .)
    COMA            reduce using rule 66 (rel -> rel MAIGUAL rel .)
    CORDER          reduce using rule 66 (rel -> rel MAIGUAL rel .)
    PT2             reduce using rule 66 (rel -> rel MAIGUAL rel .)
    IMAYOR          reduce using rule 66 (rel -> rel MAIGUAL rel .)
    AB              reduce using rule 66 (rel -> rel MAIGUAL rel .)
    IGUAL           shift and go to state 134
    MENOR           shift and go to state 135
    MAYOR           shift and go to state 136
    MEIGUAL         shift and go to state 137
    MAIGUAL         shift and go to state 138
    DIS             shift and go to state 139

  ! IGUAL           [ reduce using rule 66 (rel -> rel MAIGUAL rel .) ]
  ! MENOR           [ reduce using rule 66 (rel -> rel MAIGUAL rel .) ]
  ! MAYOR           [ reduce using rule 66 (rel -> rel MAIGUAL rel .) ]
  ! MEIGUAL         [ reduce using rule 66 (rel -> rel MAIGUAL rel .) ]
  ! MAIGUAL         [ reduce using rule 66 (rel -> rel MAIGUAL rel .) ]
  ! DIS             [ reduce using rule 66 (rel -> rel MAIGUAL rel .) ]


state 186

    (67) rel -> rel DIS rel .
    (62) rel -> rel . IGUAL IGUAL rel
    (63) rel -> rel . MENOR rel
    (64) rel -> rel . MAYOR rel
    (65) rel -> rel . MEIGUAL rel
    (66) rel -> rel . MAIGUAL rel
    (67) rel -> rel . DIS rel

  ! shift/reduce conflict for IGUAL resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for MEIGUAL resolved as shift
  ! shift/reduce conflict for MAIGUAL resolved as shift
  ! shift/reduce conflict for DIS resolved as shift
    LLAVEIZQ        reduce using rule 67 (rel -> rel DIS rel .)
    AND             reduce using rule 67 (rel -> rel DIS rel .)
    OR              reduce using rule 67 (rel -> rel DIS rel .)
    PTCOMA          reduce using rule 67 (rel -> rel DIS rel .)
    PARDER          reduce using rule 67 (rel -> rel DIS rel .)
    COMA            reduce using rule 67 (rel -> rel DIS rel .)
    CORDER          reduce using rule 67 (rel -> rel DIS rel .)
    PT2             reduce using rule 67 (rel -> rel DIS rel .)
    IMAYOR          reduce using rule 67 (rel -> rel DIS rel .)
    AB              reduce using rule 67 (rel -> rel DIS rel .)
    IGUAL           shift and go to state 134
    MENOR           shift and go to state 135
    MAYOR           shift and go to state 136
    MEIGUAL         shift and go to state 137
    MAIGUAL         shift and go to state 138
    DIS             shift and go to state 139

  ! IGUAL           [ reduce using rule 67 (rel -> rel DIS rel .) ]
  ! MENOR           [ reduce using rule 67 (rel -> rel DIS rel .) ]
  ! MAYOR           [ reduce using rule 67 (rel -> rel DIS rel .) ]
  ! MEIGUAL         [ reduce using rule 67 (rel -> rel DIS rel .) ]
  ! MAIGUAL         [ reduce using rule 67 (rel -> rel DIS rel .) ]
  ! DIS             [ reduce using rule 67 (rel -> rel DIS rel .) ]


state 187

    (86) expresion -> expresion MAS expresion .
    (86) expresion -> expresion . MAS expresion
    (87) expresion -> expresion . MENOS expresion
    (88) expresion -> expresion . POR expresion
    (89) expresion -> expresion . DIVIDIDO expresion
    (90) expresion -> expresion . MOD expresion
    (91) expresion -> expresion . AS tipos
    (108) expresion -> expresion . DPT2 expresion
    (114) expresion -> expresion . PT TOSTRING PARIZQ PARDER
    (115) expresion -> expresion . PT SQRT PARIZQ PARDER
    (116) expresion -> expresion . PT ABS PARIZQ PARDER
    (117) expresion -> expresion . PT CLONE PARIZQ PARDER
    (118) expresion -> expresion . PT LEN PARIZQ PARDER
    (119) expresion -> expresion . PT TOOWNED PARIZQ PARDER
    (120) expresion -> expresion . PT CONTA PARIZQ expresion PARDER

    MAS             reduce using rule 86 (expresion -> expresion MAS expresion .)
    MENOS           reduce using rule 86 (expresion -> expresion MAS expresion .)
    AS              reduce using rule 86 (expresion -> expresion MAS expresion .)
    DPT2            reduce using rule 86 (expresion -> expresion MAS expresion .)
    PT              reduce using rule 86 (expresion -> expresion MAS expresion .)
    IGUAL           reduce using rule 86 (expresion -> expresion MAS expresion .)
    MENOR           reduce using rule 86 (expresion -> expresion MAS expresion .)
    MAYOR           reduce using rule 86 (expresion -> expresion MAS expresion .)
    MEIGUAL         reduce using rule 86 (expresion -> expresion MAS expresion .)
    MAIGUAL         reduce using rule 86 (expresion -> expresion MAS expresion .)
    DIS             reduce using rule 86 (expresion -> expresion MAS expresion .)
    LLAVEIZQ        reduce using rule 86 (expresion -> expresion MAS expresion .)
    AND             reduce using rule 86 (expresion -> expresion MAS expresion .)
    OR              reduce using rule 86 (expresion -> expresion MAS expresion .)
    PTCOMA          reduce using rule 86 (expresion -> expresion MAS expresion .)
    PARDER          reduce using rule 86 (expresion -> expresion MAS expresion .)
    COMA            reduce using rule 86 (expresion -> expresion MAS expresion .)
    CORDER          reduce using rule 86 (expresion -> expresion MAS expresion .)
    PT2             reduce using rule 86 (expresion -> expresion MAS expresion .)
    IMAYOR          reduce using rule 86 (expresion -> expresion MAS expresion .)
    AB              reduce using rule 86 (expresion -> expresion MAS expresion .)
    LLAVEDER        reduce using rule 86 (expresion -> expresion MAS expresion .)
    POR             shift and go to state 142
    DIVIDIDO        shift and go to state 143
    MOD             shift and go to state 144

  ! POR             [ reduce using rule 86 (expresion -> expresion MAS expresion .) ]
  ! DIVIDIDO        [ reduce using rule 86 (expresion -> expresion MAS expresion .) ]
  ! MOD             [ reduce using rule 86 (expresion -> expresion MAS expresion .) ]
  ! MAS             [ shift and go to state 140 ]
  ! MENOS           [ shift and go to state 141 ]
  ! AS              [ shift and go to state 145 ]
  ! DPT2            [ shift and go to state 146 ]
  ! PT              [ shift and go to state 147 ]


state 188

    (87) expresion -> expresion MENOS expresion .
    (86) expresion -> expresion . MAS expresion
    (87) expresion -> expresion . MENOS expresion
    (88) expresion -> expresion . POR expresion
    (89) expresion -> expresion . DIVIDIDO expresion
    (90) expresion -> expresion . MOD expresion
    (91) expresion -> expresion . AS tipos
    (108) expresion -> expresion . DPT2 expresion
    (114) expresion -> expresion . PT TOSTRING PARIZQ PARDER
    (115) expresion -> expresion . PT SQRT PARIZQ PARDER
    (116) expresion -> expresion . PT ABS PARIZQ PARDER
    (117) expresion -> expresion . PT CLONE PARIZQ PARDER
    (118) expresion -> expresion . PT LEN PARIZQ PARDER
    (119) expresion -> expresion . PT TOOWNED PARIZQ PARDER
    (120) expresion -> expresion . PT CONTA PARIZQ expresion PARDER

    MAS             reduce using rule 87 (expresion -> expresion MENOS expresion .)
    MENOS           reduce using rule 87 (expresion -> expresion MENOS expresion .)
    AS              reduce using rule 87 (expresion -> expresion MENOS expresion .)
    DPT2            reduce using rule 87 (expresion -> expresion MENOS expresion .)
    PT              reduce using rule 87 (expresion -> expresion MENOS expresion .)
    IGUAL           reduce using rule 87 (expresion -> expresion MENOS expresion .)
    MENOR           reduce using rule 87 (expresion -> expresion MENOS expresion .)
    MAYOR           reduce using rule 87 (expresion -> expresion MENOS expresion .)
    MEIGUAL         reduce using rule 87 (expresion -> expresion MENOS expresion .)
    MAIGUAL         reduce using rule 87 (expresion -> expresion MENOS expresion .)
    DIS             reduce using rule 87 (expresion -> expresion MENOS expresion .)
    LLAVEIZQ        reduce using rule 87 (expresion -> expresion MENOS expresion .)
    AND             reduce using rule 87 (expresion -> expresion MENOS expresion .)
    OR              reduce using rule 87 (expresion -> expresion MENOS expresion .)
    PTCOMA          reduce using rule 87 (expresion -> expresion MENOS expresion .)
    PARDER          reduce using rule 87 (expresion -> expresion MENOS expresion .)
    COMA            reduce using rule 87 (expresion -> expresion MENOS expresion .)
    CORDER          reduce using rule 87 (expresion -> expresion MENOS expresion .)
    PT2             reduce using rule 87 (expresion -> expresion MENOS expresion .)
    IMAYOR          reduce using rule 87 (expresion -> expresion MENOS expresion .)
    AB              reduce using rule 87 (expresion -> expresion MENOS expresion .)
    LLAVEDER        reduce using rule 87 (expresion -> expresion MENOS expresion .)
    POR             shift and go to state 142
    DIVIDIDO        shift and go to state 143
    MOD             shift and go to state 144

  ! POR             [ reduce using rule 87 (expresion -> expresion MENOS expresion .) ]
  ! DIVIDIDO        [ reduce using rule 87 (expresion -> expresion MENOS expresion .) ]
  ! MOD             [ reduce using rule 87 (expresion -> expresion MENOS expresion .) ]
  ! MAS             [ shift and go to state 140 ]
  ! MENOS           [ shift and go to state 141 ]
  ! AS              [ shift and go to state 145 ]
  ! DPT2            [ shift and go to state 146 ]
  ! PT              [ shift and go to state 147 ]


state 189

    (88) expresion -> expresion POR expresion .
    (86) expresion -> expresion . MAS expresion
    (87) expresion -> expresion . MENOS expresion
    (88) expresion -> expresion . POR expresion
    (89) expresion -> expresion . DIVIDIDO expresion
    (90) expresion -> expresion . MOD expresion
    (91) expresion -> expresion . AS tipos
    (108) expresion -> expresion . DPT2 expresion
    (114) expresion -> expresion . PT TOSTRING PARIZQ PARDER
    (115) expresion -> expresion . PT SQRT PARIZQ PARDER
    (116) expresion -> expresion . PT ABS PARIZQ PARDER
    (117) expresion -> expresion . PT CLONE PARIZQ PARDER
    (118) expresion -> expresion . PT LEN PARIZQ PARDER
    (119) expresion -> expresion . PT TOOWNED PARIZQ PARDER
    (120) expresion -> expresion . PT CONTA PARIZQ expresion PARDER

    MAS             reduce using rule 88 (expresion -> expresion POR expresion .)
    MENOS           reduce using rule 88 (expresion -> expresion POR expresion .)
    POR             reduce using rule 88 (expresion -> expresion POR expresion .)
    DIVIDIDO        reduce using rule 88 (expresion -> expresion POR expresion .)
    MOD             reduce using rule 88 (expresion -> expresion POR expresion .)
    AS              reduce using rule 88 (expresion -> expresion POR expresion .)
    DPT2            reduce using rule 88 (expresion -> expresion POR expresion .)
    PT              reduce using rule 88 (expresion -> expresion POR expresion .)
    IGUAL           reduce using rule 88 (expresion -> expresion POR expresion .)
    MENOR           reduce using rule 88 (expresion -> expresion POR expresion .)
    MAYOR           reduce using rule 88 (expresion -> expresion POR expresion .)
    MEIGUAL         reduce using rule 88 (expresion -> expresion POR expresion .)
    MAIGUAL         reduce using rule 88 (expresion -> expresion POR expresion .)
    DIS             reduce using rule 88 (expresion -> expresion POR expresion .)
    LLAVEIZQ        reduce using rule 88 (expresion -> expresion POR expresion .)
    AND             reduce using rule 88 (expresion -> expresion POR expresion .)
    OR              reduce using rule 88 (expresion -> expresion POR expresion .)
    PTCOMA          reduce using rule 88 (expresion -> expresion POR expresion .)
    PARDER          reduce using rule 88 (expresion -> expresion POR expresion .)
    COMA            reduce using rule 88 (expresion -> expresion POR expresion .)
    CORDER          reduce using rule 88 (expresion -> expresion POR expresion .)
    PT2             reduce using rule 88 (expresion -> expresion POR expresion .)
    IMAYOR          reduce using rule 88 (expresion -> expresion POR expresion .)
    AB              reduce using rule 88 (expresion -> expresion POR expresion .)
    LLAVEDER        reduce using rule 88 (expresion -> expresion POR expresion .)

  ! MAS             [ shift and go to state 140 ]
  ! MENOS           [ shift and go to state 141 ]
  ! POR             [ shift and go to state 142 ]
  ! DIVIDIDO        [ shift and go to state 143 ]
  ! MOD             [ shift and go to state 144 ]
  ! AS              [ shift and go to state 145 ]
  ! DPT2            [ shift and go to state 146 ]
  ! PT              [ shift and go to state 147 ]


state 190

    (89) expresion -> expresion DIVIDIDO expresion .
    (86) expresion -> expresion . MAS expresion
    (87) expresion -> expresion . MENOS expresion
    (88) expresion -> expresion . POR expresion
    (89) expresion -> expresion . DIVIDIDO expresion
    (90) expresion -> expresion . MOD expresion
    (91) expresion -> expresion . AS tipos
    (108) expresion -> expresion . DPT2 expresion
    (114) expresion -> expresion . PT TOSTRING PARIZQ PARDER
    (115) expresion -> expresion . PT SQRT PARIZQ PARDER
    (116) expresion -> expresion . PT ABS PARIZQ PARDER
    (117) expresion -> expresion . PT CLONE PARIZQ PARDER
    (118) expresion -> expresion . PT LEN PARIZQ PARDER
    (119) expresion -> expresion . PT TOOWNED PARIZQ PARDER
    (120) expresion -> expresion . PT CONTA PARIZQ expresion PARDER

    MAS             reduce using rule 89 (expresion -> expresion DIVIDIDO expresion .)
    MENOS           reduce using rule 89 (expresion -> expresion DIVIDIDO expresion .)
    POR             reduce using rule 89 (expresion -> expresion DIVIDIDO expresion .)
    DIVIDIDO        reduce using rule 89 (expresion -> expresion DIVIDIDO expresion .)
    MOD             reduce using rule 89 (expresion -> expresion DIVIDIDO expresion .)
    AS              reduce using rule 89 (expresion -> expresion DIVIDIDO expresion .)
    DPT2            reduce using rule 89 (expresion -> expresion DIVIDIDO expresion .)
    PT              reduce using rule 89 (expresion -> expresion DIVIDIDO expresion .)
    IGUAL           reduce using rule 89 (expresion -> expresion DIVIDIDO expresion .)
    MENOR           reduce using rule 89 (expresion -> expresion DIVIDIDO expresion .)
    MAYOR           reduce using rule 89 (expresion -> expresion DIVIDIDO expresion .)
    MEIGUAL         reduce using rule 89 (expresion -> expresion DIVIDIDO expresion .)
    MAIGUAL         reduce using rule 89 (expresion -> expresion DIVIDIDO expresion .)
    DIS             reduce using rule 89 (expresion -> expresion DIVIDIDO expresion .)
    LLAVEIZQ        reduce using rule 89 (expresion -> expresion DIVIDIDO expresion .)
    AND             reduce using rule 89 (expresion -> expresion DIVIDIDO expresion .)
    OR              reduce using rule 89 (expresion -> expresion DIVIDIDO expresion .)
    PTCOMA          reduce using rule 89 (expresion -> expresion DIVIDIDO expresion .)
    PARDER          reduce using rule 89 (expresion -> expresion DIVIDIDO expresion .)
    COMA            reduce using rule 89 (expresion -> expresion DIVIDIDO expresion .)
    CORDER          reduce using rule 89 (expresion -> expresion DIVIDIDO expresion .)
    PT2             reduce using rule 89 (expresion -> expresion DIVIDIDO expresion .)
    IMAYOR          reduce using rule 89 (expresion -> expresion DIVIDIDO expresion .)
    AB              reduce using rule 89 (expresion -> expresion DIVIDIDO expresion .)
    LLAVEDER        reduce using rule 89 (expresion -> expresion DIVIDIDO expresion .)

  ! MAS             [ shift and go to state 140 ]
  ! MENOS           [ shift and go to state 141 ]
  ! POR             [ shift and go to state 142 ]
  ! DIVIDIDO        [ shift and go to state 143 ]
  ! MOD             [ shift and go to state 144 ]
  ! AS              [ shift and go to state 145 ]
  ! DPT2            [ shift and go to state 146 ]
  ! PT              [ shift and go to state 147 ]


state 191

    (90) expresion -> expresion MOD expresion .
    (86) expresion -> expresion . MAS expresion
    (87) expresion -> expresion . MENOS expresion
    (88) expresion -> expresion . POR expresion
    (89) expresion -> expresion . DIVIDIDO expresion
    (90) expresion -> expresion . MOD expresion
    (91) expresion -> expresion . AS tipos
    (108) expresion -> expresion . DPT2 expresion
    (114) expresion -> expresion . PT TOSTRING PARIZQ PARDER
    (115) expresion -> expresion . PT SQRT PARIZQ PARDER
    (116) expresion -> expresion . PT ABS PARIZQ PARDER
    (117) expresion -> expresion . PT CLONE PARIZQ PARDER
    (118) expresion -> expresion . PT LEN PARIZQ PARDER
    (119) expresion -> expresion . PT TOOWNED PARIZQ PARDER
    (120) expresion -> expresion . PT CONTA PARIZQ expresion PARDER

    MAS             reduce using rule 90 (expresion -> expresion MOD expresion .)
    MENOS           reduce using rule 90 (expresion -> expresion MOD expresion .)
    POR             reduce using rule 90 (expresion -> expresion MOD expresion .)
    DIVIDIDO        reduce using rule 90 (expresion -> expresion MOD expresion .)
    MOD             reduce using rule 90 (expresion -> expresion MOD expresion .)
    AS              reduce using rule 90 (expresion -> expresion MOD expresion .)
    DPT2            reduce using rule 90 (expresion -> expresion MOD expresion .)
    PT              reduce using rule 90 (expresion -> expresion MOD expresion .)
    IGUAL           reduce using rule 90 (expresion -> expresion MOD expresion .)
    MENOR           reduce using rule 90 (expresion -> expresion MOD expresion .)
    MAYOR           reduce using rule 90 (expresion -> expresion MOD expresion .)
    MEIGUAL         reduce using rule 90 (expresion -> expresion MOD expresion .)
    MAIGUAL         reduce using rule 90 (expresion -> expresion MOD expresion .)
    DIS             reduce using rule 90 (expresion -> expresion MOD expresion .)
    LLAVEIZQ        reduce using rule 90 (expresion -> expresion MOD expresion .)
    AND             reduce using rule 90 (expresion -> expresion MOD expresion .)
    OR              reduce using rule 90 (expresion -> expresion MOD expresion .)
    PTCOMA          reduce using rule 90 (expresion -> expresion MOD expresion .)
    PARDER          reduce using rule 90 (expresion -> expresion MOD expresion .)
    COMA            reduce using rule 90 (expresion -> expresion MOD expresion .)
    CORDER          reduce using rule 90 (expresion -> expresion MOD expresion .)
    PT2             reduce using rule 90 (expresion -> expresion MOD expresion .)
    IMAYOR          reduce using rule 90 (expresion -> expresion MOD expresion .)
    AB              reduce using rule 90 (expresion -> expresion MOD expresion .)
    LLAVEDER        reduce using rule 90 (expresion -> expresion MOD expresion .)

  ! MAS             [ shift and go to state 140 ]
  ! MENOS           [ shift and go to state 141 ]
  ! POR             [ shift and go to state 142 ]
  ! DIVIDIDO        [ shift and go to state 143 ]
  ! MOD             [ shift and go to state 144 ]
  ! AS              [ shift and go to state 145 ]
  ! DPT2            [ shift and go to state 146 ]
  ! PT              [ shift and go to state 147 ]


state 192

    (91) expresion -> expresion AS tipos .

    MAS             reduce using rule 91 (expresion -> expresion AS tipos .)
    MENOS           reduce using rule 91 (expresion -> expresion AS tipos .)
    POR             reduce using rule 91 (expresion -> expresion AS tipos .)
    DIVIDIDO        reduce using rule 91 (expresion -> expresion AS tipos .)
    MOD             reduce using rule 91 (expresion -> expresion AS tipos .)
    AS              reduce using rule 91 (expresion -> expresion AS tipos .)
    DPT2            reduce using rule 91 (expresion -> expresion AS tipos .)
    PT              reduce using rule 91 (expresion -> expresion AS tipos .)
    IGUAL           reduce using rule 91 (expresion -> expresion AS tipos .)
    MENOR           reduce using rule 91 (expresion -> expresion AS tipos .)
    MAYOR           reduce using rule 91 (expresion -> expresion AS tipos .)
    MEIGUAL         reduce using rule 91 (expresion -> expresion AS tipos .)
    MAIGUAL         reduce using rule 91 (expresion -> expresion AS tipos .)
    DIS             reduce using rule 91 (expresion -> expresion AS tipos .)
    LLAVEIZQ        reduce using rule 91 (expresion -> expresion AS tipos .)
    AND             reduce using rule 91 (expresion -> expresion AS tipos .)
    OR              reduce using rule 91 (expresion -> expresion AS tipos .)
    PTCOMA          reduce using rule 91 (expresion -> expresion AS tipos .)
    PARDER          reduce using rule 91 (expresion -> expresion AS tipos .)
    COMA            reduce using rule 91 (expresion -> expresion AS tipos .)
    CORDER          reduce using rule 91 (expresion -> expresion AS tipos .)
    PT2             reduce using rule 91 (expresion -> expresion AS tipos .)
    IMAYOR          reduce using rule 91 (expresion -> expresion AS tipos .)
    AB              reduce using rule 91 (expresion -> expresion AS tipos .)
    LLAVEDER        reduce using rule 91 (expresion -> expresion AS tipos .)


state 193

    (108) expresion -> expresion DPT2 expresion .
    (86) expresion -> expresion . MAS expresion
    (87) expresion -> expresion . MENOS expresion
    (88) expresion -> expresion . POR expresion
    (89) expresion -> expresion . DIVIDIDO expresion
    (90) expresion -> expresion . MOD expresion
    (91) expresion -> expresion . AS tipos
    (108) expresion -> expresion . DPT2 expresion
    (114) expresion -> expresion . PT TOSTRING PARIZQ PARDER
    (115) expresion -> expresion . PT SQRT PARIZQ PARDER
    (116) expresion -> expresion . PT ABS PARIZQ PARDER
    (117) expresion -> expresion . PT CLONE PARIZQ PARDER
    (118) expresion -> expresion . PT LEN PARIZQ PARDER
    (119) expresion -> expresion . PT TOOWNED PARIZQ PARDER
    (120) expresion -> expresion . PT CONTA PARIZQ expresion PARDER

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for POR resolved as shift
  ! shift/reduce conflict for DIVIDIDO resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AS resolved as shift
  ! shift/reduce conflict for DPT2 resolved as shift
  ! shift/reduce conflict for PT resolved as shift
    IGUAL           reduce using rule 108 (expresion -> expresion DPT2 expresion .)
    MENOR           reduce using rule 108 (expresion -> expresion DPT2 expresion .)
    MAYOR           reduce using rule 108 (expresion -> expresion DPT2 expresion .)
    MEIGUAL         reduce using rule 108 (expresion -> expresion DPT2 expresion .)
    MAIGUAL         reduce using rule 108 (expresion -> expresion DPT2 expresion .)
    DIS             reduce using rule 108 (expresion -> expresion DPT2 expresion .)
    LLAVEIZQ        reduce using rule 108 (expresion -> expresion DPT2 expresion .)
    AND             reduce using rule 108 (expresion -> expresion DPT2 expresion .)
    OR              reduce using rule 108 (expresion -> expresion DPT2 expresion .)
    PTCOMA          reduce using rule 108 (expresion -> expresion DPT2 expresion .)
    PARDER          reduce using rule 108 (expresion -> expresion DPT2 expresion .)
    COMA            reduce using rule 108 (expresion -> expresion DPT2 expresion .)
    CORDER          reduce using rule 108 (expresion -> expresion DPT2 expresion .)
    PT2             reduce using rule 108 (expresion -> expresion DPT2 expresion .)
    IMAYOR          reduce using rule 108 (expresion -> expresion DPT2 expresion .)
    AB              reduce using rule 108 (expresion -> expresion DPT2 expresion .)
    LLAVEDER        reduce using rule 108 (expresion -> expresion DPT2 expresion .)
    MAS             shift and go to state 140
    MENOS           shift and go to state 141
    POR             shift and go to state 142
    DIVIDIDO        shift and go to state 143
    MOD             shift and go to state 144
    AS              shift and go to state 145
    DPT2            shift and go to state 146
    PT              shift and go to state 147

  ! MAS             [ reduce using rule 108 (expresion -> expresion DPT2 expresion .) ]
  ! MENOS           [ reduce using rule 108 (expresion -> expresion DPT2 expresion .) ]
  ! POR             [ reduce using rule 108 (expresion -> expresion DPT2 expresion .) ]
  ! DIVIDIDO        [ reduce using rule 108 (expresion -> expresion DPT2 expresion .) ]
  ! MOD             [ reduce using rule 108 (expresion -> expresion DPT2 expresion .) ]
  ! AS              [ reduce using rule 108 (expresion -> expresion DPT2 expresion .) ]
  ! DPT2            [ reduce using rule 108 (expresion -> expresion DPT2 expresion .) ]
  ! PT              [ reduce using rule 108 (expresion -> expresion DPT2 expresion .) ]


state 194

    (114) expresion -> expresion PT TOSTRING . PARIZQ PARDER

    PARIZQ          shift and go to state 239


state 195

    (115) expresion -> expresion PT SQRT . PARIZQ PARDER

    PARIZQ          shift and go to state 240


state 196

    (116) expresion -> expresion PT ABS . PARIZQ PARDER

    PARIZQ          shift and go to state 241


state 197

    (117) expresion -> expresion PT CLONE . PARIZQ PARDER

    PARIZQ          shift and go to state 242


state 198

    (118) expresion -> expresion PT LEN . PARIZQ PARDER

    PARIZQ          shift and go to state 243


state 199

    (119) expresion -> expresion PT TOOWNED . PARIZQ PARDER

    PARIZQ          shift and go to state 244


state 200

    (120) expresion -> expresion PT CONTA . PARIZQ expresion PARDER

    PARIZQ          shift and go to state 245


state 201

    (110) expresion -> tipos DPT2 POW . PARIZQ logica COMA logica PARDER

    PARIZQ          shift and go to state 246


state 202

    (111) expresion -> tipos DPT2 POWF . PARIZQ logica COMA logica PARDER

    PARIZQ          shift and go to state 247


state 203

    (94) expresion -> PARIZQ logica PARDER .

    MAS             reduce using rule 94 (expresion -> PARIZQ logica PARDER .)
    MENOS           reduce using rule 94 (expresion -> PARIZQ logica PARDER .)
    POR             reduce using rule 94 (expresion -> PARIZQ logica PARDER .)
    DIVIDIDO        reduce using rule 94 (expresion -> PARIZQ logica PARDER .)
    MOD             reduce using rule 94 (expresion -> PARIZQ logica PARDER .)
    AS              reduce using rule 94 (expresion -> PARIZQ logica PARDER .)
    DPT2            reduce using rule 94 (expresion -> PARIZQ logica PARDER .)
    PT              reduce using rule 94 (expresion -> PARIZQ logica PARDER .)
    IGUAL           reduce using rule 94 (expresion -> PARIZQ logica PARDER .)
    MENOR           reduce using rule 94 (expresion -> PARIZQ logica PARDER .)
    MAYOR           reduce using rule 94 (expresion -> PARIZQ logica PARDER .)
    MEIGUAL         reduce using rule 94 (expresion -> PARIZQ logica PARDER .)
    MAIGUAL         reduce using rule 94 (expresion -> PARIZQ logica PARDER .)
    DIS             reduce using rule 94 (expresion -> PARIZQ logica PARDER .)
    LLAVEIZQ        reduce using rule 94 (expresion -> PARIZQ logica PARDER .)
    AND             reduce using rule 94 (expresion -> PARIZQ logica PARDER .)
    OR              reduce using rule 94 (expresion -> PARIZQ logica PARDER .)
    PTCOMA          reduce using rule 94 (expresion -> PARIZQ logica PARDER .)
    PARDER          reduce using rule 94 (expresion -> PARIZQ logica PARDER .)
    COMA            reduce using rule 94 (expresion -> PARIZQ logica PARDER .)
    CORDER          reduce using rule 94 (expresion -> PARIZQ logica PARDER .)
    PT2             reduce using rule 94 (expresion -> PARIZQ logica PARDER .)
    IMAYOR          reduce using rule 94 (expresion -> PARIZQ logica PARDER .)
    AB              reduce using rule 94 (expresion -> PARIZQ logica PARDER .)
    LLAVEDER        reduce using rule 94 (expresion -> PARIZQ logica PARDER .)


state 204

    (100) expresion -> VECM NOT listarreglo .

    MAS             reduce using rule 100 (expresion -> VECM NOT listarreglo .)
    MENOS           reduce using rule 100 (expresion -> VECM NOT listarreglo .)
    POR             reduce using rule 100 (expresion -> VECM NOT listarreglo .)
    DIVIDIDO        reduce using rule 100 (expresion -> VECM NOT listarreglo .)
    MOD             reduce using rule 100 (expresion -> VECM NOT listarreglo .)
    AS              reduce using rule 100 (expresion -> VECM NOT listarreglo .)
    DPT2            reduce using rule 100 (expresion -> VECM NOT listarreglo .)
    PT              reduce using rule 100 (expresion -> VECM NOT listarreglo .)
    IGUAL           reduce using rule 100 (expresion -> VECM NOT listarreglo .)
    MENOR           reduce using rule 100 (expresion -> VECM NOT listarreglo .)
    MAYOR           reduce using rule 100 (expresion -> VECM NOT listarreglo .)
    MEIGUAL         reduce using rule 100 (expresion -> VECM NOT listarreglo .)
    MAIGUAL         reduce using rule 100 (expresion -> VECM NOT listarreglo .)
    DIS             reduce using rule 100 (expresion -> VECM NOT listarreglo .)
    LLAVEIZQ        reduce using rule 100 (expresion -> VECM NOT listarreglo .)
    AND             reduce using rule 100 (expresion -> VECM NOT listarreglo .)
    OR              reduce using rule 100 (expresion -> VECM NOT listarreglo .)
    PTCOMA          reduce using rule 100 (expresion -> VECM NOT listarreglo .)
    PARDER          reduce using rule 100 (expresion -> VECM NOT listarreglo .)
    COMA            reduce using rule 100 (expresion -> VECM NOT listarreglo .)
    CORDER          reduce using rule 100 (expresion -> VECM NOT listarreglo .)
    PT2             reduce using rule 100 (expresion -> VECM NOT listarreglo .)
    IMAYOR          reduce using rule 100 (expresion -> VECM NOT listarreglo .)
    AB              reduce using rule 100 (expresion -> VECM NOT listarreglo .)
    LLAVEDER        reduce using rule 100 (expresion -> VECM NOT listarreglo .)


state 205

    (101) expresion -> ID PARIZQ listexpr . PARDER
    (123) listexpr -> listexpr . COMA logica

    PARDER          shift and go to state 248
    COMA            shift and go to state 173


state 206

    (106) expresion -> CORIZQ listexpr CORDER .

    MAS             reduce using rule 106 (expresion -> CORIZQ listexpr CORDER .)
    MENOS           reduce using rule 106 (expresion -> CORIZQ listexpr CORDER .)
    POR             reduce using rule 106 (expresion -> CORIZQ listexpr CORDER .)
    DIVIDIDO        reduce using rule 106 (expresion -> CORIZQ listexpr CORDER .)
    MOD             reduce using rule 106 (expresion -> CORIZQ listexpr CORDER .)
    AS              reduce using rule 106 (expresion -> CORIZQ listexpr CORDER .)
    DPT2            reduce using rule 106 (expresion -> CORIZQ listexpr CORDER .)
    PT              reduce using rule 106 (expresion -> CORIZQ listexpr CORDER .)
    IGUAL           reduce using rule 106 (expresion -> CORIZQ listexpr CORDER .)
    MENOR           reduce using rule 106 (expresion -> CORIZQ listexpr CORDER .)
    MAYOR           reduce using rule 106 (expresion -> CORIZQ listexpr CORDER .)
    MEIGUAL         reduce using rule 106 (expresion -> CORIZQ listexpr CORDER .)
    MAIGUAL         reduce using rule 106 (expresion -> CORIZQ listexpr CORDER .)
    DIS             reduce using rule 106 (expresion -> CORIZQ listexpr CORDER .)
    LLAVEIZQ        reduce using rule 106 (expresion -> CORIZQ listexpr CORDER .)
    AND             reduce using rule 106 (expresion -> CORIZQ listexpr CORDER .)
    OR              reduce using rule 106 (expresion -> CORIZQ listexpr CORDER .)
    PTCOMA          reduce using rule 106 (expresion -> CORIZQ listexpr CORDER .)
    PARDER          reduce using rule 106 (expresion -> CORIZQ listexpr CORDER .)
    COMA            reduce using rule 106 (expresion -> CORIZQ listexpr CORDER .)
    CORDER          reduce using rule 106 (expresion -> CORIZQ listexpr CORDER .)
    PT2             reduce using rule 106 (expresion -> CORIZQ listexpr CORDER .)
    IMAYOR          reduce using rule 106 (expresion -> CORIZQ listexpr CORDER .)
    AB              reduce using rule 106 (expresion -> CORIZQ listexpr CORDER .)
    LLAVEDER        reduce using rule 106 (expresion -> CORIZQ listexpr CORDER .)


state 207

    (37) instrloop -> LOOP LLAVEIZQ instrucciones . LLAVEDER

    LLAVEDER        shift and go to state 249


state 208

    (45) instrmatch -> MATCH logica LLAVEIZQ . opmatch LLAVEDER
    (46) opmatch -> . opmatch otro
    (47) opmatch -> . otro
    (48) otro -> . logica IMAYOR logica COMA
    (58) logica -> . logica AND logica
    (59) logica -> . logica OR logica
    (60) logica -> . NOT logica
    (61) logica -> . rel
    (62) rel -> . rel IGUAL IGUAL rel
    (63) rel -> . rel MENOR rel
    (64) rel -> . rel MAYOR rel
    (65) rel -> . rel MEIGUAL rel
    (66) rel -> . rel MAIGUAL rel
    (67) rel -> . rel DIS rel
    (68) rel -> . expresion
    (86) expresion -> . expresion MAS expresion
    (87) expresion -> . expresion MENOS expresion
    (88) expresion -> . expresion POR expresion
    (89) expresion -> . expresion DIVIDIDO expresion
    (90) expresion -> . expresion MOD expresion
    (91) expresion -> . expresion AS tipos
    (92) expresion -> . instrif
    (93) expresion -> . MENOS expresion
    (94) expresion -> . PARIZQ logica PARDER
    (95) expresion -> . ENTERO
    (96) expresion -> . DECIMAL
    (97) expresion -> . FORM
    (98) expresion -> . TRUE
    (99) expresion -> . FALSE
    (100) expresion -> . VECM NOT listarreglo
    (101) expresion -> . ID PARIZQ listexpr PARDER
    (102) expresion -> . ID
    (103) expresion -> . ID listaarreglo
    (106) expresion -> . CORIZQ listexpr CORDER
    (107) expresion -> . CHARE
    (108) expresion -> . expresion DPT2 expresion
    (109) expresion -> . AMP expresion
    (110) expresion -> . tipos DPT2 POW PARIZQ logica COMA logica PARDER
    (111) expresion -> . tipos DPT2 POWF PARIZQ logica COMA logica PARDER
    (112) expresion -> . instrloop
    (113) expresion -> . instrmatch
    (114) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (115) expresion -> . expresion PT SQRT PARIZQ PARDER
    (116) expresion -> . expresion PT ABS PARIZQ PARDER
    (117) expresion -> . expresion PT CLONE PARIZQ PARDER
    (118) expresion -> . expresion PT LEN PARIZQ PARDER
    (119) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (120) expresion -> . expresion PT CONTA PARIZQ expresion PARDER
    (49) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE
    (37) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (45) instrmatch -> . MATCH logica LLAVEIZQ opmatch LLAVEDER

    NOT             shift and go to state 87
    MENOS           shift and go to state 90
    PARIZQ          shift and go to state 93
    ENTERO          shift and go to state 94
    DECIMAL         shift and go to state 95
    FORM            shift and go to state 96
    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    VECM            shift and go to state 99
    ID              shift and go to state 100
    CORIZQ          shift and go to state 101
    CHARE           shift and go to state 102
    AMP             shift and go to state 103
    IF              shift and go to state 85
    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    USIZE           shift and go to state 69
    LOOP            shift and go to state 106
    MATCH           shift and go to state 107

    logica                         shift and go to state 250
    opmatch                        shift and go to state 251
    otro                           shift and go to state 252
    rel                            shift and go to state 88
    expresion                      shift and go to state 89
    tipos                          shift and go to state 91
    instrif                        shift and go to state 92
    instrloop                      shift and go to state 104
    instrmatch                     shift and go to state 105

state 209

    (24) instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .

    LET             reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    ID              reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    PRINT           reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    IF              reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    LOOP            reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    WHILE           reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    FOR             reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    MATCH           reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    BREAK           reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    CONTINUE        reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    RETURN          reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    LLAVEDER        reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    COMA            reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)


state 210

    (25) instruccion -> WHILE logica LLAVEIZQ instrucciones . LLAVEDER

    LLAVEDER        shift and go to state 253


state 211

    (26) instruccion -> FOR ID IN opcionfor . LLAVEIZQ instrucciones LLAVEDER

    LLAVEIZQ        shift and go to state 254


state 212

    (53) opcionfor -> logica . PT2 logica
    (54) opcionfor -> logica .
    (58) logica -> logica . AND logica
    (59) logica -> logica . OR logica

    PT2             shift and go to state 255
    LLAVEIZQ        reduce using rule 54 (opcionfor -> logica .)
    AND             shift and go to state 131
    OR              shift and go to state 132


state 213

    (44) lmatch -> logica .
    (58) logica -> logica . AND logica
    (59) logica -> logica . OR logica

    IMAYOR          reduce using rule 44 (lmatch -> logica .)
    AB              reduce using rule 44 (lmatch -> logica .)
    AND             shift and go to state 131
    OR              shift and go to state 132


state 214

    (27) instruccion -> MATCH logica LLAVEIZQ insmatch . LLAVEDER
    (38) insmatch -> insmatch . otro2
    (40) otro2 -> . lmatch IMAYOR opcion COMA
    (43) lmatch -> . lmatch AB logica
    (44) lmatch -> . logica
    (58) logica -> . logica AND logica
    (59) logica -> . logica OR logica
    (60) logica -> . NOT logica
    (61) logica -> . rel
    (62) rel -> . rel IGUAL IGUAL rel
    (63) rel -> . rel MENOR rel
    (64) rel -> . rel MAYOR rel
    (65) rel -> . rel MEIGUAL rel
    (66) rel -> . rel MAIGUAL rel
    (67) rel -> . rel DIS rel
    (68) rel -> . expresion
    (86) expresion -> . expresion MAS expresion
    (87) expresion -> . expresion MENOS expresion
    (88) expresion -> . expresion POR expresion
    (89) expresion -> . expresion DIVIDIDO expresion
    (90) expresion -> . expresion MOD expresion
    (91) expresion -> . expresion AS tipos
    (92) expresion -> . instrif
    (93) expresion -> . MENOS expresion
    (94) expresion -> . PARIZQ logica PARDER
    (95) expresion -> . ENTERO
    (96) expresion -> . DECIMAL
    (97) expresion -> . FORM
    (98) expresion -> . TRUE
    (99) expresion -> . FALSE
    (100) expresion -> . VECM NOT listarreglo
    (101) expresion -> . ID PARIZQ listexpr PARDER
    (102) expresion -> . ID
    (103) expresion -> . ID listaarreglo
    (106) expresion -> . CORIZQ listexpr CORDER
    (107) expresion -> . CHARE
    (108) expresion -> . expresion DPT2 expresion
    (109) expresion -> . AMP expresion
    (110) expresion -> . tipos DPT2 POW PARIZQ logica COMA logica PARDER
    (111) expresion -> . tipos DPT2 POWF PARIZQ logica COMA logica PARDER
    (112) expresion -> . instrloop
    (113) expresion -> . instrmatch
    (114) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (115) expresion -> . expresion PT SQRT PARIZQ PARDER
    (116) expresion -> . expresion PT ABS PARIZQ PARDER
    (117) expresion -> . expresion PT CLONE PARIZQ PARDER
    (118) expresion -> . expresion PT LEN PARIZQ PARDER
    (119) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (120) expresion -> . expresion PT CONTA PARIZQ expresion PARDER
    (49) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE
    (37) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (45) instrmatch -> . MATCH logica LLAVEIZQ opmatch LLAVEDER

    LLAVEDER        shift and go to state 256
    NOT             shift and go to state 87
    MENOS           shift and go to state 90
    PARIZQ          shift and go to state 93
    ENTERO          shift and go to state 94
    DECIMAL         shift and go to state 95
    FORM            shift and go to state 96
    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    VECM            shift and go to state 99
    ID              shift and go to state 100
    CORIZQ          shift and go to state 101
    CHARE           shift and go to state 102
    AMP             shift and go to state 103
    IF              shift and go to state 85
    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    USIZE           shift and go to state 69
    LOOP            shift and go to state 106
    MATCH           shift and go to state 107

    logica                         shift and go to state 213
    otro2                          shift and go to state 257
    lmatch                         shift and go to state 216
    rel                            shift and go to state 88
    expresion                      shift and go to state 89
    tipos                          shift and go to state 91
    instrif                        shift and go to state 92
    instrloop                      shift and go to state 104
    instrmatch                     shift and go to state 105

state 215

    (39) insmatch -> otro2 .

    LLAVEDER        reduce using rule 39 (insmatch -> otro2 .)
    NOT             reduce using rule 39 (insmatch -> otro2 .)
    MENOS           reduce using rule 39 (insmatch -> otro2 .)
    PARIZQ          reduce using rule 39 (insmatch -> otro2 .)
    ENTERO          reduce using rule 39 (insmatch -> otro2 .)
    DECIMAL         reduce using rule 39 (insmatch -> otro2 .)
    FORM            reduce using rule 39 (insmatch -> otro2 .)
    TRUE            reduce using rule 39 (insmatch -> otro2 .)
    FALSE           reduce using rule 39 (insmatch -> otro2 .)
    VECM            reduce using rule 39 (insmatch -> otro2 .)
    ID              reduce using rule 39 (insmatch -> otro2 .)
    CORIZQ          reduce using rule 39 (insmatch -> otro2 .)
    CHARE           reduce using rule 39 (insmatch -> otro2 .)
    AMP             reduce using rule 39 (insmatch -> otro2 .)
    IF              reduce using rule 39 (insmatch -> otro2 .)
    I64             reduce using rule 39 (insmatch -> otro2 .)
    F64             reduce using rule 39 (insmatch -> otro2 .)
    BOOL            reduce using rule 39 (insmatch -> otro2 .)
    CHAR            reduce using rule 39 (insmatch -> otro2 .)
    STRING          reduce using rule 39 (insmatch -> otro2 .)
    USIZE           reduce using rule 39 (insmatch -> otro2 .)
    LOOP            reduce using rule 39 (insmatch -> otro2 .)
    MATCH           reduce using rule 39 (insmatch -> otro2 .)


state 216

    (40) otro2 -> lmatch . IMAYOR opcion COMA
    (43) lmatch -> lmatch . AB logica

    IMAYOR          shift and go to state 258
    AB              shift and go to state 259


state 217

    (3) funcion -> PUB FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER .

    PUB             reduce using rule 3 (funcion -> PUB FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER .)
    FN              reduce using rule 3 (funcion -> PUB FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER .)
    MODF            reduce using rule 3 (funcion -> PUB FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER .)
    STRUCT          reduce using rule 3 (funcion -> PUB FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER .)
    $end            reduce using rule 3 (funcion -> PUB FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER .)
    LLAVEDER        reduce using rule 3 (funcion -> PUB FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER .)


state 218

    (78) arreglos -> ID .

    IGUAL           reduce using rule 78 (arreglos -> ID .)
    PTCOMA          reduce using rule 78 (arreglos -> ID .)


state 219

    (19) instruccion -> LET mutable ID pyc arrtipos . IGUAL logica PTCOMA

    IGUAL           shift and go to state 260


state 220

    (73) arrtipos -> tipos .
    (77) arreglos -> tipos .

  ! reduce/reduce conflict for IGUAL resolved using rule 73 (arrtipos -> tipos .)
    IGUAL           reduce using rule 73 (arrtipos -> tipos .)

  ! IGUAL           [ reduce using rule 77 (arreglos -> tipos .) ]


state 221

    (74) arrtipos -> arreglos .

    IGUAL           reduce using rule 74 (arrtipos -> arreglos .)


state 222

    (75) arrtipos -> empty .

    IGUAL           reduce using rule 75 (arrtipos -> empty .)


state 223

    (76) arreglos -> CORIZQ . arreglos PTCOMA ENTERO CORDER
    (76) arreglos -> . CORIZQ arreglos PTCOMA ENTERO CORDER
    (77) arreglos -> . tipos
    (78) arreglos -> . ID
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE

    CORIZQ          shift and go to state 223
    ID              shift and go to state 218
    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    AMP             shift and go to state 68
    USIZE           shift and go to state 69

    arreglos                       shift and go to state 261
    tipos                          shift and go to state 262

state 224

    (20) instruccion -> ID listarreglo IGUAL logica PTCOMA .

    LET             reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    ID              reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    PRINT           reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    IF              reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    LOOP            reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    WHILE           reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    FOR             reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    MATCH           reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    BREAK           reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    CONTINUE        reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    RETURN          reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    LLAVEDER        reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    COMA            reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    MENOS           reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    PARIZQ          reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    ENTERO          reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    DECIMAL         reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    FORM            reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    TRUE            reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    FALSE           reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    VECM            reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    CORIZQ          reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    CHARE           reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    AMP             reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    I64             reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    F64             reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    BOOL            reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    CHAR            reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    STRING          reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    USIZE           reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)


state 225

    (21) instruccion -> ID PARIZQ listexpr PARDER PTCOMA .

    LET             reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    ID              reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    PRINT           reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    IF              reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    LOOP            reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    WHILE           reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    FOR             reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    MATCH           reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    BREAK           reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    CONTINUE        reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    RETURN          reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    LLAVEDER        reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    COMA            reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    MENOS           reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    PARIZQ          reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    ENTERO          reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    DECIMAL         reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    FORM            reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    TRUE            reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    FALSE           reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    VECM            reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    CORIZQ          reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    CHARE           reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    AMP             reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    I64             reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    F64             reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    BOOL            reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    CHAR            reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    STRING          reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    USIZE           reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)


state 226

    (123) listexpr -> listexpr COMA logica .
    (58) logica -> logica . AND logica
    (59) logica -> logica . OR logica

    PARDER          reduce using rule 123 (listexpr -> listexpr COMA logica .)
    COMA            reduce using rule 123 (listexpr -> listexpr COMA logica .)
    CORDER          reduce using rule 123 (listexpr -> listexpr COMA logica .)
    AND             shift and go to state 131
    OR              shift and go to state 132


state 227

    (104) listaarreglo -> listaarreglo CORIZQ expresion CORDER .

    CORIZQ          reduce using rule 104 (listaarreglo -> listaarreglo CORIZQ expresion CORDER .)
    IGUAL           reduce using rule 104 (listaarreglo -> listaarreglo CORIZQ expresion CORDER .)
    MAS             reduce using rule 104 (listaarreglo -> listaarreglo CORIZQ expresion CORDER .)
    MENOS           reduce using rule 104 (listaarreglo -> listaarreglo CORIZQ expresion CORDER .)
    POR             reduce using rule 104 (listaarreglo -> listaarreglo CORIZQ expresion CORDER .)
    DIVIDIDO        reduce using rule 104 (listaarreglo -> listaarreglo CORIZQ expresion CORDER .)
    MOD             reduce using rule 104 (listaarreglo -> listaarreglo CORIZQ expresion CORDER .)
    AS              reduce using rule 104 (listaarreglo -> listaarreglo CORIZQ expresion CORDER .)
    DPT2            reduce using rule 104 (listaarreglo -> listaarreglo CORIZQ expresion CORDER .)
    PT              reduce using rule 104 (listaarreglo -> listaarreglo CORIZQ expresion CORDER .)
    MENOR           reduce using rule 104 (listaarreglo -> listaarreglo CORIZQ expresion CORDER .)
    MAYOR           reduce using rule 104 (listaarreglo -> listaarreglo CORIZQ expresion CORDER .)
    MEIGUAL         reduce using rule 104 (listaarreglo -> listaarreglo CORIZQ expresion CORDER .)
    MAIGUAL         reduce using rule 104 (listaarreglo -> listaarreglo CORIZQ expresion CORDER .)
    DIS             reduce using rule 104 (listaarreglo -> listaarreglo CORIZQ expresion CORDER .)
    LLAVEIZQ        reduce using rule 104 (listaarreglo -> listaarreglo CORIZQ expresion CORDER .)
    AND             reduce using rule 104 (listaarreglo -> listaarreglo CORIZQ expresion CORDER .)
    OR              reduce using rule 104 (listaarreglo -> listaarreglo CORIZQ expresion CORDER .)
    PTCOMA          reduce using rule 104 (listaarreglo -> listaarreglo CORIZQ expresion CORDER .)
    PARDER          reduce using rule 104 (listaarreglo -> listaarreglo CORIZQ expresion CORDER .)
    COMA            reduce using rule 104 (listaarreglo -> listaarreglo CORIZQ expresion CORDER .)
    CORDER          reduce using rule 104 (listaarreglo -> listaarreglo CORIZQ expresion CORDER .)
    PT2             reduce using rule 104 (listaarreglo -> listaarreglo CORIZQ expresion CORDER .)
    IMAYOR          reduce using rule 104 (listaarreglo -> listaarreglo CORIZQ expresion CORDER .)
    AB              reduce using rule 104 (listaarreglo -> listaarreglo CORIZQ expresion CORDER .)
    LLAVEDER        reduce using rule 104 (listaarreglo -> listaarreglo CORIZQ expresion CORDER .)


state 228

    (22) instruccion -> PRINT NOT PARIZQ listexpr PARDER . PTCOMA

    PTCOMA          shift and go to state 263


state 229

    (23) instruccion -> IF . logica LLAVEIZQ instrucciones LLAVEDER unelse
    (49) instrif -> IF . logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (58) logica -> . logica AND logica
    (59) logica -> . logica OR logica
    (60) logica -> . NOT logica
    (61) logica -> . rel
    (62) rel -> . rel IGUAL IGUAL rel
    (63) rel -> . rel MENOR rel
    (64) rel -> . rel MAYOR rel
    (65) rel -> . rel MEIGUAL rel
    (66) rel -> . rel MAIGUAL rel
    (67) rel -> . rel DIS rel
    (68) rel -> . expresion
    (86) expresion -> . expresion MAS expresion
    (87) expresion -> . expresion MENOS expresion
    (88) expresion -> . expresion POR expresion
    (89) expresion -> . expresion DIVIDIDO expresion
    (90) expresion -> . expresion MOD expresion
    (91) expresion -> . expresion AS tipos
    (92) expresion -> . instrif
    (93) expresion -> . MENOS expresion
    (94) expresion -> . PARIZQ logica PARDER
    (95) expresion -> . ENTERO
    (96) expresion -> . DECIMAL
    (97) expresion -> . FORM
    (98) expresion -> . TRUE
    (99) expresion -> . FALSE
    (100) expresion -> . VECM NOT listarreglo
    (101) expresion -> . ID PARIZQ listexpr PARDER
    (102) expresion -> . ID
    (103) expresion -> . ID listaarreglo
    (106) expresion -> . CORIZQ listexpr CORDER
    (107) expresion -> . CHARE
    (108) expresion -> . expresion DPT2 expresion
    (109) expresion -> . AMP expresion
    (110) expresion -> . tipos DPT2 POW PARIZQ logica COMA logica PARDER
    (111) expresion -> . tipos DPT2 POWF PARIZQ logica COMA logica PARDER
    (112) expresion -> . instrloop
    (113) expresion -> . instrmatch
    (114) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (115) expresion -> . expresion PT SQRT PARIZQ PARDER
    (116) expresion -> . expresion PT ABS PARIZQ PARDER
    (117) expresion -> . expresion PT CLONE PARIZQ PARDER
    (118) expresion -> . expresion PT LEN PARIZQ PARDER
    (119) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (120) expresion -> . expresion PT CONTA PARIZQ expresion PARDER
    (49) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE
    (37) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (45) instrmatch -> . MATCH logica LLAVEIZQ opmatch LLAVEDER

    NOT             shift and go to state 87
    MENOS           shift and go to state 90
    PARIZQ          shift and go to state 93
    ENTERO          shift and go to state 94
    DECIMAL         shift and go to state 95
    FORM            shift and go to state 96
    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    VECM            shift and go to state 99
    ID              shift and go to state 100
    CORIZQ          shift and go to state 101
    CHARE           shift and go to state 102
    AMP             shift and go to state 103
    IF              shift and go to state 85
    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    USIZE           shift and go to state 69
    LOOP            shift and go to state 106
    MATCH           shift and go to state 107

    logica                         shift and go to state 264
    rel                            shift and go to state 88
    expresion                      shift and go to state 89
    tipos                          shift and go to state 91
    instrif                        shift and go to state 92
    instrloop                      shift and go to state 104
    instrmatch                     shift and go to state 105

state 230

    (49) instrif -> IF logica LLAVEIZQ instruccionesexp . LLAVEDER instrelse
    (34) instruccionesexpfin -> instruccionesexp .

  ! shift/reduce conflict for LLAVEDER resolved as shift
    LLAVEDER        shift and go to state 265

  ! LLAVEDER        [ reduce using rule 34 (instruccionesexpfin -> instruccionesexp .) ]


state 231

    (32) instruccionesexp -> instruccion . instruccionesexpfin
    (34) instruccionesexpfin -> . instruccionesexp
    (35) instruccionesexpfin -> . expresion
    (36) instruccionesexpfin -> .
    (32) instruccionesexp -> . instruccion instruccionesexpfin
    (33) instruccionesexp -> . instruccionesexpfin
    (86) expresion -> . expresion MAS expresion
    (87) expresion -> . expresion MENOS expresion
    (88) expresion -> . expresion POR expresion
    (89) expresion -> . expresion DIVIDIDO expresion
    (90) expresion -> . expresion MOD expresion
    (91) expresion -> . expresion AS tipos
    (92) expresion -> . instrif
    (93) expresion -> . MENOS expresion
    (94) expresion -> . PARIZQ logica PARDER
    (95) expresion -> . ENTERO
    (96) expresion -> . DECIMAL
    (97) expresion -> . FORM
    (98) expresion -> . TRUE
    (99) expresion -> . FALSE
    (100) expresion -> . VECM NOT listarreglo
    (101) expresion -> . ID PARIZQ listexpr PARDER
    (102) expresion -> . ID
    (103) expresion -> . ID listaarreglo
    (106) expresion -> . CORIZQ listexpr CORDER
    (107) expresion -> . CHARE
    (108) expresion -> . expresion DPT2 expresion
    (109) expresion -> . AMP expresion
    (110) expresion -> . tipos DPT2 POW PARIZQ logica COMA logica PARDER
    (111) expresion -> . tipos DPT2 POWF PARIZQ logica COMA logica PARDER
    (112) expresion -> . instrloop
    (113) expresion -> . instrmatch
    (114) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (115) expresion -> . expresion PT SQRT PARIZQ PARDER
    (116) expresion -> . expresion PT ABS PARIZQ PARDER
    (117) expresion -> . expresion PT CLONE PARIZQ PARDER
    (118) expresion -> . expresion PT LEN PARIZQ PARDER
    (119) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (120) expresion -> . expresion PT CONTA PARIZQ expresion PARDER
    (19) instruccion -> . LET mutable ID pyc arrtipos IGUAL logica PTCOMA
    (20) instruccion -> . ID listarreglo IGUAL logica PTCOMA
    (21) instruccion -> . ID PARIZQ listexpr PARDER PTCOMA
    (22) instruccion -> . PRINT NOT PARIZQ listexpr PARDER PTCOMA
    (23) instruccion -> . IF logica LLAVEIZQ instrucciones LLAVEDER unelse
    (24) instruccion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (25) instruccion -> . WHILE logica LLAVEIZQ instrucciones LLAVEDER
    (26) instruccion -> . FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER
    (27) instruccion -> . MATCH logica LLAVEIZQ insmatch LLAVEDER
    (28) instruccion -> . BREAK PTCOMA
    (29) instruccion -> . CONTINUE PTCOMA
    (30) instruccion -> . BREAK logica PTCOMA
    (31) instruccion -> . RETURN logica PTCOMA
    (49) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE
    (37) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (45) instrmatch -> . MATCH logica LLAVEIZQ opmatch LLAVEDER

    LLAVEDER        reduce using rule 36 (instruccionesexpfin -> .)
    MENOS           shift and go to state 90
    PARIZQ          shift and go to state 93
    ENTERO          shift and go to state 94
    DECIMAL         shift and go to state 95
    FORM            shift and go to state 96
    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    VECM            shift and go to state 99
    ID              shift and go to state 268
    CORIZQ          shift and go to state 101
    CHARE           shift and go to state 102
    AMP             shift and go to state 103
    LET             shift and go to state 51
    PRINT           shift and go to state 53
    IF              shift and go to state 229
    LOOP            shift and go to state 234
    WHILE           shift and go to state 56
    FOR             shift and go to state 57
    MATCH           shift and go to state 235
    BREAK           shift and go to state 59
    CONTINUE        shift and go to state 60
    RETURN          shift and go to state 61
    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    USIZE           shift and go to state 69

    instruccion                    shift and go to state 231
    instruccionesexpfin            shift and go to state 266
    instruccionesexp               shift and go to state 267
    expresion                      shift and go to state 236
    tipos                          shift and go to state 91
    instrif                        shift and go to state 92
    instrloop                      shift and go to state 104
    instrmatch                     shift and go to state 105

state 232

    (33) instruccionesexp -> instruccionesexpfin .

    LLAVEDER        reduce using rule 33 (instruccionesexp -> instruccionesexpfin .)


state 233

    (20) instruccion -> ID . listarreglo IGUAL logica PTCOMA
    (21) instruccion -> ID . PARIZQ listexpr PARDER PTCOMA
    (101) expresion -> ID . PARIZQ listexpr PARDER
    (102) expresion -> ID .
    (103) expresion -> ID . listaarreglo
    (121) listarreglo -> . listaarreglo
    (122) listarreglo -> . empty
    (104) listaarreglo -> . listaarreglo CORIZQ expresion CORDER
    (105) listaarreglo -> . CORIZQ expresion CORDER
    (125) empty -> .

    PARIZQ          shift and go to state 269
    MAS             reduce using rule 102 (expresion -> ID .)
    MENOS           reduce using rule 102 (expresion -> ID .)
    POR             reduce using rule 102 (expresion -> ID .)
    DIVIDIDO        reduce using rule 102 (expresion -> ID .)
    MOD             reduce using rule 102 (expresion -> ID .)
    AS              reduce using rule 102 (expresion -> ID .)
    DPT2            reduce using rule 102 (expresion -> ID .)
    PT              reduce using rule 102 (expresion -> ID .)
    LLAVEDER        reduce using rule 102 (expresion -> ID .)
    CORIZQ          shift and go to state 83
    IGUAL           reduce using rule 125 (empty -> .)

    listarreglo                    shift and go to state 79
    listaarreglo                   shift and go to state 270
    empty                          shift and go to state 82

state 234

    (24) instruccion -> LOOP . LLAVEIZQ instrucciones LLAVEDER
    (37) instrloop -> LOOP . LLAVEIZQ instrucciones LLAVEDER

    LLAVEIZQ        shift and go to state 271


state 235

    (27) instruccion -> MATCH . logica LLAVEIZQ insmatch LLAVEDER
    (45) instrmatch -> MATCH . logica LLAVEIZQ opmatch LLAVEDER
    (58) logica -> . logica AND logica
    (59) logica -> . logica OR logica
    (60) logica -> . NOT logica
    (61) logica -> . rel
    (62) rel -> . rel IGUAL IGUAL rel
    (63) rel -> . rel MENOR rel
    (64) rel -> . rel MAYOR rel
    (65) rel -> . rel MEIGUAL rel
    (66) rel -> . rel MAIGUAL rel
    (67) rel -> . rel DIS rel
    (68) rel -> . expresion
    (86) expresion -> . expresion MAS expresion
    (87) expresion -> . expresion MENOS expresion
    (88) expresion -> . expresion POR expresion
    (89) expresion -> . expresion DIVIDIDO expresion
    (90) expresion -> . expresion MOD expresion
    (91) expresion -> . expresion AS tipos
    (92) expresion -> . instrif
    (93) expresion -> . MENOS expresion
    (94) expresion -> . PARIZQ logica PARDER
    (95) expresion -> . ENTERO
    (96) expresion -> . DECIMAL
    (97) expresion -> . FORM
    (98) expresion -> . TRUE
    (99) expresion -> . FALSE
    (100) expresion -> . VECM NOT listarreglo
    (101) expresion -> . ID PARIZQ listexpr PARDER
    (102) expresion -> . ID
    (103) expresion -> . ID listaarreglo
    (106) expresion -> . CORIZQ listexpr CORDER
    (107) expresion -> . CHARE
    (108) expresion -> . expresion DPT2 expresion
    (109) expresion -> . AMP expresion
    (110) expresion -> . tipos DPT2 POW PARIZQ logica COMA logica PARDER
    (111) expresion -> . tipos DPT2 POWF PARIZQ logica COMA logica PARDER
    (112) expresion -> . instrloop
    (113) expresion -> . instrmatch
    (114) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (115) expresion -> . expresion PT SQRT PARIZQ PARDER
    (116) expresion -> . expresion PT ABS PARIZQ PARDER
    (117) expresion -> . expresion PT CLONE PARIZQ PARDER
    (118) expresion -> . expresion PT LEN PARIZQ PARDER
    (119) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (120) expresion -> . expresion PT CONTA PARIZQ expresion PARDER
    (49) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE
    (37) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (45) instrmatch -> . MATCH logica LLAVEIZQ opmatch LLAVEDER

    NOT             shift and go to state 87
    MENOS           shift and go to state 90
    PARIZQ          shift and go to state 93
    ENTERO          shift and go to state 94
    DECIMAL         shift and go to state 95
    FORM            shift and go to state 96
    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    VECM            shift and go to state 99
    ID              shift and go to state 100
    CORIZQ          shift and go to state 101
    CHARE           shift and go to state 102
    AMP             shift and go to state 103
    IF              shift and go to state 85
    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    USIZE           shift and go to state 69
    LOOP            shift and go to state 106
    MATCH           shift and go to state 107

    logica                         shift and go to state 272
    rel                            shift and go to state 88
    expresion                      shift and go to state 89
    tipos                          shift and go to state 91
    instrif                        shift and go to state 92
    instrloop                      shift and go to state 104
    instrmatch                     shift and go to state 105

state 236

    (35) instruccionesexpfin -> expresion .
    (86) expresion -> expresion . MAS expresion
    (87) expresion -> expresion . MENOS expresion
    (88) expresion -> expresion . POR expresion
    (89) expresion -> expresion . DIVIDIDO expresion
    (90) expresion -> expresion . MOD expresion
    (91) expresion -> expresion . AS tipos
    (108) expresion -> expresion . DPT2 expresion
    (114) expresion -> expresion . PT TOSTRING PARIZQ PARDER
    (115) expresion -> expresion . PT SQRT PARIZQ PARDER
    (116) expresion -> expresion . PT ABS PARIZQ PARDER
    (117) expresion -> expresion . PT CLONE PARIZQ PARDER
    (118) expresion -> expresion . PT LEN PARIZQ PARDER
    (119) expresion -> expresion . PT TOOWNED PARIZQ PARDER
    (120) expresion -> expresion . PT CONTA PARIZQ expresion PARDER

    LLAVEDER        reduce using rule 35 (instruccionesexpfin -> expresion .)
    MAS             shift and go to state 140
    MENOS           shift and go to state 141
    POR             shift and go to state 142
    DIVIDIDO        shift and go to state 143
    MOD             shift and go to state 144
    AS              shift and go to state 145
    DPT2            shift and go to state 146
    PT              shift and go to state 147


state 237

    (23) instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER . unelse
    (55) unelse -> . ELSE LLAVEIZQ instrucciones LLAVEDER
    (56) unelse -> . ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse
    (57) unelse -> . empty
    (125) empty -> .

    ELSE            shift and go to state 274
    LET             reduce using rule 125 (empty -> .)
    ID              reduce using rule 125 (empty -> .)
    PRINT           reduce using rule 125 (empty -> .)
    IF              reduce using rule 125 (empty -> .)
    LOOP            reduce using rule 125 (empty -> .)
    WHILE           reduce using rule 125 (empty -> .)
    FOR             reduce using rule 125 (empty -> .)
    MATCH           reduce using rule 125 (empty -> .)
    BREAK           reduce using rule 125 (empty -> .)
    CONTINUE        reduce using rule 125 (empty -> .)
    RETURN          reduce using rule 125 (empty -> .)
    LLAVEDER        reduce using rule 125 (empty -> .)
    COMA            reduce using rule 125 (empty -> .)
    MENOS           reduce using rule 125 (empty -> .)
    PARIZQ          reduce using rule 125 (empty -> .)
    ENTERO          reduce using rule 125 (empty -> .)
    DECIMAL         reduce using rule 125 (empty -> .)
    FORM            reduce using rule 125 (empty -> .)
    TRUE            reduce using rule 125 (empty -> .)
    FALSE           reduce using rule 125 (empty -> .)
    VECM            reduce using rule 125 (empty -> .)
    CORIZQ          reduce using rule 125 (empty -> .)
    CHARE           reduce using rule 125 (empty -> .)
    AMP             reduce using rule 125 (empty -> .)
    I64             reduce using rule 125 (empty -> .)
    F64             reduce using rule 125 (empty -> .)
    BOOL            reduce using rule 125 (empty -> .)
    CHAR            reduce using rule 125 (empty -> .)
    STRING          reduce using rule 125 (empty -> .)
    USIZE           reduce using rule 125 (empty -> .)

    unelse                         shift and go to state 273
    empty                          shift and go to state 275

state 238

    (62) rel -> rel IGUAL IGUAL rel .
    (62) rel -> rel . IGUAL IGUAL rel
    (63) rel -> rel . MENOR rel
    (64) rel -> rel . MAYOR rel
    (65) rel -> rel . MEIGUAL rel
    (66) rel -> rel . MAIGUAL rel
    (67) rel -> rel . DIS rel

  ! shift/reduce conflict for IGUAL resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for MEIGUAL resolved as shift
  ! shift/reduce conflict for MAIGUAL resolved as shift
  ! shift/reduce conflict for DIS resolved as shift
    LLAVEIZQ        reduce using rule 62 (rel -> rel IGUAL IGUAL rel .)
    AND             reduce using rule 62 (rel -> rel IGUAL IGUAL rel .)
    OR              reduce using rule 62 (rel -> rel IGUAL IGUAL rel .)
    PTCOMA          reduce using rule 62 (rel -> rel IGUAL IGUAL rel .)
    PARDER          reduce using rule 62 (rel -> rel IGUAL IGUAL rel .)
    COMA            reduce using rule 62 (rel -> rel IGUAL IGUAL rel .)
    CORDER          reduce using rule 62 (rel -> rel IGUAL IGUAL rel .)
    PT2             reduce using rule 62 (rel -> rel IGUAL IGUAL rel .)
    IMAYOR          reduce using rule 62 (rel -> rel IGUAL IGUAL rel .)
    AB              reduce using rule 62 (rel -> rel IGUAL IGUAL rel .)
    IGUAL           shift and go to state 134
    MENOR           shift and go to state 135
    MAYOR           shift and go to state 136
    MEIGUAL         shift and go to state 137
    MAIGUAL         shift and go to state 138
    DIS             shift and go to state 139

  ! IGUAL           [ reduce using rule 62 (rel -> rel IGUAL IGUAL rel .) ]
  ! MENOR           [ reduce using rule 62 (rel -> rel IGUAL IGUAL rel .) ]
  ! MAYOR           [ reduce using rule 62 (rel -> rel IGUAL IGUAL rel .) ]
  ! MEIGUAL         [ reduce using rule 62 (rel -> rel IGUAL IGUAL rel .) ]
  ! MAIGUAL         [ reduce using rule 62 (rel -> rel IGUAL IGUAL rel .) ]
  ! DIS             [ reduce using rule 62 (rel -> rel IGUAL IGUAL rel .) ]


state 239

    (114) expresion -> expresion PT TOSTRING PARIZQ . PARDER

    PARDER          shift and go to state 276


state 240

    (115) expresion -> expresion PT SQRT PARIZQ . PARDER

    PARDER          shift and go to state 277


state 241

    (116) expresion -> expresion PT ABS PARIZQ . PARDER

    PARDER          shift and go to state 278


state 242

    (117) expresion -> expresion PT CLONE PARIZQ . PARDER

    PARDER          shift and go to state 279


state 243

    (118) expresion -> expresion PT LEN PARIZQ . PARDER

    PARDER          shift and go to state 280


state 244

    (119) expresion -> expresion PT TOOWNED PARIZQ . PARDER

    PARDER          shift and go to state 281


state 245

    (120) expresion -> expresion PT CONTA PARIZQ . expresion PARDER
    (86) expresion -> . expresion MAS expresion
    (87) expresion -> . expresion MENOS expresion
    (88) expresion -> . expresion POR expresion
    (89) expresion -> . expresion DIVIDIDO expresion
    (90) expresion -> . expresion MOD expresion
    (91) expresion -> . expresion AS tipos
    (92) expresion -> . instrif
    (93) expresion -> . MENOS expresion
    (94) expresion -> . PARIZQ logica PARDER
    (95) expresion -> . ENTERO
    (96) expresion -> . DECIMAL
    (97) expresion -> . FORM
    (98) expresion -> . TRUE
    (99) expresion -> . FALSE
    (100) expresion -> . VECM NOT listarreglo
    (101) expresion -> . ID PARIZQ listexpr PARDER
    (102) expresion -> . ID
    (103) expresion -> . ID listaarreglo
    (106) expresion -> . CORIZQ listexpr CORDER
    (107) expresion -> . CHARE
    (108) expresion -> . expresion DPT2 expresion
    (109) expresion -> . AMP expresion
    (110) expresion -> . tipos DPT2 POW PARIZQ logica COMA logica PARDER
    (111) expresion -> . tipos DPT2 POWF PARIZQ logica COMA logica PARDER
    (112) expresion -> . instrloop
    (113) expresion -> . instrmatch
    (114) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (115) expresion -> . expresion PT SQRT PARIZQ PARDER
    (116) expresion -> . expresion PT ABS PARIZQ PARDER
    (117) expresion -> . expresion PT CLONE PARIZQ PARDER
    (118) expresion -> . expresion PT LEN PARIZQ PARDER
    (119) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (120) expresion -> . expresion PT CONTA PARIZQ expresion PARDER
    (49) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE
    (37) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (45) instrmatch -> . MATCH logica LLAVEIZQ opmatch LLAVEDER

    MENOS           shift and go to state 90
    PARIZQ          shift and go to state 93
    ENTERO          shift and go to state 94
    DECIMAL         shift and go to state 95
    FORM            shift and go to state 96
    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    VECM            shift and go to state 99
    ID              shift and go to state 100
    CORIZQ          shift and go to state 101
    CHARE           shift and go to state 102
    AMP             shift and go to state 103
    IF              shift and go to state 85
    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    USIZE           shift and go to state 69
    LOOP            shift and go to state 106
    MATCH           shift and go to state 107

    expresion                      shift and go to state 282
    tipos                          shift and go to state 91
    instrif                        shift and go to state 92
    instrloop                      shift and go to state 104
    instrmatch                     shift and go to state 105

state 246

    (110) expresion -> tipos DPT2 POW PARIZQ . logica COMA logica PARDER
    (58) logica -> . logica AND logica
    (59) logica -> . logica OR logica
    (60) logica -> . NOT logica
    (61) logica -> . rel
    (62) rel -> . rel IGUAL IGUAL rel
    (63) rel -> . rel MENOR rel
    (64) rel -> . rel MAYOR rel
    (65) rel -> . rel MEIGUAL rel
    (66) rel -> . rel MAIGUAL rel
    (67) rel -> . rel DIS rel
    (68) rel -> . expresion
    (86) expresion -> . expresion MAS expresion
    (87) expresion -> . expresion MENOS expresion
    (88) expresion -> . expresion POR expresion
    (89) expresion -> . expresion DIVIDIDO expresion
    (90) expresion -> . expresion MOD expresion
    (91) expresion -> . expresion AS tipos
    (92) expresion -> . instrif
    (93) expresion -> . MENOS expresion
    (94) expresion -> . PARIZQ logica PARDER
    (95) expresion -> . ENTERO
    (96) expresion -> . DECIMAL
    (97) expresion -> . FORM
    (98) expresion -> . TRUE
    (99) expresion -> . FALSE
    (100) expresion -> . VECM NOT listarreglo
    (101) expresion -> . ID PARIZQ listexpr PARDER
    (102) expresion -> . ID
    (103) expresion -> . ID listaarreglo
    (106) expresion -> . CORIZQ listexpr CORDER
    (107) expresion -> . CHARE
    (108) expresion -> . expresion DPT2 expresion
    (109) expresion -> . AMP expresion
    (110) expresion -> . tipos DPT2 POW PARIZQ logica COMA logica PARDER
    (111) expresion -> . tipos DPT2 POWF PARIZQ logica COMA logica PARDER
    (112) expresion -> . instrloop
    (113) expresion -> . instrmatch
    (114) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (115) expresion -> . expresion PT SQRT PARIZQ PARDER
    (116) expresion -> . expresion PT ABS PARIZQ PARDER
    (117) expresion -> . expresion PT CLONE PARIZQ PARDER
    (118) expresion -> . expresion PT LEN PARIZQ PARDER
    (119) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (120) expresion -> . expresion PT CONTA PARIZQ expresion PARDER
    (49) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE
    (37) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (45) instrmatch -> . MATCH logica LLAVEIZQ opmatch LLAVEDER

    NOT             shift and go to state 87
    MENOS           shift and go to state 90
    PARIZQ          shift and go to state 93
    ENTERO          shift and go to state 94
    DECIMAL         shift and go to state 95
    FORM            shift and go to state 96
    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    VECM            shift and go to state 99
    ID              shift and go to state 100
    CORIZQ          shift and go to state 101
    CHARE           shift and go to state 102
    AMP             shift and go to state 103
    IF              shift and go to state 85
    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    USIZE           shift and go to state 69
    LOOP            shift and go to state 106
    MATCH           shift and go to state 107

    tipos                          shift and go to state 91
    logica                         shift and go to state 283
    rel                            shift and go to state 88
    expresion                      shift and go to state 89
    instrif                        shift and go to state 92
    instrloop                      shift and go to state 104
    instrmatch                     shift and go to state 105

state 247

    (111) expresion -> tipos DPT2 POWF PARIZQ . logica COMA logica PARDER
    (58) logica -> . logica AND logica
    (59) logica -> . logica OR logica
    (60) logica -> . NOT logica
    (61) logica -> . rel
    (62) rel -> . rel IGUAL IGUAL rel
    (63) rel -> . rel MENOR rel
    (64) rel -> . rel MAYOR rel
    (65) rel -> . rel MEIGUAL rel
    (66) rel -> . rel MAIGUAL rel
    (67) rel -> . rel DIS rel
    (68) rel -> . expresion
    (86) expresion -> . expresion MAS expresion
    (87) expresion -> . expresion MENOS expresion
    (88) expresion -> . expresion POR expresion
    (89) expresion -> . expresion DIVIDIDO expresion
    (90) expresion -> . expresion MOD expresion
    (91) expresion -> . expresion AS tipos
    (92) expresion -> . instrif
    (93) expresion -> . MENOS expresion
    (94) expresion -> . PARIZQ logica PARDER
    (95) expresion -> . ENTERO
    (96) expresion -> . DECIMAL
    (97) expresion -> . FORM
    (98) expresion -> . TRUE
    (99) expresion -> . FALSE
    (100) expresion -> . VECM NOT listarreglo
    (101) expresion -> . ID PARIZQ listexpr PARDER
    (102) expresion -> . ID
    (103) expresion -> . ID listaarreglo
    (106) expresion -> . CORIZQ listexpr CORDER
    (107) expresion -> . CHARE
    (108) expresion -> . expresion DPT2 expresion
    (109) expresion -> . AMP expresion
    (110) expresion -> . tipos DPT2 POW PARIZQ logica COMA logica PARDER
    (111) expresion -> . tipos DPT2 POWF PARIZQ logica COMA logica PARDER
    (112) expresion -> . instrloop
    (113) expresion -> . instrmatch
    (114) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (115) expresion -> . expresion PT SQRT PARIZQ PARDER
    (116) expresion -> . expresion PT ABS PARIZQ PARDER
    (117) expresion -> . expresion PT CLONE PARIZQ PARDER
    (118) expresion -> . expresion PT LEN PARIZQ PARDER
    (119) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (120) expresion -> . expresion PT CONTA PARIZQ expresion PARDER
    (49) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE
    (37) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (45) instrmatch -> . MATCH logica LLAVEIZQ opmatch LLAVEDER

    NOT             shift and go to state 87
    MENOS           shift and go to state 90
    PARIZQ          shift and go to state 93
    ENTERO          shift and go to state 94
    DECIMAL         shift and go to state 95
    FORM            shift and go to state 96
    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    VECM            shift and go to state 99
    ID              shift and go to state 100
    CORIZQ          shift and go to state 101
    CHARE           shift and go to state 102
    AMP             shift and go to state 103
    IF              shift and go to state 85
    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    USIZE           shift and go to state 69
    LOOP            shift and go to state 106
    MATCH           shift and go to state 107

    tipos                          shift and go to state 91
    logica                         shift and go to state 284
    rel                            shift and go to state 88
    expresion                      shift and go to state 89
    instrif                        shift and go to state 92
    instrloop                      shift and go to state 104
    instrmatch                     shift and go to state 105

state 248

    (101) expresion -> ID PARIZQ listexpr PARDER .

    MAS             reduce using rule 101 (expresion -> ID PARIZQ listexpr PARDER .)
    MENOS           reduce using rule 101 (expresion -> ID PARIZQ listexpr PARDER .)
    POR             reduce using rule 101 (expresion -> ID PARIZQ listexpr PARDER .)
    DIVIDIDO        reduce using rule 101 (expresion -> ID PARIZQ listexpr PARDER .)
    MOD             reduce using rule 101 (expresion -> ID PARIZQ listexpr PARDER .)
    AS              reduce using rule 101 (expresion -> ID PARIZQ listexpr PARDER .)
    DPT2            reduce using rule 101 (expresion -> ID PARIZQ listexpr PARDER .)
    PT              reduce using rule 101 (expresion -> ID PARIZQ listexpr PARDER .)
    IGUAL           reduce using rule 101 (expresion -> ID PARIZQ listexpr PARDER .)
    MENOR           reduce using rule 101 (expresion -> ID PARIZQ listexpr PARDER .)
    MAYOR           reduce using rule 101 (expresion -> ID PARIZQ listexpr PARDER .)
    MEIGUAL         reduce using rule 101 (expresion -> ID PARIZQ listexpr PARDER .)
    MAIGUAL         reduce using rule 101 (expresion -> ID PARIZQ listexpr PARDER .)
    DIS             reduce using rule 101 (expresion -> ID PARIZQ listexpr PARDER .)
    LLAVEIZQ        reduce using rule 101 (expresion -> ID PARIZQ listexpr PARDER .)
    AND             reduce using rule 101 (expresion -> ID PARIZQ listexpr PARDER .)
    OR              reduce using rule 101 (expresion -> ID PARIZQ listexpr PARDER .)
    PTCOMA          reduce using rule 101 (expresion -> ID PARIZQ listexpr PARDER .)
    PARDER          reduce using rule 101 (expresion -> ID PARIZQ listexpr PARDER .)
    COMA            reduce using rule 101 (expresion -> ID PARIZQ listexpr PARDER .)
    CORDER          reduce using rule 101 (expresion -> ID PARIZQ listexpr PARDER .)
    PT2             reduce using rule 101 (expresion -> ID PARIZQ listexpr PARDER .)
    IMAYOR          reduce using rule 101 (expresion -> ID PARIZQ listexpr PARDER .)
    AB              reduce using rule 101 (expresion -> ID PARIZQ listexpr PARDER .)
    LLAVEDER        reduce using rule 101 (expresion -> ID PARIZQ listexpr PARDER .)


state 249

    (37) instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .

    MAS             reduce using rule 37 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    MENOS           reduce using rule 37 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    POR             reduce using rule 37 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    DIVIDIDO        reduce using rule 37 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    MOD             reduce using rule 37 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    AS              reduce using rule 37 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    DPT2            reduce using rule 37 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    PT              reduce using rule 37 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    IGUAL           reduce using rule 37 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    MENOR           reduce using rule 37 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    MAYOR           reduce using rule 37 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    MEIGUAL         reduce using rule 37 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    MAIGUAL         reduce using rule 37 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    DIS             reduce using rule 37 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    LLAVEIZQ        reduce using rule 37 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    AND             reduce using rule 37 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    OR              reduce using rule 37 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    PTCOMA          reduce using rule 37 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    PARDER          reduce using rule 37 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    COMA            reduce using rule 37 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    CORDER          reduce using rule 37 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    PT2             reduce using rule 37 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    IMAYOR          reduce using rule 37 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    AB              reduce using rule 37 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    LLAVEDER        reduce using rule 37 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .)


state 250

    (48) otro -> logica . IMAYOR logica COMA
    (58) logica -> logica . AND logica
    (59) logica -> logica . OR logica

    IMAYOR          shift and go to state 285
    AND             shift and go to state 131
    OR              shift and go to state 132


state 251

    (45) instrmatch -> MATCH logica LLAVEIZQ opmatch . LLAVEDER
    (46) opmatch -> opmatch . otro
    (48) otro -> . logica IMAYOR logica COMA
    (58) logica -> . logica AND logica
    (59) logica -> . logica OR logica
    (60) logica -> . NOT logica
    (61) logica -> . rel
    (62) rel -> . rel IGUAL IGUAL rel
    (63) rel -> . rel MENOR rel
    (64) rel -> . rel MAYOR rel
    (65) rel -> . rel MEIGUAL rel
    (66) rel -> . rel MAIGUAL rel
    (67) rel -> . rel DIS rel
    (68) rel -> . expresion
    (86) expresion -> . expresion MAS expresion
    (87) expresion -> . expresion MENOS expresion
    (88) expresion -> . expresion POR expresion
    (89) expresion -> . expresion DIVIDIDO expresion
    (90) expresion -> . expresion MOD expresion
    (91) expresion -> . expresion AS tipos
    (92) expresion -> . instrif
    (93) expresion -> . MENOS expresion
    (94) expresion -> . PARIZQ logica PARDER
    (95) expresion -> . ENTERO
    (96) expresion -> . DECIMAL
    (97) expresion -> . FORM
    (98) expresion -> . TRUE
    (99) expresion -> . FALSE
    (100) expresion -> . VECM NOT listarreglo
    (101) expresion -> . ID PARIZQ listexpr PARDER
    (102) expresion -> . ID
    (103) expresion -> . ID listaarreglo
    (106) expresion -> . CORIZQ listexpr CORDER
    (107) expresion -> . CHARE
    (108) expresion -> . expresion DPT2 expresion
    (109) expresion -> . AMP expresion
    (110) expresion -> . tipos DPT2 POW PARIZQ logica COMA logica PARDER
    (111) expresion -> . tipos DPT2 POWF PARIZQ logica COMA logica PARDER
    (112) expresion -> . instrloop
    (113) expresion -> . instrmatch
    (114) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (115) expresion -> . expresion PT SQRT PARIZQ PARDER
    (116) expresion -> . expresion PT ABS PARIZQ PARDER
    (117) expresion -> . expresion PT CLONE PARIZQ PARDER
    (118) expresion -> . expresion PT LEN PARIZQ PARDER
    (119) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (120) expresion -> . expresion PT CONTA PARIZQ expresion PARDER
    (49) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE
    (37) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (45) instrmatch -> . MATCH logica LLAVEIZQ opmatch LLAVEDER

    LLAVEDER        shift and go to state 286
    NOT             shift and go to state 87
    MENOS           shift and go to state 90
    PARIZQ          shift and go to state 93
    ENTERO          shift and go to state 94
    DECIMAL         shift and go to state 95
    FORM            shift and go to state 96
    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    VECM            shift and go to state 99
    ID              shift and go to state 100
    CORIZQ          shift and go to state 101
    CHARE           shift and go to state 102
    AMP             shift and go to state 103
    IF              shift and go to state 85
    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    USIZE           shift and go to state 69
    LOOP            shift and go to state 106
    MATCH           shift and go to state 107

    logica                         shift and go to state 250
    otro                           shift and go to state 287
    rel                            shift and go to state 88
    expresion                      shift and go to state 89
    tipos                          shift and go to state 91
    instrif                        shift and go to state 92
    instrloop                      shift and go to state 104
    instrmatch                     shift and go to state 105

state 252

    (47) opmatch -> otro .

    LLAVEDER        reduce using rule 47 (opmatch -> otro .)
    NOT             reduce using rule 47 (opmatch -> otro .)
    MENOS           reduce using rule 47 (opmatch -> otro .)
    PARIZQ          reduce using rule 47 (opmatch -> otro .)
    ENTERO          reduce using rule 47 (opmatch -> otro .)
    DECIMAL         reduce using rule 47 (opmatch -> otro .)
    FORM            reduce using rule 47 (opmatch -> otro .)
    TRUE            reduce using rule 47 (opmatch -> otro .)
    FALSE           reduce using rule 47 (opmatch -> otro .)
    VECM            reduce using rule 47 (opmatch -> otro .)
    ID              reduce using rule 47 (opmatch -> otro .)
    CORIZQ          reduce using rule 47 (opmatch -> otro .)
    CHARE           reduce using rule 47 (opmatch -> otro .)
    AMP             reduce using rule 47 (opmatch -> otro .)
    IF              reduce using rule 47 (opmatch -> otro .)
    I64             reduce using rule 47 (opmatch -> otro .)
    F64             reduce using rule 47 (opmatch -> otro .)
    BOOL            reduce using rule 47 (opmatch -> otro .)
    CHAR            reduce using rule 47 (opmatch -> otro .)
    STRING          reduce using rule 47 (opmatch -> otro .)
    USIZE           reduce using rule 47 (opmatch -> otro .)
    LOOP            reduce using rule 47 (opmatch -> otro .)
    MATCH           reduce using rule 47 (opmatch -> otro .)


state 253

    (25) instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .

    LET             reduce using rule 25 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    ID              reduce using rule 25 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    PRINT           reduce using rule 25 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    IF              reduce using rule 25 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    LOOP            reduce using rule 25 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    WHILE           reduce using rule 25 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    FOR             reduce using rule 25 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    MATCH           reduce using rule 25 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    BREAK           reduce using rule 25 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    CONTINUE        reduce using rule 25 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    RETURN          reduce using rule 25 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    LLAVEDER        reduce using rule 25 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    COMA            reduce using rule 25 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    MENOS           reduce using rule 25 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    PARIZQ          reduce using rule 25 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    ENTERO          reduce using rule 25 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    DECIMAL         reduce using rule 25 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    FORM            reduce using rule 25 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    TRUE            reduce using rule 25 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    FALSE           reduce using rule 25 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    VECM            reduce using rule 25 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    CORIZQ          reduce using rule 25 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    CHARE           reduce using rule 25 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    AMP             reduce using rule 25 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    I64             reduce using rule 25 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    F64             reduce using rule 25 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    BOOL            reduce using rule 25 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    CHAR            reduce using rule 25 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    STRING          reduce using rule 25 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    USIZE           reduce using rule 25 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)


state 254

    (26) instruccion -> FOR ID IN opcionfor LLAVEIZQ . instrucciones LLAVEDER
    (17) instrucciones -> . instruccion instrucciones
    (18) instrucciones -> . instruccion
    (19) instruccion -> . LET mutable ID pyc arrtipos IGUAL logica PTCOMA
    (20) instruccion -> . ID listarreglo IGUAL logica PTCOMA
    (21) instruccion -> . ID PARIZQ listexpr PARDER PTCOMA
    (22) instruccion -> . PRINT NOT PARIZQ listexpr PARDER PTCOMA
    (23) instruccion -> . IF logica LLAVEIZQ instrucciones LLAVEDER unelse
    (24) instruccion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (25) instruccion -> . WHILE logica LLAVEIZQ instrucciones LLAVEDER
    (26) instruccion -> . FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER
    (27) instruccion -> . MATCH logica LLAVEIZQ insmatch LLAVEDER
    (28) instruccion -> . BREAK PTCOMA
    (29) instruccion -> . CONTINUE PTCOMA
    (30) instruccion -> . BREAK logica PTCOMA
    (31) instruccion -> . RETURN logica PTCOMA

    LET             shift and go to state 51
    ID              shift and go to state 52
    PRINT           shift and go to state 53
    IF              shift and go to state 54
    LOOP            shift and go to state 55
    WHILE           shift and go to state 56
    FOR             shift and go to state 57
    MATCH           shift and go to state 58
    BREAK           shift and go to state 59
    CONTINUE        shift and go to state 60
    RETURN          shift and go to state 61

    instrucciones                  shift and go to state 288
    instruccion                    shift and go to state 50

state 255

    (53) opcionfor -> logica PT2 . logica
    (58) logica -> . logica AND logica
    (59) logica -> . logica OR logica
    (60) logica -> . NOT logica
    (61) logica -> . rel
    (62) rel -> . rel IGUAL IGUAL rel
    (63) rel -> . rel MENOR rel
    (64) rel -> . rel MAYOR rel
    (65) rel -> . rel MEIGUAL rel
    (66) rel -> . rel MAIGUAL rel
    (67) rel -> . rel DIS rel
    (68) rel -> . expresion
    (86) expresion -> . expresion MAS expresion
    (87) expresion -> . expresion MENOS expresion
    (88) expresion -> . expresion POR expresion
    (89) expresion -> . expresion DIVIDIDO expresion
    (90) expresion -> . expresion MOD expresion
    (91) expresion -> . expresion AS tipos
    (92) expresion -> . instrif
    (93) expresion -> . MENOS expresion
    (94) expresion -> . PARIZQ logica PARDER
    (95) expresion -> . ENTERO
    (96) expresion -> . DECIMAL
    (97) expresion -> . FORM
    (98) expresion -> . TRUE
    (99) expresion -> . FALSE
    (100) expresion -> . VECM NOT listarreglo
    (101) expresion -> . ID PARIZQ listexpr PARDER
    (102) expresion -> . ID
    (103) expresion -> . ID listaarreglo
    (106) expresion -> . CORIZQ listexpr CORDER
    (107) expresion -> . CHARE
    (108) expresion -> . expresion DPT2 expresion
    (109) expresion -> . AMP expresion
    (110) expresion -> . tipos DPT2 POW PARIZQ logica COMA logica PARDER
    (111) expresion -> . tipos DPT2 POWF PARIZQ logica COMA logica PARDER
    (112) expresion -> . instrloop
    (113) expresion -> . instrmatch
    (114) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (115) expresion -> . expresion PT SQRT PARIZQ PARDER
    (116) expresion -> . expresion PT ABS PARIZQ PARDER
    (117) expresion -> . expresion PT CLONE PARIZQ PARDER
    (118) expresion -> . expresion PT LEN PARIZQ PARDER
    (119) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (120) expresion -> . expresion PT CONTA PARIZQ expresion PARDER
    (49) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE
    (37) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (45) instrmatch -> . MATCH logica LLAVEIZQ opmatch LLAVEDER

    NOT             shift and go to state 87
    MENOS           shift and go to state 90
    PARIZQ          shift and go to state 93
    ENTERO          shift and go to state 94
    DECIMAL         shift and go to state 95
    FORM            shift and go to state 96
    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    VECM            shift and go to state 99
    ID              shift and go to state 100
    CORIZQ          shift and go to state 101
    CHARE           shift and go to state 102
    AMP             shift and go to state 103
    IF              shift and go to state 85
    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    USIZE           shift and go to state 69
    LOOP            shift and go to state 106
    MATCH           shift and go to state 107

    logica                         shift and go to state 289
    rel                            shift and go to state 88
    expresion                      shift and go to state 89
    tipos                          shift and go to state 91
    instrif                        shift and go to state 92
    instrloop                      shift and go to state 104
    instrmatch                     shift and go to state 105

state 256

    (27) instruccion -> MATCH logica LLAVEIZQ insmatch LLAVEDER .

    LET             reduce using rule 27 (instruccion -> MATCH logica LLAVEIZQ insmatch LLAVEDER .)
    ID              reduce using rule 27 (instruccion -> MATCH logica LLAVEIZQ insmatch LLAVEDER .)
    PRINT           reduce using rule 27 (instruccion -> MATCH logica LLAVEIZQ insmatch LLAVEDER .)
    IF              reduce using rule 27 (instruccion -> MATCH logica LLAVEIZQ insmatch LLAVEDER .)
    LOOP            reduce using rule 27 (instruccion -> MATCH logica LLAVEIZQ insmatch LLAVEDER .)
    WHILE           reduce using rule 27 (instruccion -> MATCH logica LLAVEIZQ insmatch LLAVEDER .)
    FOR             reduce using rule 27 (instruccion -> MATCH logica LLAVEIZQ insmatch LLAVEDER .)
    MATCH           reduce using rule 27 (instruccion -> MATCH logica LLAVEIZQ insmatch LLAVEDER .)
    BREAK           reduce using rule 27 (instruccion -> MATCH logica LLAVEIZQ insmatch LLAVEDER .)
    CONTINUE        reduce using rule 27 (instruccion -> MATCH logica LLAVEIZQ insmatch LLAVEDER .)
    RETURN          reduce using rule 27 (instruccion -> MATCH logica LLAVEIZQ insmatch LLAVEDER .)
    LLAVEDER        reduce using rule 27 (instruccion -> MATCH logica LLAVEIZQ insmatch LLAVEDER .)
    COMA            reduce using rule 27 (instruccion -> MATCH logica LLAVEIZQ insmatch LLAVEDER .)
    MENOS           reduce using rule 27 (instruccion -> MATCH logica LLAVEIZQ insmatch LLAVEDER .)
    PARIZQ          reduce using rule 27 (instruccion -> MATCH logica LLAVEIZQ insmatch LLAVEDER .)
    ENTERO          reduce using rule 27 (instruccion -> MATCH logica LLAVEIZQ insmatch LLAVEDER .)
    DECIMAL         reduce using rule 27 (instruccion -> MATCH logica LLAVEIZQ insmatch LLAVEDER .)
    FORM            reduce using rule 27 (instruccion -> MATCH logica LLAVEIZQ insmatch LLAVEDER .)
    TRUE            reduce using rule 27 (instruccion -> MATCH logica LLAVEIZQ insmatch LLAVEDER .)
    FALSE           reduce using rule 27 (instruccion -> MATCH logica LLAVEIZQ insmatch LLAVEDER .)
    VECM            reduce using rule 27 (instruccion -> MATCH logica LLAVEIZQ insmatch LLAVEDER .)
    CORIZQ          reduce using rule 27 (instruccion -> MATCH logica LLAVEIZQ insmatch LLAVEDER .)
    CHARE           reduce using rule 27 (instruccion -> MATCH logica LLAVEIZQ insmatch LLAVEDER .)
    AMP             reduce using rule 27 (instruccion -> MATCH logica LLAVEIZQ insmatch LLAVEDER .)
    I64             reduce using rule 27 (instruccion -> MATCH logica LLAVEIZQ insmatch LLAVEDER .)
    F64             reduce using rule 27 (instruccion -> MATCH logica LLAVEIZQ insmatch LLAVEDER .)
    BOOL            reduce using rule 27 (instruccion -> MATCH logica LLAVEIZQ insmatch LLAVEDER .)
    CHAR            reduce using rule 27 (instruccion -> MATCH logica LLAVEIZQ insmatch LLAVEDER .)
    STRING          reduce using rule 27 (instruccion -> MATCH logica LLAVEIZQ insmatch LLAVEDER .)
    USIZE           reduce using rule 27 (instruccion -> MATCH logica LLAVEIZQ insmatch LLAVEDER .)


state 257

    (38) insmatch -> insmatch otro2 .

    LLAVEDER        reduce using rule 38 (insmatch -> insmatch otro2 .)
    NOT             reduce using rule 38 (insmatch -> insmatch otro2 .)
    MENOS           reduce using rule 38 (insmatch -> insmatch otro2 .)
    PARIZQ          reduce using rule 38 (insmatch -> insmatch otro2 .)
    ENTERO          reduce using rule 38 (insmatch -> insmatch otro2 .)
    DECIMAL         reduce using rule 38 (insmatch -> insmatch otro2 .)
    FORM            reduce using rule 38 (insmatch -> insmatch otro2 .)
    TRUE            reduce using rule 38 (insmatch -> insmatch otro2 .)
    FALSE           reduce using rule 38 (insmatch -> insmatch otro2 .)
    VECM            reduce using rule 38 (insmatch -> insmatch otro2 .)
    ID              reduce using rule 38 (insmatch -> insmatch otro2 .)
    CORIZQ          reduce using rule 38 (insmatch -> insmatch otro2 .)
    CHARE           reduce using rule 38 (insmatch -> insmatch otro2 .)
    AMP             reduce using rule 38 (insmatch -> insmatch otro2 .)
    IF              reduce using rule 38 (insmatch -> insmatch otro2 .)
    I64             reduce using rule 38 (insmatch -> insmatch otro2 .)
    F64             reduce using rule 38 (insmatch -> insmatch otro2 .)
    BOOL            reduce using rule 38 (insmatch -> insmatch otro2 .)
    CHAR            reduce using rule 38 (insmatch -> insmatch otro2 .)
    STRING          reduce using rule 38 (insmatch -> insmatch otro2 .)
    USIZE           reduce using rule 38 (insmatch -> insmatch otro2 .)
    LOOP            reduce using rule 38 (insmatch -> insmatch otro2 .)
    MATCH           reduce using rule 38 (insmatch -> insmatch otro2 .)


state 258

    (40) otro2 -> lmatch IMAYOR . opcion COMA
    (41) opcion -> . LLAVEIZQ instrucciones LLAVEDER
    (42) opcion -> . instrucciones
    (17) instrucciones -> . instruccion instrucciones
    (18) instrucciones -> . instruccion
    (19) instruccion -> . LET mutable ID pyc arrtipos IGUAL logica PTCOMA
    (20) instruccion -> . ID listarreglo IGUAL logica PTCOMA
    (21) instruccion -> . ID PARIZQ listexpr PARDER PTCOMA
    (22) instruccion -> . PRINT NOT PARIZQ listexpr PARDER PTCOMA
    (23) instruccion -> . IF logica LLAVEIZQ instrucciones LLAVEDER unelse
    (24) instruccion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (25) instruccion -> . WHILE logica LLAVEIZQ instrucciones LLAVEDER
    (26) instruccion -> . FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER
    (27) instruccion -> . MATCH logica LLAVEIZQ insmatch LLAVEDER
    (28) instruccion -> . BREAK PTCOMA
    (29) instruccion -> . CONTINUE PTCOMA
    (30) instruccion -> . BREAK logica PTCOMA
    (31) instruccion -> . RETURN logica PTCOMA

    LLAVEIZQ        shift and go to state 291
    LET             shift and go to state 51
    ID              shift and go to state 52
    PRINT           shift and go to state 53
    IF              shift and go to state 54
    LOOP            shift and go to state 55
    WHILE           shift and go to state 56
    FOR             shift and go to state 57
    MATCH           shift and go to state 58
    BREAK           shift and go to state 59
    CONTINUE        shift and go to state 60
    RETURN          shift and go to state 61

    opcion                         shift and go to state 290
    instrucciones                  shift and go to state 292
    instruccion                    shift and go to state 50

state 259

    (43) lmatch -> lmatch AB . logica
    (58) logica -> . logica AND logica
    (59) logica -> . logica OR logica
    (60) logica -> . NOT logica
    (61) logica -> . rel
    (62) rel -> . rel IGUAL IGUAL rel
    (63) rel -> . rel MENOR rel
    (64) rel -> . rel MAYOR rel
    (65) rel -> . rel MEIGUAL rel
    (66) rel -> . rel MAIGUAL rel
    (67) rel -> . rel DIS rel
    (68) rel -> . expresion
    (86) expresion -> . expresion MAS expresion
    (87) expresion -> . expresion MENOS expresion
    (88) expresion -> . expresion POR expresion
    (89) expresion -> . expresion DIVIDIDO expresion
    (90) expresion -> . expresion MOD expresion
    (91) expresion -> . expresion AS tipos
    (92) expresion -> . instrif
    (93) expresion -> . MENOS expresion
    (94) expresion -> . PARIZQ logica PARDER
    (95) expresion -> . ENTERO
    (96) expresion -> . DECIMAL
    (97) expresion -> . FORM
    (98) expresion -> . TRUE
    (99) expresion -> . FALSE
    (100) expresion -> . VECM NOT listarreglo
    (101) expresion -> . ID PARIZQ listexpr PARDER
    (102) expresion -> . ID
    (103) expresion -> . ID listaarreglo
    (106) expresion -> . CORIZQ listexpr CORDER
    (107) expresion -> . CHARE
    (108) expresion -> . expresion DPT2 expresion
    (109) expresion -> . AMP expresion
    (110) expresion -> . tipos DPT2 POW PARIZQ logica COMA logica PARDER
    (111) expresion -> . tipos DPT2 POWF PARIZQ logica COMA logica PARDER
    (112) expresion -> . instrloop
    (113) expresion -> . instrmatch
    (114) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (115) expresion -> . expresion PT SQRT PARIZQ PARDER
    (116) expresion -> . expresion PT ABS PARIZQ PARDER
    (117) expresion -> . expresion PT CLONE PARIZQ PARDER
    (118) expresion -> . expresion PT LEN PARIZQ PARDER
    (119) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (120) expresion -> . expresion PT CONTA PARIZQ expresion PARDER
    (49) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE
    (37) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (45) instrmatch -> . MATCH logica LLAVEIZQ opmatch LLAVEDER

    NOT             shift and go to state 87
    MENOS           shift and go to state 90
    PARIZQ          shift and go to state 93
    ENTERO          shift and go to state 94
    DECIMAL         shift and go to state 95
    FORM            shift and go to state 96
    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    VECM            shift and go to state 99
    ID              shift and go to state 100
    CORIZQ          shift and go to state 101
    CHARE           shift and go to state 102
    AMP             shift and go to state 103
    IF              shift and go to state 85
    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    USIZE           shift and go to state 69
    LOOP            shift and go to state 106
    MATCH           shift and go to state 107

    logica                         shift and go to state 293
    rel                            shift and go to state 88
    expresion                      shift and go to state 89
    tipos                          shift and go to state 91
    instrif                        shift and go to state 92
    instrloop                      shift and go to state 104
    instrmatch                     shift and go to state 105

state 260

    (19) instruccion -> LET mutable ID pyc arrtipos IGUAL . logica PTCOMA
    (58) logica -> . logica AND logica
    (59) logica -> . logica OR logica
    (60) logica -> . NOT logica
    (61) logica -> . rel
    (62) rel -> . rel IGUAL IGUAL rel
    (63) rel -> . rel MENOR rel
    (64) rel -> . rel MAYOR rel
    (65) rel -> . rel MEIGUAL rel
    (66) rel -> . rel MAIGUAL rel
    (67) rel -> . rel DIS rel
    (68) rel -> . expresion
    (86) expresion -> . expresion MAS expresion
    (87) expresion -> . expresion MENOS expresion
    (88) expresion -> . expresion POR expresion
    (89) expresion -> . expresion DIVIDIDO expresion
    (90) expresion -> . expresion MOD expresion
    (91) expresion -> . expresion AS tipos
    (92) expresion -> . instrif
    (93) expresion -> . MENOS expresion
    (94) expresion -> . PARIZQ logica PARDER
    (95) expresion -> . ENTERO
    (96) expresion -> . DECIMAL
    (97) expresion -> . FORM
    (98) expresion -> . TRUE
    (99) expresion -> . FALSE
    (100) expresion -> . VECM NOT listarreglo
    (101) expresion -> . ID PARIZQ listexpr PARDER
    (102) expresion -> . ID
    (103) expresion -> . ID listaarreglo
    (106) expresion -> . CORIZQ listexpr CORDER
    (107) expresion -> . CHARE
    (108) expresion -> . expresion DPT2 expresion
    (109) expresion -> . AMP expresion
    (110) expresion -> . tipos DPT2 POW PARIZQ logica COMA logica PARDER
    (111) expresion -> . tipos DPT2 POWF PARIZQ logica COMA logica PARDER
    (112) expresion -> . instrloop
    (113) expresion -> . instrmatch
    (114) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (115) expresion -> . expresion PT SQRT PARIZQ PARDER
    (116) expresion -> . expresion PT ABS PARIZQ PARDER
    (117) expresion -> . expresion PT CLONE PARIZQ PARDER
    (118) expresion -> . expresion PT LEN PARIZQ PARDER
    (119) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (120) expresion -> . expresion PT CONTA PARIZQ expresion PARDER
    (49) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE
    (37) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (45) instrmatch -> . MATCH logica LLAVEIZQ opmatch LLAVEDER

    NOT             shift and go to state 87
    MENOS           shift and go to state 90
    PARIZQ          shift and go to state 93
    ENTERO          shift and go to state 94
    DECIMAL         shift and go to state 95
    FORM            shift and go to state 96
    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    VECM            shift and go to state 99
    ID              shift and go to state 100
    CORIZQ          shift and go to state 101
    CHARE           shift and go to state 102
    AMP             shift and go to state 103
    IF              shift and go to state 85
    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    USIZE           shift and go to state 69
    LOOP            shift and go to state 106
    MATCH           shift and go to state 107

    logica                         shift and go to state 294
    rel                            shift and go to state 88
    expresion                      shift and go to state 89
    tipos                          shift and go to state 91
    instrif                        shift and go to state 92
    instrloop                      shift and go to state 104
    instrmatch                     shift and go to state 105

state 261

    (76) arreglos -> CORIZQ arreglos . PTCOMA ENTERO CORDER

    PTCOMA          shift and go to state 295


state 262

    (77) arreglos -> tipos .

    PTCOMA          reduce using rule 77 (arreglos -> tipos .)


state 263

    (22) instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .

    LET             reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    ID              reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    PRINT           reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    IF              reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    LOOP            reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    WHILE           reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    FOR             reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    MATCH           reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    BREAK           reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    CONTINUE        reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    RETURN          reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    LLAVEDER        reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    COMA            reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    MENOS           reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    PARIZQ          reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    ENTERO          reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    DECIMAL         reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    FORM            reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    TRUE            reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    FALSE           reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    VECM            reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    CORIZQ          reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    CHARE           reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    AMP             reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    I64             reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    F64             reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    BOOL            reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    CHAR            reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    STRING          reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    USIZE           reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)


state 264

    (23) instruccion -> IF logica . LLAVEIZQ instrucciones LLAVEDER unelse
    (49) instrif -> IF logica . LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (58) logica -> logica . AND logica
    (59) logica -> logica . OR logica

    LLAVEIZQ        shift and go to state 296
    AND             shift and go to state 131
    OR              shift and go to state 132


state 265

    (49) instrif -> IF logica LLAVEIZQ instruccionesexp LLAVEDER . instrelse
    (50) instrelse -> . ELSE LLAVEIZQ instruccionesexp LLAVEDER
    (51) instrelse -> . ELSE IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (52) instrelse -> . empty
    (125) empty -> .

    ELSE            shift and go to state 298
    MAS             reduce using rule 125 (empty -> .)
    MENOS           reduce using rule 125 (empty -> .)
    POR             reduce using rule 125 (empty -> .)
    DIVIDIDO        reduce using rule 125 (empty -> .)
    MOD             reduce using rule 125 (empty -> .)
    AS              reduce using rule 125 (empty -> .)
    DPT2            reduce using rule 125 (empty -> .)
    PT              reduce using rule 125 (empty -> .)
    IGUAL           reduce using rule 125 (empty -> .)
    MENOR           reduce using rule 125 (empty -> .)
    MAYOR           reduce using rule 125 (empty -> .)
    MEIGUAL         reduce using rule 125 (empty -> .)
    MAIGUAL         reduce using rule 125 (empty -> .)
    DIS             reduce using rule 125 (empty -> .)
    LLAVEIZQ        reduce using rule 125 (empty -> .)
    AND             reduce using rule 125 (empty -> .)
    OR              reduce using rule 125 (empty -> .)
    PTCOMA          reduce using rule 125 (empty -> .)
    PARDER          reduce using rule 125 (empty -> .)
    COMA            reduce using rule 125 (empty -> .)
    CORDER          reduce using rule 125 (empty -> .)
    PT2             reduce using rule 125 (empty -> .)
    IMAYOR          reduce using rule 125 (empty -> .)
    AB              reduce using rule 125 (empty -> .)
    LLAVEDER        reduce using rule 125 (empty -> .)

    instrelse                      shift and go to state 297
    empty                          shift and go to state 299

state 266

    (32) instruccionesexp -> instruccion instruccionesexpfin .
    (33) instruccionesexp -> instruccionesexpfin .

  ! reduce/reduce conflict for LLAVEDER resolved using rule 32 (instruccionesexp -> instruccion instruccionesexpfin .)
    LLAVEDER        reduce using rule 32 (instruccionesexp -> instruccion instruccionesexpfin .)

  ! LLAVEDER        [ reduce using rule 33 (instruccionesexp -> instruccionesexpfin .) ]


state 267

    (34) instruccionesexpfin -> instruccionesexp .

    LLAVEDER        reduce using rule 34 (instruccionesexpfin -> instruccionesexp .)


state 268

    (101) expresion -> ID . PARIZQ listexpr PARDER
    (102) expresion -> ID .
    (103) expresion -> ID . listaarreglo
    (20) instruccion -> ID . listarreglo IGUAL logica PTCOMA
    (21) instruccion -> ID . PARIZQ listexpr PARDER PTCOMA
    (104) listaarreglo -> . listaarreglo CORIZQ expresion CORDER
    (105) listaarreglo -> . CORIZQ expresion CORDER
    (121) listarreglo -> . listaarreglo
    (122) listarreglo -> . empty
    (125) empty -> .

    PARIZQ          shift and go to state 300
    MAS             reduce using rule 102 (expresion -> ID .)
    MENOS           reduce using rule 102 (expresion -> ID .)
    POR             reduce using rule 102 (expresion -> ID .)
    DIVIDIDO        reduce using rule 102 (expresion -> ID .)
    MOD             reduce using rule 102 (expresion -> ID .)
    AS              reduce using rule 102 (expresion -> ID .)
    DPT2            reduce using rule 102 (expresion -> ID .)
    PT              reduce using rule 102 (expresion -> ID .)
    LLAVEDER        reduce using rule 102 (expresion -> ID .)
    CORIZQ          shift and go to state 83
    IGUAL           reduce using rule 125 (empty -> .)

    listaarreglo                   shift and go to state 301
    listarreglo                    shift and go to state 79
    empty                          shift and go to state 82

state 269

    (21) instruccion -> ID PARIZQ . listexpr PARDER PTCOMA
    (101) expresion -> ID PARIZQ . listexpr PARDER
    (123) listexpr -> . listexpr COMA logica
    (124) listexpr -> . logica
    (58) logica -> . logica AND logica
    (59) logica -> . logica OR logica
    (60) logica -> . NOT logica
    (61) logica -> . rel
    (62) rel -> . rel IGUAL IGUAL rel
    (63) rel -> . rel MENOR rel
    (64) rel -> . rel MAYOR rel
    (65) rel -> . rel MEIGUAL rel
    (66) rel -> . rel MAIGUAL rel
    (67) rel -> . rel DIS rel
    (68) rel -> . expresion
    (86) expresion -> . expresion MAS expresion
    (87) expresion -> . expresion MENOS expresion
    (88) expresion -> . expresion POR expresion
    (89) expresion -> . expresion DIVIDIDO expresion
    (90) expresion -> . expresion MOD expresion
    (91) expresion -> . expresion AS tipos
    (92) expresion -> . instrif
    (93) expresion -> . MENOS expresion
    (94) expresion -> . PARIZQ logica PARDER
    (95) expresion -> . ENTERO
    (96) expresion -> . DECIMAL
    (97) expresion -> . FORM
    (98) expresion -> . TRUE
    (99) expresion -> . FALSE
    (100) expresion -> . VECM NOT listarreglo
    (101) expresion -> . ID PARIZQ listexpr PARDER
    (102) expresion -> . ID
    (103) expresion -> . ID listaarreglo
    (106) expresion -> . CORIZQ listexpr CORDER
    (107) expresion -> . CHARE
    (108) expresion -> . expresion DPT2 expresion
    (109) expresion -> . AMP expresion
    (110) expresion -> . tipos DPT2 POW PARIZQ logica COMA logica PARDER
    (111) expresion -> . tipos DPT2 POWF PARIZQ logica COMA logica PARDER
    (112) expresion -> . instrloop
    (113) expresion -> . instrmatch
    (114) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (115) expresion -> . expresion PT SQRT PARIZQ PARDER
    (116) expresion -> . expresion PT ABS PARIZQ PARDER
    (117) expresion -> . expresion PT CLONE PARIZQ PARDER
    (118) expresion -> . expresion PT LEN PARIZQ PARDER
    (119) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (120) expresion -> . expresion PT CONTA PARIZQ expresion PARDER
    (49) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE
    (37) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (45) instrmatch -> . MATCH logica LLAVEIZQ opmatch LLAVEDER

    NOT             shift and go to state 87
    MENOS           shift and go to state 90
    PARIZQ          shift and go to state 93
    ENTERO          shift and go to state 94
    DECIMAL         shift and go to state 95
    FORM            shift and go to state 96
    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    VECM            shift and go to state 99
    ID              shift and go to state 100
    CORIZQ          shift and go to state 101
    CHARE           shift and go to state 102
    AMP             shift and go to state 103
    IF              shift and go to state 85
    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    USIZE           shift and go to state 69
    LOOP            shift and go to state 106
    MATCH           shift and go to state 107

    listexpr                       shift and go to state 302
    logica                         shift and go to state 125
    rel                            shift and go to state 88
    expresion                      shift and go to state 89
    tipos                          shift and go to state 91
    instrif                        shift and go to state 92
    instrloop                      shift and go to state 104
    instrmatch                     shift and go to state 105

state 270

    (103) expresion -> ID listaarreglo .
    (121) listarreglo -> listaarreglo .
    (104) listaarreglo -> listaarreglo . CORIZQ expresion CORDER

    MAS             reduce using rule 103 (expresion -> ID listaarreglo .)
    MENOS           reduce using rule 103 (expresion -> ID listaarreglo .)
    POR             reduce using rule 103 (expresion -> ID listaarreglo .)
    DIVIDIDO        reduce using rule 103 (expresion -> ID listaarreglo .)
    MOD             reduce using rule 103 (expresion -> ID listaarreglo .)
    AS              reduce using rule 103 (expresion -> ID listaarreglo .)
    DPT2            reduce using rule 103 (expresion -> ID listaarreglo .)
    PT              reduce using rule 103 (expresion -> ID listaarreglo .)
    LLAVEDER        reduce using rule 103 (expresion -> ID listaarreglo .)
    IGUAL           reduce using rule 121 (listarreglo -> listaarreglo .)
    CORIZQ          shift and go to state 126


state 271

    (24) instruccion -> LOOP LLAVEIZQ . instrucciones LLAVEDER
    (37) instrloop -> LOOP LLAVEIZQ . instrucciones LLAVEDER
    (17) instrucciones -> . instruccion instrucciones
    (18) instrucciones -> . instruccion
    (19) instruccion -> . LET mutable ID pyc arrtipos IGUAL logica PTCOMA
    (20) instruccion -> . ID listarreglo IGUAL logica PTCOMA
    (21) instruccion -> . ID PARIZQ listexpr PARDER PTCOMA
    (22) instruccion -> . PRINT NOT PARIZQ listexpr PARDER PTCOMA
    (23) instruccion -> . IF logica LLAVEIZQ instrucciones LLAVEDER unelse
    (24) instruccion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (25) instruccion -> . WHILE logica LLAVEIZQ instrucciones LLAVEDER
    (26) instruccion -> . FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER
    (27) instruccion -> . MATCH logica LLAVEIZQ insmatch LLAVEDER
    (28) instruccion -> . BREAK PTCOMA
    (29) instruccion -> . CONTINUE PTCOMA
    (30) instruccion -> . BREAK logica PTCOMA
    (31) instruccion -> . RETURN logica PTCOMA

    LET             shift and go to state 51
    ID              shift and go to state 52
    PRINT           shift and go to state 53
    IF              shift and go to state 54
    LOOP            shift and go to state 55
    WHILE           shift and go to state 56
    FOR             shift and go to state 57
    MATCH           shift and go to state 58
    BREAK           shift and go to state 59
    CONTINUE        shift and go to state 60
    RETURN          shift and go to state 61

    instrucciones                  shift and go to state 303
    instruccion                    shift and go to state 50

state 272

    (27) instruccion -> MATCH logica . LLAVEIZQ insmatch LLAVEDER
    (45) instrmatch -> MATCH logica . LLAVEIZQ opmatch LLAVEDER
    (58) logica -> logica . AND logica
    (59) logica -> logica . OR logica

    LLAVEIZQ        shift and go to state 304
    AND             shift and go to state 131
    OR              shift and go to state 132


state 273

    (23) instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .

    LET             reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    ID              reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    PRINT           reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    IF              reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    LOOP            reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    WHILE           reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    FOR             reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    MATCH           reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    BREAK           reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    CONTINUE        reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    RETURN          reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    LLAVEDER        reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    COMA            reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    MENOS           reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    PARIZQ          reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    ENTERO          reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    DECIMAL         reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    FORM            reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    TRUE            reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    FALSE           reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    VECM            reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    CORIZQ          reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    CHARE           reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    AMP             reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    I64             reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    F64             reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    BOOL            reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    CHAR            reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    STRING          reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    USIZE           reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)


state 274

    (55) unelse -> ELSE . LLAVEIZQ instrucciones LLAVEDER
    (56) unelse -> ELSE . IF logica LLAVEIZQ instrucciones LLAVEDER unelse

    LLAVEIZQ        shift and go to state 305
    IF              shift and go to state 306


state 275

    (57) unelse -> empty .

    LET             reduce using rule 57 (unelse -> empty .)
    ID              reduce using rule 57 (unelse -> empty .)
    PRINT           reduce using rule 57 (unelse -> empty .)
    IF              reduce using rule 57 (unelse -> empty .)
    LOOP            reduce using rule 57 (unelse -> empty .)
    WHILE           reduce using rule 57 (unelse -> empty .)
    FOR             reduce using rule 57 (unelse -> empty .)
    MATCH           reduce using rule 57 (unelse -> empty .)
    BREAK           reduce using rule 57 (unelse -> empty .)
    CONTINUE        reduce using rule 57 (unelse -> empty .)
    RETURN          reduce using rule 57 (unelse -> empty .)
    LLAVEDER        reduce using rule 57 (unelse -> empty .)
    COMA            reduce using rule 57 (unelse -> empty .)
    MENOS           reduce using rule 57 (unelse -> empty .)
    PARIZQ          reduce using rule 57 (unelse -> empty .)
    ENTERO          reduce using rule 57 (unelse -> empty .)
    DECIMAL         reduce using rule 57 (unelse -> empty .)
    FORM            reduce using rule 57 (unelse -> empty .)
    TRUE            reduce using rule 57 (unelse -> empty .)
    FALSE           reduce using rule 57 (unelse -> empty .)
    VECM            reduce using rule 57 (unelse -> empty .)
    CORIZQ          reduce using rule 57 (unelse -> empty .)
    CHARE           reduce using rule 57 (unelse -> empty .)
    AMP             reduce using rule 57 (unelse -> empty .)
    I64             reduce using rule 57 (unelse -> empty .)
    F64             reduce using rule 57 (unelse -> empty .)
    BOOL            reduce using rule 57 (unelse -> empty .)
    CHAR            reduce using rule 57 (unelse -> empty .)
    STRING          reduce using rule 57 (unelse -> empty .)
    USIZE           reduce using rule 57 (unelse -> empty .)


state 276

    (114) expresion -> expresion PT TOSTRING PARIZQ PARDER .

    MAS             reduce using rule 114 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    MENOS           reduce using rule 114 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    POR             reduce using rule 114 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    DIVIDIDO        reduce using rule 114 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    MOD             reduce using rule 114 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    AS              reduce using rule 114 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    DPT2            reduce using rule 114 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    PT              reduce using rule 114 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    IGUAL           reduce using rule 114 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    MENOR           reduce using rule 114 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    MAYOR           reduce using rule 114 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    MEIGUAL         reduce using rule 114 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    MAIGUAL         reduce using rule 114 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    DIS             reduce using rule 114 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    LLAVEIZQ        reduce using rule 114 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    AND             reduce using rule 114 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    OR              reduce using rule 114 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    PTCOMA          reduce using rule 114 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    PARDER          reduce using rule 114 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    COMA            reduce using rule 114 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    CORDER          reduce using rule 114 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    PT2             reduce using rule 114 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    IMAYOR          reduce using rule 114 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    AB              reduce using rule 114 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    LLAVEDER        reduce using rule 114 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)


state 277

    (115) expresion -> expresion PT SQRT PARIZQ PARDER .

    MAS             reduce using rule 115 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    MENOS           reduce using rule 115 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    POR             reduce using rule 115 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    DIVIDIDO        reduce using rule 115 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    MOD             reduce using rule 115 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    AS              reduce using rule 115 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    DPT2            reduce using rule 115 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    PT              reduce using rule 115 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    IGUAL           reduce using rule 115 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    MENOR           reduce using rule 115 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    MAYOR           reduce using rule 115 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    MEIGUAL         reduce using rule 115 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    MAIGUAL         reduce using rule 115 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    DIS             reduce using rule 115 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    LLAVEIZQ        reduce using rule 115 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    AND             reduce using rule 115 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    OR              reduce using rule 115 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    PTCOMA          reduce using rule 115 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    PARDER          reduce using rule 115 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    COMA            reduce using rule 115 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    CORDER          reduce using rule 115 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    PT2             reduce using rule 115 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    IMAYOR          reduce using rule 115 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    AB              reduce using rule 115 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    LLAVEDER        reduce using rule 115 (expresion -> expresion PT SQRT PARIZQ PARDER .)


state 278

    (116) expresion -> expresion PT ABS PARIZQ PARDER .

    MAS             reduce using rule 116 (expresion -> expresion PT ABS PARIZQ PARDER .)
    MENOS           reduce using rule 116 (expresion -> expresion PT ABS PARIZQ PARDER .)
    POR             reduce using rule 116 (expresion -> expresion PT ABS PARIZQ PARDER .)
    DIVIDIDO        reduce using rule 116 (expresion -> expresion PT ABS PARIZQ PARDER .)
    MOD             reduce using rule 116 (expresion -> expresion PT ABS PARIZQ PARDER .)
    AS              reduce using rule 116 (expresion -> expresion PT ABS PARIZQ PARDER .)
    DPT2            reduce using rule 116 (expresion -> expresion PT ABS PARIZQ PARDER .)
    PT              reduce using rule 116 (expresion -> expresion PT ABS PARIZQ PARDER .)
    IGUAL           reduce using rule 116 (expresion -> expresion PT ABS PARIZQ PARDER .)
    MENOR           reduce using rule 116 (expresion -> expresion PT ABS PARIZQ PARDER .)
    MAYOR           reduce using rule 116 (expresion -> expresion PT ABS PARIZQ PARDER .)
    MEIGUAL         reduce using rule 116 (expresion -> expresion PT ABS PARIZQ PARDER .)
    MAIGUAL         reduce using rule 116 (expresion -> expresion PT ABS PARIZQ PARDER .)
    DIS             reduce using rule 116 (expresion -> expresion PT ABS PARIZQ PARDER .)
    LLAVEIZQ        reduce using rule 116 (expresion -> expresion PT ABS PARIZQ PARDER .)
    AND             reduce using rule 116 (expresion -> expresion PT ABS PARIZQ PARDER .)
    OR              reduce using rule 116 (expresion -> expresion PT ABS PARIZQ PARDER .)
    PTCOMA          reduce using rule 116 (expresion -> expresion PT ABS PARIZQ PARDER .)
    PARDER          reduce using rule 116 (expresion -> expresion PT ABS PARIZQ PARDER .)
    COMA            reduce using rule 116 (expresion -> expresion PT ABS PARIZQ PARDER .)
    CORDER          reduce using rule 116 (expresion -> expresion PT ABS PARIZQ PARDER .)
    PT2             reduce using rule 116 (expresion -> expresion PT ABS PARIZQ PARDER .)
    IMAYOR          reduce using rule 116 (expresion -> expresion PT ABS PARIZQ PARDER .)
    AB              reduce using rule 116 (expresion -> expresion PT ABS PARIZQ PARDER .)
    LLAVEDER        reduce using rule 116 (expresion -> expresion PT ABS PARIZQ PARDER .)


state 279

    (117) expresion -> expresion PT CLONE PARIZQ PARDER .

    MAS             reduce using rule 117 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    MENOS           reduce using rule 117 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    POR             reduce using rule 117 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    DIVIDIDO        reduce using rule 117 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    MOD             reduce using rule 117 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    AS              reduce using rule 117 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    DPT2            reduce using rule 117 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    PT              reduce using rule 117 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    IGUAL           reduce using rule 117 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    MENOR           reduce using rule 117 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    MAYOR           reduce using rule 117 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    MEIGUAL         reduce using rule 117 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    MAIGUAL         reduce using rule 117 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    DIS             reduce using rule 117 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    LLAVEIZQ        reduce using rule 117 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    AND             reduce using rule 117 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    OR              reduce using rule 117 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    PTCOMA          reduce using rule 117 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    PARDER          reduce using rule 117 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    COMA            reduce using rule 117 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    CORDER          reduce using rule 117 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    PT2             reduce using rule 117 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    IMAYOR          reduce using rule 117 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    AB              reduce using rule 117 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    LLAVEDER        reduce using rule 117 (expresion -> expresion PT CLONE PARIZQ PARDER .)


state 280

    (118) expresion -> expresion PT LEN PARIZQ PARDER .

    MAS             reduce using rule 118 (expresion -> expresion PT LEN PARIZQ PARDER .)
    MENOS           reduce using rule 118 (expresion -> expresion PT LEN PARIZQ PARDER .)
    POR             reduce using rule 118 (expresion -> expresion PT LEN PARIZQ PARDER .)
    DIVIDIDO        reduce using rule 118 (expresion -> expresion PT LEN PARIZQ PARDER .)
    MOD             reduce using rule 118 (expresion -> expresion PT LEN PARIZQ PARDER .)
    AS              reduce using rule 118 (expresion -> expresion PT LEN PARIZQ PARDER .)
    DPT2            reduce using rule 118 (expresion -> expresion PT LEN PARIZQ PARDER .)
    PT              reduce using rule 118 (expresion -> expresion PT LEN PARIZQ PARDER .)
    IGUAL           reduce using rule 118 (expresion -> expresion PT LEN PARIZQ PARDER .)
    MENOR           reduce using rule 118 (expresion -> expresion PT LEN PARIZQ PARDER .)
    MAYOR           reduce using rule 118 (expresion -> expresion PT LEN PARIZQ PARDER .)
    MEIGUAL         reduce using rule 118 (expresion -> expresion PT LEN PARIZQ PARDER .)
    MAIGUAL         reduce using rule 118 (expresion -> expresion PT LEN PARIZQ PARDER .)
    DIS             reduce using rule 118 (expresion -> expresion PT LEN PARIZQ PARDER .)
    LLAVEIZQ        reduce using rule 118 (expresion -> expresion PT LEN PARIZQ PARDER .)
    AND             reduce using rule 118 (expresion -> expresion PT LEN PARIZQ PARDER .)
    OR              reduce using rule 118 (expresion -> expresion PT LEN PARIZQ PARDER .)
    PTCOMA          reduce using rule 118 (expresion -> expresion PT LEN PARIZQ PARDER .)
    PARDER          reduce using rule 118 (expresion -> expresion PT LEN PARIZQ PARDER .)
    COMA            reduce using rule 118 (expresion -> expresion PT LEN PARIZQ PARDER .)
    CORDER          reduce using rule 118 (expresion -> expresion PT LEN PARIZQ PARDER .)
    PT2             reduce using rule 118 (expresion -> expresion PT LEN PARIZQ PARDER .)
    IMAYOR          reduce using rule 118 (expresion -> expresion PT LEN PARIZQ PARDER .)
    AB              reduce using rule 118 (expresion -> expresion PT LEN PARIZQ PARDER .)
    LLAVEDER        reduce using rule 118 (expresion -> expresion PT LEN PARIZQ PARDER .)


state 281

    (119) expresion -> expresion PT TOOWNED PARIZQ PARDER .

    MAS             reduce using rule 119 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    MENOS           reduce using rule 119 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    POR             reduce using rule 119 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    DIVIDIDO        reduce using rule 119 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    MOD             reduce using rule 119 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    AS              reduce using rule 119 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    DPT2            reduce using rule 119 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    PT              reduce using rule 119 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    IGUAL           reduce using rule 119 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    MENOR           reduce using rule 119 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    MAYOR           reduce using rule 119 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    MEIGUAL         reduce using rule 119 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    MAIGUAL         reduce using rule 119 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    DIS             reduce using rule 119 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    LLAVEIZQ        reduce using rule 119 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    AND             reduce using rule 119 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    OR              reduce using rule 119 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    PTCOMA          reduce using rule 119 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    PARDER          reduce using rule 119 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    COMA            reduce using rule 119 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    CORDER          reduce using rule 119 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    PT2             reduce using rule 119 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    IMAYOR          reduce using rule 119 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    AB              reduce using rule 119 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    LLAVEDER        reduce using rule 119 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)


state 282

    (120) expresion -> expresion PT CONTA PARIZQ expresion . PARDER
    (86) expresion -> expresion . MAS expresion
    (87) expresion -> expresion . MENOS expresion
    (88) expresion -> expresion . POR expresion
    (89) expresion -> expresion . DIVIDIDO expresion
    (90) expresion -> expresion . MOD expresion
    (91) expresion -> expresion . AS tipos
    (108) expresion -> expresion . DPT2 expresion
    (114) expresion -> expresion . PT TOSTRING PARIZQ PARDER
    (115) expresion -> expresion . PT SQRT PARIZQ PARDER
    (116) expresion -> expresion . PT ABS PARIZQ PARDER
    (117) expresion -> expresion . PT CLONE PARIZQ PARDER
    (118) expresion -> expresion . PT LEN PARIZQ PARDER
    (119) expresion -> expresion . PT TOOWNED PARIZQ PARDER
    (120) expresion -> expresion . PT CONTA PARIZQ expresion PARDER

    PARDER          shift and go to state 307
    MAS             shift and go to state 140
    MENOS           shift and go to state 141
    POR             shift and go to state 142
    DIVIDIDO        shift and go to state 143
    MOD             shift and go to state 144
    AS              shift and go to state 145
    DPT2            shift and go to state 146
    PT              shift and go to state 147


state 283

    (110) expresion -> tipos DPT2 POW PARIZQ logica . COMA logica PARDER
    (58) logica -> logica . AND logica
    (59) logica -> logica . OR logica

    COMA            shift and go to state 308
    AND             shift and go to state 131
    OR              shift and go to state 132


state 284

    (111) expresion -> tipos DPT2 POWF PARIZQ logica . COMA logica PARDER
    (58) logica -> logica . AND logica
    (59) logica -> logica . OR logica

    COMA            shift and go to state 309
    AND             shift and go to state 131
    OR              shift and go to state 132


state 285

    (48) otro -> logica IMAYOR . logica COMA
    (58) logica -> . logica AND logica
    (59) logica -> . logica OR logica
    (60) logica -> . NOT logica
    (61) logica -> . rel
    (62) rel -> . rel IGUAL IGUAL rel
    (63) rel -> . rel MENOR rel
    (64) rel -> . rel MAYOR rel
    (65) rel -> . rel MEIGUAL rel
    (66) rel -> . rel MAIGUAL rel
    (67) rel -> . rel DIS rel
    (68) rel -> . expresion
    (86) expresion -> . expresion MAS expresion
    (87) expresion -> . expresion MENOS expresion
    (88) expresion -> . expresion POR expresion
    (89) expresion -> . expresion DIVIDIDO expresion
    (90) expresion -> . expresion MOD expresion
    (91) expresion -> . expresion AS tipos
    (92) expresion -> . instrif
    (93) expresion -> . MENOS expresion
    (94) expresion -> . PARIZQ logica PARDER
    (95) expresion -> . ENTERO
    (96) expresion -> . DECIMAL
    (97) expresion -> . FORM
    (98) expresion -> . TRUE
    (99) expresion -> . FALSE
    (100) expresion -> . VECM NOT listarreglo
    (101) expresion -> . ID PARIZQ listexpr PARDER
    (102) expresion -> . ID
    (103) expresion -> . ID listaarreglo
    (106) expresion -> . CORIZQ listexpr CORDER
    (107) expresion -> . CHARE
    (108) expresion -> . expresion DPT2 expresion
    (109) expresion -> . AMP expresion
    (110) expresion -> . tipos DPT2 POW PARIZQ logica COMA logica PARDER
    (111) expresion -> . tipos DPT2 POWF PARIZQ logica COMA logica PARDER
    (112) expresion -> . instrloop
    (113) expresion -> . instrmatch
    (114) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (115) expresion -> . expresion PT SQRT PARIZQ PARDER
    (116) expresion -> . expresion PT ABS PARIZQ PARDER
    (117) expresion -> . expresion PT CLONE PARIZQ PARDER
    (118) expresion -> . expresion PT LEN PARIZQ PARDER
    (119) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (120) expresion -> . expresion PT CONTA PARIZQ expresion PARDER
    (49) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE
    (37) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (45) instrmatch -> . MATCH logica LLAVEIZQ opmatch LLAVEDER

    NOT             shift and go to state 87
    MENOS           shift and go to state 90
    PARIZQ          shift and go to state 93
    ENTERO          shift and go to state 94
    DECIMAL         shift and go to state 95
    FORM            shift and go to state 96
    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    VECM            shift and go to state 99
    ID              shift and go to state 100
    CORIZQ          shift and go to state 101
    CHARE           shift and go to state 102
    AMP             shift and go to state 103
    IF              shift and go to state 85
    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    USIZE           shift and go to state 69
    LOOP            shift and go to state 106
    MATCH           shift and go to state 107

    logica                         shift and go to state 310
    rel                            shift and go to state 88
    expresion                      shift and go to state 89
    tipos                          shift and go to state 91
    instrif                        shift and go to state 92
    instrloop                      shift and go to state 104
    instrmatch                     shift and go to state 105

state 286

    (45) instrmatch -> MATCH logica LLAVEIZQ opmatch LLAVEDER .

    MAS             reduce using rule 45 (instrmatch -> MATCH logica LLAVEIZQ opmatch LLAVEDER .)
    MENOS           reduce using rule 45 (instrmatch -> MATCH logica LLAVEIZQ opmatch LLAVEDER .)
    POR             reduce using rule 45 (instrmatch -> MATCH logica LLAVEIZQ opmatch LLAVEDER .)
    DIVIDIDO        reduce using rule 45 (instrmatch -> MATCH logica LLAVEIZQ opmatch LLAVEDER .)
    MOD             reduce using rule 45 (instrmatch -> MATCH logica LLAVEIZQ opmatch LLAVEDER .)
    AS              reduce using rule 45 (instrmatch -> MATCH logica LLAVEIZQ opmatch LLAVEDER .)
    DPT2            reduce using rule 45 (instrmatch -> MATCH logica LLAVEIZQ opmatch LLAVEDER .)
    PT              reduce using rule 45 (instrmatch -> MATCH logica LLAVEIZQ opmatch LLAVEDER .)
    IGUAL           reduce using rule 45 (instrmatch -> MATCH logica LLAVEIZQ opmatch LLAVEDER .)
    MENOR           reduce using rule 45 (instrmatch -> MATCH logica LLAVEIZQ opmatch LLAVEDER .)
    MAYOR           reduce using rule 45 (instrmatch -> MATCH logica LLAVEIZQ opmatch LLAVEDER .)
    MEIGUAL         reduce using rule 45 (instrmatch -> MATCH logica LLAVEIZQ opmatch LLAVEDER .)
    MAIGUAL         reduce using rule 45 (instrmatch -> MATCH logica LLAVEIZQ opmatch LLAVEDER .)
    DIS             reduce using rule 45 (instrmatch -> MATCH logica LLAVEIZQ opmatch LLAVEDER .)
    LLAVEIZQ        reduce using rule 45 (instrmatch -> MATCH logica LLAVEIZQ opmatch LLAVEDER .)
    AND             reduce using rule 45 (instrmatch -> MATCH logica LLAVEIZQ opmatch LLAVEDER .)
    OR              reduce using rule 45 (instrmatch -> MATCH logica LLAVEIZQ opmatch LLAVEDER .)
    PTCOMA          reduce using rule 45 (instrmatch -> MATCH logica LLAVEIZQ opmatch LLAVEDER .)
    PARDER          reduce using rule 45 (instrmatch -> MATCH logica LLAVEIZQ opmatch LLAVEDER .)
    COMA            reduce using rule 45 (instrmatch -> MATCH logica LLAVEIZQ opmatch LLAVEDER .)
    CORDER          reduce using rule 45 (instrmatch -> MATCH logica LLAVEIZQ opmatch LLAVEDER .)
    PT2             reduce using rule 45 (instrmatch -> MATCH logica LLAVEIZQ opmatch LLAVEDER .)
    IMAYOR          reduce using rule 45 (instrmatch -> MATCH logica LLAVEIZQ opmatch LLAVEDER .)
    AB              reduce using rule 45 (instrmatch -> MATCH logica LLAVEIZQ opmatch LLAVEDER .)
    LLAVEDER        reduce using rule 45 (instrmatch -> MATCH logica LLAVEIZQ opmatch LLAVEDER .)


state 287

    (46) opmatch -> opmatch otro .

    LLAVEDER        reduce using rule 46 (opmatch -> opmatch otro .)
    NOT             reduce using rule 46 (opmatch -> opmatch otro .)
    MENOS           reduce using rule 46 (opmatch -> opmatch otro .)
    PARIZQ          reduce using rule 46 (opmatch -> opmatch otro .)
    ENTERO          reduce using rule 46 (opmatch -> opmatch otro .)
    DECIMAL         reduce using rule 46 (opmatch -> opmatch otro .)
    FORM            reduce using rule 46 (opmatch -> opmatch otro .)
    TRUE            reduce using rule 46 (opmatch -> opmatch otro .)
    FALSE           reduce using rule 46 (opmatch -> opmatch otro .)
    VECM            reduce using rule 46 (opmatch -> opmatch otro .)
    ID              reduce using rule 46 (opmatch -> opmatch otro .)
    CORIZQ          reduce using rule 46 (opmatch -> opmatch otro .)
    CHARE           reduce using rule 46 (opmatch -> opmatch otro .)
    AMP             reduce using rule 46 (opmatch -> opmatch otro .)
    IF              reduce using rule 46 (opmatch -> opmatch otro .)
    I64             reduce using rule 46 (opmatch -> opmatch otro .)
    F64             reduce using rule 46 (opmatch -> opmatch otro .)
    BOOL            reduce using rule 46 (opmatch -> opmatch otro .)
    CHAR            reduce using rule 46 (opmatch -> opmatch otro .)
    STRING          reduce using rule 46 (opmatch -> opmatch otro .)
    USIZE           reduce using rule 46 (opmatch -> opmatch otro .)
    LOOP            reduce using rule 46 (opmatch -> opmatch otro .)
    MATCH           reduce using rule 46 (opmatch -> opmatch otro .)


state 288

    (26) instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones . LLAVEDER

    LLAVEDER        shift and go to state 311


state 289

    (53) opcionfor -> logica PT2 logica .
    (58) logica -> logica . AND logica
    (59) logica -> logica . OR logica

    LLAVEIZQ        reduce using rule 53 (opcionfor -> logica PT2 logica .)
    AND             shift and go to state 131
    OR              shift and go to state 132


state 290

    (40) otro2 -> lmatch IMAYOR opcion . COMA

    COMA            shift and go to state 312


state 291

    (41) opcion -> LLAVEIZQ . instrucciones LLAVEDER
    (17) instrucciones -> . instruccion instrucciones
    (18) instrucciones -> . instruccion
    (19) instruccion -> . LET mutable ID pyc arrtipos IGUAL logica PTCOMA
    (20) instruccion -> . ID listarreglo IGUAL logica PTCOMA
    (21) instruccion -> . ID PARIZQ listexpr PARDER PTCOMA
    (22) instruccion -> . PRINT NOT PARIZQ listexpr PARDER PTCOMA
    (23) instruccion -> . IF logica LLAVEIZQ instrucciones LLAVEDER unelse
    (24) instruccion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (25) instruccion -> . WHILE logica LLAVEIZQ instrucciones LLAVEDER
    (26) instruccion -> . FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER
    (27) instruccion -> . MATCH logica LLAVEIZQ insmatch LLAVEDER
    (28) instruccion -> . BREAK PTCOMA
    (29) instruccion -> . CONTINUE PTCOMA
    (30) instruccion -> . BREAK logica PTCOMA
    (31) instruccion -> . RETURN logica PTCOMA

    LET             shift and go to state 51
    ID              shift and go to state 52
    PRINT           shift and go to state 53
    IF              shift and go to state 54
    LOOP            shift and go to state 55
    WHILE           shift and go to state 56
    FOR             shift and go to state 57
    MATCH           shift and go to state 58
    BREAK           shift and go to state 59
    CONTINUE        shift and go to state 60
    RETURN          shift and go to state 61

    instrucciones                  shift and go to state 313
    instruccion                    shift and go to state 50

state 292

    (42) opcion -> instrucciones .

    COMA            reduce using rule 42 (opcion -> instrucciones .)


state 293

    (43) lmatch -> lmatch AB logica .
    (58) logica -> logica . AND logica
    (59) logica -> logica . OR logica

    IMAYOR          reduce using rule 43 (lmatch -> lmatch AB logica .)
    AB              reduce using rule 43 (lmatch -> lmatch AB logica .)
    AND             shift and go to state 131
    OR              shift and go to state 132


state 294

    (19) instruccion -> LET mutable ID pyc arrtipos IGUAL logica . PTCOMA
    (58) logica -> logica . AND logica
    (59) logica -> logica . OR logica

    PTCOMA          shift and go to state 314
    AND             shift and go to state 131
    OR              shift and go to state 132


state 295

    (76) arreglos -> CORIZQ arreglos PTCOMA . ENTERO CORDER

    ENTERO          shift and go to state 315


state 296

    (23) instruccion -> IF logica LLAVEIZQ . instrucciones LLAVEDER unelse
    (49) instrif -> IF logica LLAVEIZQ . instruccionesexp LLAVEDER instrelse
    (17) instrucciones -> . instruccion instrucciones
    (18) instrucciones -> . instruccion
    (32) instruccionesexp -> . instruccion instruccionesexpfin
    (33) instruccionesexp -> . instruccionesexpfin
    (19) instruccion -> . LET mutable ID pyc arrtipos IGUAL logica PTCOMA
    (20) instruccion -> . ID listarreglo IGUAL logica PTCOMA
    (21) instruccion -> . ID PARIZQ listexpr PARDER PTCOMA
    (22) instruccion -> . PRINT NOT PARIZQ listexpr PARDER PTCOMA
    (23) instruccion -> . IF logica LLAVEIZQ instrucciones LLAVEDER unelse
    (24) instruccion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (25) instruccion -> . WHILE logica LLAVEIZQ instrucciones LLAVEDER
    (26) instruccion -> . FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER
    (27) instruccion -> . MATCH logica LLAVEIZQ insmatch LLAVEDER
    (28) instruccion -> . BREAK PTCOMA
    (29) instruccion -> . CONTINUE PTCOMA
    (30) instruccion -> . BREAK logica PTCOMA
    (31) instruccion -> . RETURN logica PTCOMA
    (34) instruccionesexpfin -> . instruccionesexp
    (35) instruccionesexpfin -> . expresion
    (36) instruccionesexpfin -> .
    (86) expresion -> . expresion MAS expresion
    (87) expresion -> . expresion MENOS expresion
    (88) expresion -> . expresion POR expresion
    (89) expresion -> . expresion DIVIDIDO expresion
    (90) expresion -> . expresion MOD expresion
    (91) expresion -> . expresion AS tipos
    (92) expresion -> . instrif
    (93) expresion -> . MENOS expresion
    (94) expresion -> . PARIZQ logica PARDER
    (95) expresion -> . ENTERO
    (96) expresion -> . DECIMAL
    (97) expresion -> . FORM
    (98) expresion -> . TRUE
    (99) expresion -> . FALSE
    (100) expresion -> . VECM NOT listarreglo
    (101) expresion -> . ID PARIZQ listexpr PARDER
    (102) expresion -> . ID
    (103) expresion -> . ID listaarreglo
    (106) expresion -> . CORIZQ listexpr CORDER
    (107) expresion -> . CHARE
    (108) expresion -> . expresion DPT2 expresion
    (109) expresion -> . AMP expresion
    (110) expresion -> . tipos DPT2 POW PARIZQ logica COMA logica PARDER
    (111) expresion -> . tipos DPT2 POWF PARIZQ logica COMA logica PARDER
    (112) expresion -> . instrloop
    (113) expresion -> . instrmatch
    (114) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (115) expresion -> . expresion PT SQRT PARIZQ PARDER
    (116) expresion -> . expresion PT ABS PARIZQ PARDER
    (117) expresion -> . expresion PT CLONE PARIZQ PARDER
    (118) expresion -> . expresion PT LEN PARIZQ PARDER
    (119) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (120) expresion -> . expresion PT CONTA PARIZQ expresion PARDER
    (49) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE
    (37) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (45) instrmatch -> . MATCH logica LLAVEIZQ opmatch LLAVEDER

    LET             shift and go to state 51
    ID              shift and go to state 233
    PRINT           shift and go to state 53
    IF              shift and go to state 229
    LOOP            shift and go to state 234
    WHILE           shift and go to state 56
    FOR             shift and go to state 57
    MATCH           shift and go to state 235
    BREAK           shift and go to state 59
    CONTINUE        shift and go to state 60
    RETURN          shift and go to state 61
    LLAVEDER        reduce using rule 36 (instruccionesexpfin -> .)
    MENOS           shift and go to state 90
    PARIZQ          shift and go to state 93
    ENTERO          shift and go to state 94
    DECIMAL         shift and go to state 95
    FORM            shift and go to state 96
    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    VECM            shift and go to state 99
    CORIZQ          shift and go to state 101
    CHARE           shift and go to state 102
    AMP             shift and go to state 103
    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    USIZE           shift and go to state 69

    instrucciones                  shift and go to state 178
    instruccionesexp               shift and go to state 230
    instruccion                    shift and go to state 316
    instruccionesexpfin            shift and go to state 232
    expresion                      shift and go to state 236
    tipos                          shift and go to state 91
    instrif                        shift and go to state 92
    instrloop                      shift and go to state 104
    instrmatch                     shift and go to state 105

state 297

    (49) instrif -> IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .

    MAS             reduce using rule 49 (instrif -> IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    MENOS           reduce using rule 49 (instrif -> IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    POR             reduce using rule 49 (instrif -> IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    DIVIDIDO        reduce using rule 49 (instrif -> IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    MOD             reduce using rule 49 (instrif -> IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    AS              reduce using rule 49 (instrif -> IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    DPT2            reduce using rule 49 (instrif -> IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    PT              reduce using rule 49 (instrif -> IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    IGUAL           reduce using rule 49 (instrif -> IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    MENOR           reduce using rule 49 (instrif -> IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    MAYOR           reduce using rule 49 (instrif -> IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    MEIGUAL         reduce using rule 49 (instrif -> IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    MAIGUAL         reduce using rule 49 (instrif -> IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    DIS             reduce using rule 49 (instrif -> IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    LLAVEIZQ        reduce using rule 49 (instrif -> IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    AND             reduce using rule 49 (instrif -> IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    OR              reduce using rule 49 (instrif -> IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    PTCOMA          reduce using rule 49 (instrif -> IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    PARDER          reduce using rule 49 (instrif -> IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    COMA            reduce using rule 49 (instrif -> IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    CORDER          reduce using rule 49 (instrif -> IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    PT2             reduce using rule 49 (instrif -> IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    IMAYOR          reduce using rule 49 (instrif -> IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    AB              reduce using rule 49 (instrif -> IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    LLAVEDER        reduce using rule 49 (instrif -> IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)


state 298

    (50) instrelse -> ELSE . LLAVEIZQ instruccionesexp LLAVEDER
    (51) instrelse -> ELSE . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse

    LLAVEIZQ        shift and go to state 317
    IF              shift and go to state 318


state 299

    (52) instrelse -> empty .

    MAS             reduce using rule 52 (instrelse -> empty .)
    MENOS           reduce using rule 52 (instrelse -> empty .)
    POR             reduce using rule 52 (instrelse -> empty .)
    DIVIDIDO        reduce using rule 52 (instrelse -> empty .)
    MOD             reduce using rule 52 (instrelse -> empty .)
    AS              reduce using rule 52 (instrelse -> empty .)
    DPT2            reduce using rule 52 (instrelse -> empty .)
    PT              reduce using rule 52 (instrelse -> empty .)
    IGUAL           reduce using rule 52 (instrelse -> empty .)
    MENOR           reduce using rule 52 (instrelse -> empty .)
    MAYOR           reduce using rule 52 (instrelse -> empty .)
    MEIGUAL         reduce using rule 52 (instrelse -> empty .)
    MAIGUAL         reduce using rule 52 (instrelse -> empty .)
    DIS             reduce using rule 52 (instrelse -> empty .)
    LLAVEIZQ        reduce using rule 52 (instrelse -> empty .)
    AND             reduce using rule 52 (instrelse -> empty .)
    OR              reduce using rule 52 (instrelse -> empty .)
    PTCOMA          reduce using rule 52 (instrelse -> empty .)
    PARDER          reduce using rule 52 (instrelse -> empty .)
    COMA            reduce using rule 52 (instrelse -> empty .)
    CORDER          reduce using rule 52 (instrelse -> empty .)
    PT2             reduce using rule 52 (instrelse -> empty .)
    IMAYOR          reduce using rule 52 (instrelse -> empty .)
    AB              reduce using rule 52 (instrelse -> empty .)
    LLAVEDER        reduce using rule 52 (instrelse -> empty .)


state 300

    (101) expresion -> ID PARIZQ . listexpr PARDER
    (21) instruccion -> ID PARIZQ . listexpr PARDER PTCOMA
    (123) listexpr -> . listexpr COMA logica
    (124) listexpr -> . logica
    (58) logica -> . logica AND logica
    (59) logica -> . logica OR logica
    (60) logica -> . NOT logica
    (61) logica -> . rel
    (62) rel -> . rel IGUAL IGUAL rel
    (63) rel -> . rel MENOR rel
    (64) rel -> . rel MAYOR rel
    (65) rel -> . rel MEIGUAL rel
    (66) rel -> . rel MAIGUAL rel
    (67) rel -> . rel DIS rel
    (68) rel -> . expresion
    (86) expresion -> . expresion MAS expresion
    (87) expresion -> . expresion MENOS expresion
    (88) expresion -> . expresion POR expresion
    (89) expresion -> . expresion DIVIDIDO expresion
    (90) expresion -> . expresion MOD expresion
    (91) expresion -> . expresion AS tipos
    (92) expresion -> . instrif
    (93) expresion -> . MENOS expresion
    (94) expresion -> . PARIZQ logica PARDER
    (95) expresion -> . ENTERO
    (96) expresion -> . DECIMAL
    (97) expresion -> . FORM
    (98) expresion -> . TRUE
    (99) expresion -> . FALSE
    (100) expresion -> . VECM NOT listarreglo
    (101) expresion -> . ID PARIZQ listexpr PARDER
    (102) expresion -> . ID
    (103) expresion -> . ID listaarreglo
    (106) expresion -> . CORIZQ listexpr CORDER
    (107) expresion -> . CHARE
    (108) expresion -> . expresion DPT2 expresion
    (109) expresion -> . AMP expresion
    (110) expresion -> . tipos DPT2 POW PARIZQ logica COMA logica PARDER
    (111) expresion -> . tipos DPT2 POWF PARIZQ logica COMA logica PARDER
    (112) expresion -> . instrloop
    (113) expresion -> . instrmatch
    (114) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (115) expresion -> . expresion PT SQRT PARIZQ PARDER
    (116) expresion -> . expresion PT ABS PARIZQ PARDER
    (117) expresion -> . expresion PT CLONE PARIZQ PARDER
    (118) expresion -> . expresion PT LEN PARIZQ PARDER
    (119) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (120) expresion -> . expresion PT CONTA PARIZQ expresion PARDER
    (49) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE
    (37) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (45) instrmatch -> . MATCH logica LLAVEIZQ opmatch LLAVEDER

    NOT             shift and go to state 87
    MENOS           shift and go to state 90
    PARIZQ          shift and go to state 93
    ENTERO          shift and go to state 94
    DECIMAL         shift and go to state 95
    FORM            shift and go to state 96
    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    VECM            shift and go to state 99
    ID              shift and go to state 100
    CORIZQ          shift and go to state 101
    CHARE           shift and go to state 102
    AMP             shift and go to state 103
    IF              shift and go to state 85
    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    USIZE           shift and go to state 69
    LOOP            shift and go to state 106
    MATCH           shift and go to state 107

    listexpr                       shift and go to state 319
    logica                         shift and go to state 125
    rel                            shift and go to state 88
    expresion                      shift and go to state 89
    tipos                          shift and go to state 91
    instrif                        shift and go to state 92
    instrloop                      shift and go to state 104
    instrmatch                     shift and go to state 105

state 301

    (103) expresion -> ID listaarreglo .
    (104) listaarreglo -> listaarreglo . CORIZQ expresion CORDER
    (121) listarreglo -> listaarreglo .

    MAS             reduce using rule 103 (expresion -> ID listaarreglo .)
    MENOS           reduce using rule 103 (expresion -> ID listaarreglo .)
    POR             reduce using rule 103 (expresion -> ID listaarreglo .)
    DIVIDIDO        reduce using rule 103 (expresion -> ID listaarreglo .)
    MOD             reduce using rule 103 (expresion -> ID listaarreglo .)
    AS              reduce using rule 103 (expresion -> ID listaarreglo .)
    DPT2            reduce using rule 103 (expresion -> ID listaarreglo .)
    PT              reduce using rule 103 (expresion -> ID listaarreglo .)
    LLAVEDER        reduce using rule 103 (expresion -> ID listaarreglo .)
    CORIZQ          shift and go to state 126
    IGUAL           reduce using rule 121 (listarreglo -> listaarreglo .)


state 302

    (21) instruccion -> ID PARIZQ listexpr . PARDER PTCOMA
    (101) expresion -> ID PARIZQ listexpr . PARDER
    (123) listexpr -> listexpr . COMA logica

    PARDER          shift and go to state 320
    COMA            shift and go to state 173


state 303

    (24) instruccion -> LOOP LLAVEIZQ instrucciones . LLAVEDER
    (37) instrloop -> LOOP LLAVEIZQ instrucciones . LLAVEDER

    LLAVEDER        shift and go to state 321


state 304

    (27) instruccion -> MATCH logica LLAVEIZQ . insmatch LLAVEDER
    (45) instrmatch -> MATCH logica LLAVEIZQ . opmatch LLAVEDER
    (38) insmatch -> . insmatch otro2
    (39) insmatch -> . otro2
    (46) opmatch -> . opmatch otro
    (47) opmatch -> . otro
    (40) otro2 -> . lmatch IMAYOR opcion COMA
    (48) otro -> . logica IMAYOR logica COMA
    (43) lmatch -> . lmatch AB logica
    (44) lmatch -> . logica
    (58) logica -> . logica AND logica
    (59) logica -> . logica OR logica
    (60) logica -> . NOT logica
    (61) logica -> . rel
    (62) rel -> . rel IGUAL IGUAL rel
    (63) rel -> . rel MENOR rel
    (64) rel -> . rel MAYOR rel
    (65) rel -> . rel MEIGUAL rel
    (66) rel -> . rel MAIGUAL rel
    (67) rel -> . rel DIS rel
    (68) rel -> . expresion
    (86) expresion -> . expresion MAS expresion
    (87) expresion -> . expresion MENOS expresion
    (88) expresion -> . expresion POR expresion
    (89) expresion -> . expresion DIVIDIDO expresion
    (90) expresion -> . expresion MOD expresion
    (91) expresion -> . expresion AS tipos
    (92) expresion -> . instrif
    (93) expresion -> . MENOS expresion
    (94) expresion -> . PARIZQ logica PARDER
    (95) expresion -> . ENTERO
    (96) expresion -> . DECIMAL
    (97) expresion -> . FORM
    (98) expresion -> . TRUE
    (99) expresion -> . FALSE
    (100) expresion -> . VECM NOT listarreglo
    (101) expresion -> . ID PARIZQ listexpr PARDER
    (102) expresion -> . ID
    (103) expresion -> . ID listaarreglo
    (106) expresion -> . CORIZQ listexpr CORDER
    (107) expresion -> . CHARE
    (108) expresion -> . expresion DPT2 expresion
    (109) expresion -> . AMP expresion
    (110) expresion -> . tipos DPT2 POW PARIZQ logica COMA logica PARDER
    (111) expresion -> . tipos DPT2 POWF PARIZQ logica COMA logica PARDER
    (112) expresion -> . instrloop
    (113) expresion -> . instrmatch
    (114) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (115) expresion -> . expresion PT SQRT PARIZQ PARDER
    (116) expresion -> . expresion PT ABS PARIZQ PARDER
    (117) expresion -> . expresion PT CLONE PARIZQ PARDER
    (118) expresion -> . expresion PT LEN PARIZQ PARDER
    (119) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (120) expresion -> . expresion PT CONTA PARIZQ expresion PARDER
    (49) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE
    (37) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (45) instrmatch -> . MATCH logica LLAVEIZQ opmatch LLAVEDER

    NOT             shift and go to state 87
    MENOS           shift and go to state 90
    PARIZQ          shift and go to state 93
    ENTERO          shift and go to state 94
    DECIMAL         shift and go to state 95
    FORM            shift and go to state 96
    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    VECM            shift and go to state 99
    ID              shift and go to state 100
    CORIZQ          shift and go to state 101
    CHARE           shift and go to state 102
    AMP             shift and go to state 103
    IF              shift and go to state 85
    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    USIZE           shift and go to state 69
    LOOP            shift and go to state 106
    MATCH           shift and go to state 107

    logica                         shift and go to state 322
    insmatch                       shift and go to state 214
    opmatch                        shift and go to state 251
    otro2                          shift and go to state 215
    otro                           shift and go to state 252
    lmatch                         shift and go to state 216
    rel                            shift and go to state 88
    expresion                      shift and go to state 89
    tipos                          shift and go to state 91
    instrif                        shift and go to state 92
    instrloop                      shift and go to state 104
    instrmatch                     shift and go to state 105

state 305

    (55) unelse -> ELSE LLAVEIZQ . instrucciones LLAVEDER
    (17) instrucciones -> . instruccion instrucciones
    (18) instrucciones -> . instruccion
    (19) instruccion -> . LET mutable ID pyc arrtipos IGUAL logica PTCOMA
    (20) instruccion -> . ID listarreglo IGUAL logica PTCOMA
    (21) instruccion -> . ID PARIZQ listexpr PARDER PTCOMA
    (22) instruccion -> . PRINT NOT PARIZQ listexpr PARDER PTCOMA
    (23) instruccion -> . IF logica LLAVEIZQ instrucciones LLAVEDER unelse
    (24) instruccion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (25) instruccion -> . WHILE logica LLAVEIZQ instrucciones LLAVEDER
    (26) instruccion -> . FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER
    (27) instruccion -> . MATCH logica LLAVEIZQ insmatch LLAVEDER
    (28) instruccion -> . BREAK PTCOMA
    (29) instruccion -> . CONTINUE PTCOMA
    (30) instruccion -> . BREAK logica PTCOMA
    (31) instruccion -> . RETURN logica PTCOMA

    LET             shift and go to state 51
    ID              shift and go to state 52
    PRINT           shift and go to state 53
    IF              shift and go to state 54
    LOOP            shift and go to state 55
    WHILE           shift and go to state 56
    FOR             shift and go to state 57
    MATCH           shift and go to state 58
    BREAK           shift and go to state 59
    CONTINUE        shift and go to state 60
    RETURN          shift and go to state 61

    instrucciones                  shift and go to state 323
    instruccion                    shift and go to state 50

state 306

    (56) unelse -> ELSE IF . logica LLAVEIZQ instrucciones LLAVEDER unelse
    (58) logica -> . logica AND logica
    (59) logica -> . logica OR logica
    (60) logica -> . NOT logica
    (61) logica -> . rel
    (62) rel -> . rel IGUAL IGUAL rel
    (63) rel -> . rel MENOR rel
    (64) rel -> . rel MAYOR rel
    (65) rel -> . rel MEIGUAL rel
    (66) rel -> . rel MAIGUAL rel
    (67) rel -> . rel DIS rel
    (68) rel -> . expresion
    (86) expresion -> . expresion MAS expresion
    (87) expresion -> . expresion MENOS expresion
    (88) expresion -> . expresion POR expresion
    (89) expresion -> . expresion DIVIDIDO expresion
    (90) expresion -> . expresion MOD expresion
    (91) expresion -> . expresion AS tipos
    (92) expresion -> . instrif
    (93) expresion -> . MENOS expresion
    (94) expresion -> . PARIZQ logica PARDER
    (95) expresion -> . ENTERO
    (96) expresion -> . DECIMAL
    (97) expresion -> . FORM
    (98) expresion -> . TRUE
    (99) expresion -> . FALSE
    (100) expresion -> . VECM NOT listarreglo
    (101) expresion -> . ID PARIZQ listexpr PARDER
    (102) expresion -> . ID
    (103) expresion -> . ID listaarreglo
    (106) expresion -> . CORIZQ listexpr CORDER
    (107) expresion -> . CHARE
    (108) expresion -> . expresion DPT2 expresion
    (109) expresion -> . AMP expresion
    (110) expresion -> . tipos DPT2 POW PARIZQ logica COMA logica PARDER
    (111) expresion -> . tipos DPT2 POWF PARIZQ logica COMA logica PARDER
    (112) expresion -> . instrloop
    (113) expresion -> . instrmatch
    (114) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (115) expresion -> . expresion PT SQRT PARIZQ PARDER
    (116) expresion -> . expresion PT ABS PARIZQ PARDER
    (117) expresion -> . expresion PT CLONE PARIZQ PARDER
    (118) expresion -> . expresion PT LEN PARIZQ PARDER
    (119) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (120) expresion -> . expresion PT CONTA PARIZQ expresion PARDER
    (49) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE
    (37) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (45) instrmatch -> . MATCH logica LLAVEIZQ opmatch LLAVEDER

    NOT             shift and go to state 87
    MENOS           shift and go to state 90
    PARIZQ          shift and go to state 93
    ENTERO          shift and go to state 94
    DECIMAL         shift and go to state 95
    FORM            shift and go to state 96
    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    VECM            shift and go to state 99
    ID              shift and go to state 100
    CORIZQ          shift and go to state 101
    CHARE           shift and go to state 102
    AMP             shift and go to state 103
    IF              shift and go to state 85
    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    USIZE           shift and go to state 69
    LOOP            shift and go to state 106
    MATCH           shift and go to state 107

    logica                         shift and go to state 324
    rel                            shift and go to state 88
    expresion                      shift and go to state 89
    tipos                          shift and go to state 91
    instrif                        shift and go to state 92
    instrloop                      shift and go to state 104
    instrmatch                     shift and go to state 105

state 307

    (120) expresion -> expresion PT CONTA PARIZQ expresion PARDER .

    MAS             reduce using rule 120 (expresion -> expresion PT CONTA PARIZQ expresion PARDER .)
    MENOS           reduce using rule 120 (expresion -> expresion PT CONTA PARIZQ expresion PARDER .)
    POR             reduce using rule 120 (expresion -> expresion PT CONTA PARIZQ expresion PARDER .)
    DIVIDIDO        reduce using rule 120 (expresion -> expresion PT CONTA PARIZQ expresion PARDER .)
    MOD             reduce using rule 120 (expresion -> expresion PT CONTA PARIZQ expresion PARDER .)
    AS              reduce using rule 120 (expresion -> expresion PT CONTA PARIZQ expresion PARDER .)
    DPT2            reduce using rule 120 (expresion -> expresion PT CONTA PARIZQ expresion PARDER .)
    PT              reduce using rule 120 (expresion -> expresion PT CONTA PARIZQ expresion PARDER .)
    IGUAL           reduce using rule 120 (expresion -> expresion PT CONTA PARIZQ expresion PARDER .)
    MENOR           reduce using rule 120 (expresion -> expresion PT CONTA PARIZQ expresion PARDER .)
    MAYOR           reduce using rule 120 (expresion -> expresion PT CONTA PARIZQ expresion PARDER .)
    MEIGUAL         reduce using rule 120 (expresion -> expresion PT CONTA PARIZQ expresion PARDER .)
    MAIGUAL         reduce using rule 120 (expresion -> expresion PT CONTA PARIZQ expresion PARDER .)
    DIS             reduce using rule 120 (expresion -> expresion PT CONTA PARIZQ expresion PARDER .)
    LLAVEIZQ        reduce using rule 120 (expresion -> expresion PT CONTA PARIZQ expresion PARDER .)
    AND             reduce using rule 120 (expresion -> expresion PT CONTA PARIZQ expresion PARDER .)
    OR              reduce using rule 120 (expresion -> expresion PT CONTA PARIZQ expresion PARDER .)
    PTCOMA          reduce using rule 120 (expresion -> expresion PT CONTA PARIZQ expresion PARDER .)
    PARDER          reduce using rule 120 (expresion -> expresion PT CONTA PARIZQ expresion PARDER .)
    COMA            reduce using rule 120 (expresion -> expresion PT CONTA PARIZQ expresion PARDER .)
    CORDER          reduce using rule 120 (expresion -> expresion PT CONTA PARIZQ expresion PARDER .)
    PT2             reduce using rule 120 (expresion -> expresion PT CONTA PARIZQ expresion PARDER .)
    IMAYOR          reduce using rule 120 (expresion -> expresion PT CONTA PARIZQ expresion PARDER .)
    AB              reduce using rule 120 (expresion -> expresion PT CONTA PARIZQ expresion PARDER .)
    LLAVEDER        reduce using rule 120 (expresion -> expresion PT CONTA PARIZQ expresion PARDER .)


state 308

    (110) expresion -> tipos DPT2 POW PARIZQ logica COMA . logica PARDER
    (58) logica -> . logica AND logica
    (59) logica -> . logica OR logica
    (60) logica -> . NOT logica
    (61) logica -> . rel
    (62) rel -> . rel IGUAL IGUAL rel
    (63) rel -> . rel MENOR rel
    (64) rel -> . rel MAYOR rel
    (65) rel -> . rel MEIGUAL rel
    (66) rel -> . rel MAIGUAL rel
    (67) rel -> . rel DIS rel
    (68) rel -> . expresion
    (86) expresion -> . expresion MAS expresion
    (87) expresion -> . expresion MENOS expresion
    (88) expresion -> . expresion POR expresion
    (89) expresion -> . expresion DIVIDIDO expresion
    (90) expresion -> . expresion MOD expresion
    (91) expresion -> . expresion AS tipos
    (92) expresion -> . instrif
    (93) expresion -> . MENOS expresion
    (94) expresion -> . PARIZQ logica PARDER
    (95) expresion -> . ENTERO
    (96) expresion -> . DECIMAL
    (97) expresion -> . FORM
    (98) expresion -> . TRUE
    (99) expresion -> . FALSE
    (100) expresion -> . VECM NOT listarreglo
    (101) expresion -> . ID PARIZQ listexpr PARDER
    (102) expresion -> . ID
    (103) expresion -> . ID listaarreglo
    (106) expresion -> . CORIZQ listexpr CORDER
    (107) expresion -> . CHARE
    (108) expresion -> . expresion DPT2 expresion
    (109) expresion -> . AMP expresion
    (110) expresion -> . tipos DPT2 POW PARIZQ logica COMA logica PARDER
    (111) expresion -> . tipos DPT2 POWF PARIZQ logica COMA logica PARDER
    (112) expresion -> . instrloop
    (113) expresion -> . instrmatch
    (114) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (115) expresion -> . expresion PT SQRT PARIZQ PARDER
    (116) expresion -> . expresion PT ABS PARIZQ PARDER
    (117) expresion -> . expresion PT CLONE PARIZQ PARDER
    (118) expresion -> . expresion PT LEN PARIZQ PARDER
    (119) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (120) expresion -> . expresion PT CONTA PARIZQ expresion PARDER
    (49) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE
    (37) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (45) instrmatch -> . MATCH logica LLAVEIZQ opmatch LLAVEDER

    NOT             shift and go to state 87
    MENOS           shift and go to state 90
    PARIZQ          shift and go to state 93
    ENTERO          shift and go to state 94
    DECIMAL         shift and go to state 95
    FORM            shift and go to state 96
    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    VECM            shift and go to state 99
    ID              shift and go to state 100
    CORIZQ          shift and go to state 101
    CHARE           shift and go to state 102
    AMP             shift and go to state 103
    IF              shift and go to state 85
    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    USIZE           shift and go to state 69
    LOOP            shift and go to state 106
    MATCH           shift and go to state 107

    tipos                          shift and go to state 91
    logica                         shift and go to state 325
    rel                            shift and go to state 88
    expresion                      shift and go to state 89
    instrif                        shift and go to state 92
    instrloop                      shift and go to state 104
    instrmatch                     shift and go to state 105

state 309

    (111) expresion -> tipos DPT2 POWF PARIZQ logica COMA . logica PARDER
    (58) logica -> . logica AND logica
    (59) logica -> . logica OR logica
    (60) logica -> . NOT logica
    (61) logica -> . rel
    (62) rel -> . rel IGUAL IGUAL rel
    (63) rel -> . rel MENOR rel
    (64) rel -> . rel MAYOR rel
    (65) rel -> . rel MEIGUAL rel
    (66) rel -> . rel MAIGUAL rel
    (67) rel -> . rel DIS rel
    (68) rel -> . expresion
    (86) expresion -> . expresion MAS expresion
    (87) expresion -> . expresion MENOS expresion
    (88) expresion -> . expresion POR expresion
    (89) expresion -> . expresion DIVIDIDO expresion
    (90) expresion -> . expresion MOD expresion
    (91) expresion -> . expresion AS tipos
    (92) expresion -> . instrif
    (93) expresion -> . MENOS expresion
    (94) expresion -> . PARIZQ logica PARDER
    (95) expresion -> . ENTERO
    (96) expresion -> . DECIMAL
    (97) expresion -> . FORM
    (98) expresion -> . TRUE
    (99) expresion -> . FALSE
    (100) expresion -> . VECM NOT listarreglo
    (101) expresion -> . ID PARIZQ listexpr PARDER
    (102) expresion -> . ID
    (103) expresion -> . ID listaarreglo
    (106) expresion -> . CORIZQ listexpr CORDER
    (107) expresion -> . CHARE
    (108) expresion -> . expresion DPT2 expresion
    (109) expresion -> . AMP expresion
    (110) expresion -> . tipos DPT2 POW PARIZQ logica COMA logica PARDER
    (111) expresion -> . tipos DPT2 POWF PARIZQ logica COMA logica PARDER
    (112) expresion -> . instrloop
    (113) expresion -> . instrmatch
    (114) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (115) expresion -> . expresion PT SQRT PARIZQ PARDER
    (116) expresion -> . expresion PT ABS PARIZQ PARDER
    (117) expresion -> . expresion PT CLONE PARIZQ PARDER
    (118) expresion -> . expresion PT LEN PARIZQ PARDER
    (119) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (120) expresion -> . expresion PT CONTA PARIZQ expresion PARDER
    (49) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE
    (37) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (45) instrmatch -> . MATCH logica LLAVEIZQ opmatch LLAVEDER

    NOT             shift and go to state 87
    MENOS           shift and go to state 90
    PARIZQ          shift and go to state 93
    ENTERO          shift and go to state 94
    DECIMAL         shift and go to state 95
    FORM            shift and go to state 96
    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    VECM            shift and go to state 99
    ID              shift and go to state 100
    CORIZQ          shift and go to state 101
    CHARE           shift and go to state 102
    AMP             shift and go to state 103
    IF              shift and go to state 85
    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    USIZE           shift and go to state 69
    LOOP            shift and go to state 106
    MATCH           shift and go to state 107

    tipos                          shift and go to state 91
    logica                         shift and go to state 326
    rel                            shift and go to state 88
    expresion                      shift and go to state 89
    instrif                        shift and go to state 92
    instrloop                      shift and go to state 104
    instrmatch                     shift and go to state 105

state 310

    (48) otro -> logica IMAYOR logica . COMA
    (58) logica -> logica . AND logica
    (59) logica -> logica . OR logica

    COMA            shift and go to state 327
    AND             shift and go to state 131
    OR              shift and go to state 132


state 311

    (26) instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .

    LET             reduce using rule 26 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    ID              reduce using rule 26 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    PRINT           reduce using rule 26 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    IF              reduce using rule 26 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    LOOP            reduce using rule 26 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    WHILE           reduce using rule 26 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    FOR             reduce using rule 26 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    MATCH           reduce using rule 26 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    BREAK           reduce using rule 26 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    CONTINUE        reduce using rule 26 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    RETURN          reduce using rule 26 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    LLAVEDER        reduce using rule 26 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    COMA            reduce using rule 26 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    MENOS           reduce using rule 26 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    PARIZQ          reduce using rule 26 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    ENTERO          reduce using rule 26 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    DECIMAL         reduce using rule 26 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    FORM            reduce using rule 26 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    TRUE            reduce using rule 26 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    FALSE           reduce using rule 26 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    VECM            reduce using rule 26 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    CORIZQ          reduce using rule 26 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    CHARE           reduce using rule 26 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    AMP             reduce using rule 26 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    I64             reduce using rule 26 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    F64             reduce using rule 26 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    BOOL            reduce using rule 26 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    CHAR            reduce using rule 26 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    STRING          reduce using rule 26 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    USIZE           reduce using rule 26 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)


state 312

    (40) otro2 -> lmatch IMAYOR opcion COMA .

    LLAVEDER        reduce using rule 40 (otro2 -> lmatch IMAYOR opcion COMA .)
    NOT             reduce using rule 40 (otro2 -> lmatch IMAYOR opcion COMA .)
    MENOS           reduce using rule 40 (otro2 -> lmatch IMAYOR opcion COMA .)
    PARIZQ          reduce using rule 40 (otro2 -> lmatch IMAYOR opcion COMA .)
    ENTERO          reduce using rule 40 (otro2 -> lmatch IMAYOR opcion COMA .)
    DECIMAL         reduce using rule 40 (otro2 -> lmatch IMAYOR opcion COMA .)
    FORM            reduce using rule 40 (otro2 -> lmatch IMAYOR opcion COMA .)
    TRUE            reduce using rule 40 (otro2 -> lmatch IMAYOR opcion COMA .)
    FALSE           reduce using rule 40 (otro2 -> lmatch IMAYOR opcion COMA .)
    VECM            reduce using rule 40 (otro2 -> lmatch IMAYOR opcion COMA .)
    ID              reduce using rule 40 (otro2 -> lmatch IMAYOR opcion COMA .)
    CORIZQ          reduce using rule 40 (otro2 -> lmatch IMAYOR opcion COMA .)
    CHARE           reduce using rule 40 (otro2 -> lmatch IMAYOR opcion COMA .)
    AMP             reduce using rule 40 (otro2 -> lmatch IMAYOR opcion COMA .)
    IF              reduce using rule 40 (otro2 -> lmatch IMAYOR opcion COMA .)
    I64             reduce using rule 40 (otro2 -> lmatch IMAYOR opcion COMA .)
    F64             reduce using rule 40 (otro2 -> lmatch IMAYOR opcion COMA .)
    BOOL            reduce using rule 40 (otro2 -> lmatch IMAYOR opcion COMA .)
    CHAR            reduce using rule 40 (otro2 -> lmatch IMAYOR opcion COMA .)
    STRING          reduce using rule 40 (otro2 -> lmatch IMAYOR opcion COMA .)
    USIZE           reduce using rule 40 (otro2 -> lmatch IMAYOR opcion COMA .)
    LOOP            reduce using rule 40 (otro2 -> lmatch IMAYOR opcion COMA .)
    MATCH           reduce using rule 40 (otro2 -> lmatch IMAYOR opcion COMA .)


state 313

    (41) opcion -> LLAVEIZQ instrucciones . LLAVEDER

    LLAVEDER        shift and go to state 328


state 314

    (19) instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .

    LET             reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    ID              reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    PRINT           reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    IF              reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    LOOP            reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    WHILE           reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    FOR             reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    MATCH           reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    BREAK           reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    CONTINUE        reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    RETURN          reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    LLAVEDER        reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    COMA            reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    MENOS           reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    PARIZQ          reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    ENTERO          reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    DECIMAL         reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    FORM            reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    TRUE            reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    FALSE           reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    VECM            reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    CORIZQ          reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    CHARE           reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    AMP             reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    I64             reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    F64             reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    BOOL            reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    CHAR            reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    STRING          reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    USIZE           reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)


state 315

    (76) arreglos -> CORIZQ arreglos PTCOMA ENTERO . CORDER

    CORDER          shift and go to state 329


state 316

    (17) instrucciones -> instruccion . instrucciones
    (18) instrucciones -> instruccion .
    (32) instruccionesexp -> instruccion . instruccionesexpfin
    (17) instrucciones -> . instruccion instrucciones
    (18) instrucciones -> . instruccion
    (34) instruccionesexpfin -> . instruccionesexp
    (35) instruccionesexpfin -> . expresion
    (36) instruccionesexpfin -> .
    (19) instruccion -> . LET mutable ID pyc arrtipos IGUAL logica PTCOMA
    (20) instruccion -> . ID listarreglo IGUAL logica PTCOMA
    (21) instruccion -> . ID PARIZQ listexpr PARDER PTCOMA
    (22) instruccion -> . PRINT NOT PARIZQ listexpr PARDER PTCOMA
    (23) instruccion -> . IF logica LLAVEIZQ instrucciones LLAVEDER unelse
    (24) instruccion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (25) instruccion -> . WHILE logica LLAVEIZQ instrucciones LLAVEDER
    (26) instruccion -> . FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER
    (27) instruccion -> . MATCH logica LLAVEIZQ insmatch LLAVEDER
    (28) instruccion -> . BREAK PTCOMA
    (29) instruccion -> . CONTINUE PTCOMA
    (30) instruccion -> . BREAK logica PTCOMA
    (31) instruccion -> . RETURN logica PTCOMA
    (32) instruccionesexp -> . instruccion instruccionesexpfin
    (33) instruccionesexp -> . instruccionesexpfin
    (86) expresion -> . expresion MAS expresion
    (87) expresion -> . expresion MENOS expresion
    (88) expresion -> . expresion POR expresion
    (89) expresion -> . expresion DIVIDIDO expresion
    (90) expresion -> . expresion MOD expresion
    (91) expresion -> . expresion AS tipos
    (92) expresion -> . instrif
    (93) expresion -> . MENOS expresion
    (94) expresion -> . PARIZQ logica PARDER
    (95) expresion -> . ENTERO
    (96) expresion -> . DECIMAL
    (97) expresion -> . FORM
    (98) expresion -> . TRUE
    (99) expresion -> . FALSE
    (100) expresion -> . VECM NOT listarreglo
    (101) expresion -> . ID PARIZQ listexpr PARDER
    (102) expresion -> . ID
    (103) expresion -> . ID listaarreglo
    (106) expresion -> . CORIZQ listexpr CORDER
    (107) expresion -> . CHARE
    (108) expresion -> . expresion DPT2 expresion
    (109) expresion -> . AMP expresion
    (110) expresion -> . tipos DPT2 POW PARIZQ logica COMA logica PARDER
    (111) expresion -> . tipos DPT2 POWF PARIZQ logica COMA logica PARDER
    (112) expresion -> . instrloop
    (113) expresion -> . instrmatch
    (114) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (115) expresion -> . expresion PT SQRT PARIZQ PARDER
    (116) expresion -> . expresion PT ABS PARIZQ PARDER
    (117) expresion -> . expresion PT CLONE PARIZQ PARDER
    (118) expresion -> . expresion PT LEN PARIZQ PARDER
    (119) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (120) expresion -> . expresion PT CONTA PARIZQ expresion PARDER
    (49) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE
    (37) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (45) instrmatch -> . MATCH logica LLAVEIZQ opmatch LLAVEDER

  ! reduce/reduce conflict for LLAVEDER resolved using rule 18 (instrucciones -> instruccion .)
    LLAVEDER        reduce using rule 18 (instrucciones -> instruccion .)
    LET             shift and go to state 51
    ID              shift and go to state 233
    PRINT           shift and go to state 53
    IF              shift and go to state 229
    LOOP            shift and go to state 234
    WHILE           shift and go to state 56
    FOR             shift and go to state 57
    MATCH           shift and go to state 235
    BREAK           shift and go to state 59
    CONTINUE        shift and go to state 60
    RETURN          shift and go to state 61
    MENOS           shift and go to state 90
    PARIZQ          shift and go to state 93
    ENTERO          shift and go to state 94
    DECIMAL         shift and go to state 95
    FORM            shift and go to state 96
    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    VECM            shift and go to state 99
    CORIZQ          shift and go to state 101
    CHARE           shift and go to state 102
    AMP             shift and go to state 103
    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    USIZE           shift and go to state 69

  ! LLAVEDER        [ reduce using rule 36 (instruccionesexpfin -> .) ]

    instruccion                    shift and go to state 316
    instrucciones                  shift and go to state 77
    instruccionesexpfin            shift and go to state 266
    instruccionesexp               shift and go to state 267
    expresion                      shift and go to state 236
    tipos                          shift and go to state 91
    instrif                        shift and go to state 92
    instrloop                      shift and go to state 104
    instrmatch                     shift and go to state 105

state 317

    (50) instrelse -> ELSE LLAVEIZQ . instruccionesexp LLAVEDER
    (32) instruccionesexp -> . instruccion instruccionesexpfin
    (33) instruccionesexp -> . instruccionesexpfin
    (19) instruccion -> . LET mutable ID pyc arrtipos IGUAL logica PTCOMA
    (20) instruccion -> . ID listarreglo IGUAL logica PTCOMA
    (21) instruccion -> . ID PARIZQ listexpr PARDER PTCOMA
    (22) instruccion -> . PRINT NOT PARIZQ listexpr PARDER PTCOMA
    (23) instruccion -> . IF logica LLAVEIZQ instrucciones LLAVEDER unelse
    (24) instruccion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (25) instruccion -> . WHILE logica LLAVEIZQ instrucciones LLAVEDER
    (26) instruccion -> . FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER
    (27) instruccion -> . MATCH logica LLAVEIZQ insmatch LLAVEDER
    (28) instruccion -> . BREAK PTCOMA
    (29) instruccion -> . CONTINUE PTCOMA
    (30) instruccion -> . BREAK logica PTCOMA
    (31) instruccion -> . RETURN logica PTCOMA
    (34) instruccionesexpfin -> . instruccionesexp
    (35) instruccionesexpfin -> . expresion
    (36) instruccionesexpfin -> .
    (86) expresion -> . expresion MAS expresion
    (87) expresion -> . expresion MENOS expresion
    (88) expresion -> . expresion POR expresion
    (89) expresion -> . expresion DIVIDIDO expresion
    (90) expresion -> . expresion MOD expresion
    (91) expresion -> . expresion AS tipos
    (92) expresion -> . instrif
    (93) expresion -> . MENOS expresion
    (94) expresion -> . PARIZQ logica PARDER
    (95) expresion -> . ENTERO
    (96) expresion -> . DECIMAL
    (97) expresion -> . FORM
    (98) expresion -> . TRUE
    (99) expresion -> . FALSE
    (100) expresion -> . VECM NOT listarreglo
    (101) expresion -> . ID PARIZQ listexpr PARDER
    (102) expresion -> . ID
    (103) expresion -> . ID listaarreglo
    (106) expresion -> . CORIZQ listexpr CORDER
    (107) expresion -> . CHARE
    (108) expresion -> . expresion DPT2 expresion
    (109) expresion -> . AMP expresion
    (110) expresion -> . tipos DPT2 POW PARIZQ logica COMA logica PARDER
    (111) expresion -> . tipos DPT2 POWF PARIZQ logica COMA logica PARDER
    (112) expresion -> . instrloop
    (113) expresion -> . instrmatch
    (114) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (115) expresion -> . expresion PT SQRT PARIZQ PARDER
    (116) expresion -> . expresion PT ABS PARIZQ PARDER
    (117) expresion -> . expresion PT CLONE PARIZQ PARDER
    (118) expresion -> . expresion PT LEN PARIZQ PARDER
    (119) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (120) expresion -> . expresion PT CONTA PARIZQ expresion PARDER
    (49) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE
    (37) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (45) instrmatch -> . MATCH logica LLAVEIZQ opmatch LLAVEDER

    LET             shift and go to state 51
    ID              shift and go to state 233
    PRINT           shift and go to state 53
    IF              shift and go to state 229
    LOOP            shift and go to state 234
    WHILE           shift and go to state 56
    FOR             shift and go to state 57
    MATCH           shift and go to state 235
    BREAK           shift and go to state 59
    CONTINUE        shift and go to state 60
    RETURN          shift and go to state 61
    LLAVEDER        reduce using rule 36 (instruccionesexpfin -> .)
    MENOS           shift and go to state 90
    PARIZQ          shift and go to state 93
    ENTERO          shift and go to state 94
    DECIMAL         shift and go to state 95
    FORM            shift and go to state 96
    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    VECM            shift and go to state 99
    CORIZQ          shift and go to state 101
    CHARE           shift and go to state 102
    AMP             shift and go to state 103
    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    USIZE           shift and go to state 69

    instruccionesexp               shift and go to state 330
    instruccion                    shift and go to state 231
    instruccionesexpfin            shift and go to state 232
    expresion                      shift and go to state 236
    tipos                          shift and go to state 91
    instrif                        shift and go to state 92
    instrloop                      shift and go to state 104
    instrmatch                     shift and go to state 105

state 318

    (51) instrelse -> ELSE IF . logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (58) logica -> . logica AND logica
    (59) logica -> . logica OR logica
    (60) logica -> . NOT logica
    (61) logica -> . rel
    (62) rel -> . rel IGUAL IGUAL rel
    (63) rel -> . rel MENOR rel
    (64) rel -> . rel MAYOR rel
    (65) rel -> . rel MEIGUAL rel
    (66) rel -> . rel MAIGUAL rel
    (67) rel -> . rel DIS rel
    (68) rel -> . expresion
    (86) expresion -> . expresion MAS expresion
    (87) expresion -> . expresion MENOS expresion
    (88) expresion -> . expresion POR expresion
    (89) expresion -> . expresion DIVIDIDO expresion
    (90) expresion -> . expresion MOD expresion
    (91) expresion -> . expresion AS tipos
    (92) expresion -> . instrif
    (93) expresion -> . MENOS expresion
    (94) expresion -> . PARIZQ logica PARDER
    (95) expresion -> . ENTERO
    (96) expresion -> . DECIMAL
    (97) expresion -> . FORM
    (98) expresion -> . TRUE
    (99) expresion -> . FALSE
    (100) expresion -> . VECM NOT listarreglo
    (101) expresion -> . ID PARIZQ listexpr PARDER
    (102) expresion -> . ID
    (103) expresion -> . ID listaarreglo
    (106) expresion -> . CORIZQ listexpr CORDER
    (107) expresion -> . CHARE
    (108) expresion -> . expresion DPT2 expresion
    (109) expresion -> . AMP expresion
    (110) expresion -> . tipos DPT2 POW PARIZQ logica COMA logica PARDER
    (111) expresion -> . tipos DPT2 POWF PARIZQ logica COMA logica PARDER
    (112) expresion -> . instrloop
    (113) expresion -> . instrmatch
    (114) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (115) expresion -> . expresion PT SQRT PARIZQ PARDER
    (116) expresion -> . expresion PT ABS PARIZQ PARDER
    (117) expresion -> . expresion PT CLONE PARIZQ PARDER
    (118) expresion -> . expresion PT LEN PARIZQ PARDER
    (119) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (120) expresion -> . expresion PT CONTA PARIZQ expresion PARDER
    (49) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE
    (37) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (45) instrmatch -> . MATCH logica LLAVEIZQ opmatch LLAVEDER

    NOT             shift and go to state 87
    MENOS           shift and go to state 90
    PARIZQ          shift and go to state 93
    ENTERO          shift and go to state 94
    DECIMAL         shift and go to state 95
    FORM            shift and go to state 96
    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    VECM            shift and go to state 99
    ID              shift and go to state 100
    CORIZQ          shift and go to state 101
    CHARE           shift and go to state 102
    AMP             shift and go to state 103
    IF              shift and go to state 85
    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    USIZE           shift and go to state 69
    LOOP            shift and go to state 106
    MATCH           shift and go to state 107

    logica                         shift and go to state 331
    rel                            shift and go to state 88
    expresion                      shift and go to state 89
    tipos                          shift and go to state 91
    instrif                        shift and go to state 92
    instrloop                      shift and go to state 104
    instrmatch                     shift and go to state 105

state 319

    (101) expresion -> ID PARIZQ listexpr . PARDER
    (21) instruccion -> ID PARIZQ listexpr . PARDER PTCOMA
    (123) listexpr -> listexpr . COMA logica

    PARDER          shift and go to state 332
    COMA            shift and go to state 173


state 320

    (21) instruccion -> ID PARIZQ listexpr PARDER . PTCOMA
    (101) expresion -> ID PARIZQ listexpr PARDER .

    PTCOMA          shift and go to state 225
    MAS             reduce using rule 101 (expresion -> ID PARIZQ listexpr PARDER .)
    MENOS           reduce using rule 101 (expresion -> ID PARIZQ listexpr PARDER .)
    POR             reduce using rule 101 (expresion -> ID PARIZQ listexpr PARDER .)
    DIVIDIDO        reduce using rule 101 (expresion -> ID PARIZQ listexpr PARDER .)
    MOD             reduce using rule 101 (expresion -> ID PARIZQ listexpr PARDER .)
    AS              reduce using rule 101 (expresion -> ID PARIZQ listexpr PARDER .)
    DPT2            reduce using rule 101 (expresion -> ID PARIZQ listexpr PARDER .)
    PT              reduce using rule 101 (expresion -> ID PARIZQ listexpr PARDER .)
    LLAVEDER        reduce using rule 101 (expresion -> ID PARIZQ listexpr PARDER .)


state 321

    (24) instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .
    (37) instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .

  ! reduce/reduce conflict for MENOS resolved using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
  ! reduce/reduce conflict for LLAVEDER resolved using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    MENOS           reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    PARIZQ          reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    ENTERO          reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    DECIMAL         reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    FORM            reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    TRUE            reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    FALSE           reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    VECM            reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    ID              reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    CORIZQ          reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    CHARE           reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    AMP             reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    LET             reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    PRINT           reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    IF              reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    LOOP            reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    WHILE           reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    FOR             reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    MATCH           reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    BREAK           reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    CONTINUE        reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    RETURN          reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    I64             reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    F64             reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    BOOL            reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    CHAR            reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    STRING          reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    USIZE           reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    LLAVEDER        reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    MAS             reduce using rule 37 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    POR             reduce using rule 37 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    DIVIDIDO        reduce using rule 37 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    MOD             reduce using rule 37 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    AS              reduce using rule 37 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    DPT2            reduce using rule 37 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    PT              reduce using rule 37 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .)

  ! MENOS           [ reduce using rule 37 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .) ]
  ! LLAVEDER        [ reduce using rule 37 (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER .) ]


state 322

    (48) otro -> logica . IMAYOR logica COMA
    (44) lmatch -> logica .
    (58) logica -> logica . AND logica
    (59) logica -> logica . OR logica

  ! shift/reduce conflict for IMAYOR resolved as shift
    IMAYOR          shift and go to state 285
    AB              reduce using rule 44 (lmatch -> logica .)
    AND             shift and go to state 131
    OR              shift and go to state 132

  ! IMAYOR          [ reduce using rule 44 (lmatch -> logica .) ]


state 323

    (55) unelse -> ELSE LLAVEIZQ instrucciones . LLAVEDER

    LLAVEDER        shift and go to state 333


state 324

    (56) unelse -> ELSE IF logica . LLAVEIZQ instrucciones LLAVEDER unelse
    (58) logica -> logica . AND logica
    (59) logica -> logica . OR logica

    LLAVEIZQ        shift and go to state 334
    AND             shift and go to state 131
    OR              shift and go to state 132


state 325

    (110) expresion -> tipos DPT2 POW PARIZQ logica COMA logica . PARDER
    (58) logica -> logica . AND logica
    (59) logica -> logica . OR logica

    PARDER          shift and go to state 335
    AND             shift and go to state 131
    OR              shift and go to state 132


state 326

    (111) expresion -> tipos DPT2 POWF PARIZQ logica COMA logica . PARDER
    (58) logica -> logica . AND logica
    (59) logica -> logica . OR logica

    PARDER          shift and go to state 336
    AND             shift and go to state 131
    OR              shift and go to state 132


state 327

    (48) otro -> logica IMAYOR logica COMA .

    LLAVEDER        reduce using rule 48 (otro -> logica IMAYOR logica COMA .)
    NOT             reduce using rule 48 (otro -> logica IMAYOR logica COMA .)
    MENOS           reduce using rule 48 (otro -> logica IMAYOR logica COMA .)
    PARIZQ          reduce using rule 48 (otro -> logica IMAYOR logica COMA .)
    ENTERO          reduce using rule 48 (otro -> logica IMAYOR logica COMA .)
    DECIMAL         reduce using rule 48 (otro -> logica IMAYOR logica COMA .)
    FORM            reduce using rule 48 (otro -> logica IMAYOR logica COMA .)
    TRUE            reduce using rule 48 (otro -> logica IMAYOR logica COMA .)
    FALSE           reduce using rule 48 (otro -> logica IMAYOR logica COMA .)
    VECM            reduce using rule 48 (otro -> logica IMAYOR logica COMA .)
    ID              reduce using rule 48 (otro -> logica IMAYOR logica COMA .)
    CORIZQ          reduce using rule 48 (otro -> logica IMAYOR logica COMA .)
    CHARE           reduce using rule 48 (otro -> logica IMAYOR logica COMA .)
    AMP             reduce using rule 48 (otro -> logica IMAYOR logica COMA .)
    IF              reduce using rule 48 (otro -> logica IMAYOR logica COMA .)
    I64             reduce using rule 48 (otro -> logica IMAYOR logica COMA .)
    F64             reduce using rule 48 (otro -> logica IMAYOR logica COMA .)
    BOOL            reduce using rule 48 (otro -> logica IMAYOR logica COMA .)
    CHAR            reduce using rule 48 (otro -> logica IMAYOR logica COMA .)
    STRING          reduce using rule 48 (otro -> logica IMAYOR logica COMA .)
    USIZE           reduce using rule 48 (otro -> logica IMAYOR logica COMA .)
    LOOP            reduce using rule 48 (otro -> logica IMAYOR logica COMA .)
    MATCH           reduce using rule 48 (otro -> logica IMAYOR logica COMA .)


state 328

    (41) opcion -> LLAVEIZQ instrucciones LLAVEDER .

    COMA            reduce using rule 41 (opcion -> LLAVEIZQ instrucciones LLAVEDER .)


state 329

    (76) arreglos -> CORIZQ arreglos PTCOMA ENTERO CORDER .

    IGUAL           reduce using rule 76 (arreglos -> CORIZQ arreglos PTCOMA ENTERO CORDER .)
    PTCOMA          reduce using rule 76 (arreglos -> CORIZQ arreglos PTCOMA ENTERO CORDER .)


state 330

    (50) instrelse -> ELSE LLAVEIZQ instruccionesexp . LLAVEDER
    (34) instruccionesexpfin -> instruccionesexp .

  ! shift/reduce conflict for LLAVEDER resolved as shift
    LLAVEDER        shift and go to state 337

  ! LLAVEDER        [ reduce using rule 34 (instruccionesexpfin -> instruccionesexp .) ]


state 331

    (51) instrelse -> ELSE IF logica . LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (58) logica -> logica . AND logica
    (59) logica -> logica . OR logica

    LLAVEIZQ        shift and go to state 338
    AND             shift and go to state 131
    OR              shift and go to state 132


state 332

    (101) expresion -> ID PARIZQ listexpr PARDER .
    (21) instruccion -> ID PARIZQ listexpr PARDER . PTCOMA

    MAS             reduce using rule 101 (expresion -> ID PARIZQ listexpr PARDER .)
    MENOS           reduce using rule 101 (expresion -> ID PARIZQ listexpr PARDER .)
    POR             reduce using rule 101 (expresion -> ID PARIZQ listexpr PARDER .)
    DIVIDIDO        reduce using rule 101 (expresion -> ID PARIZQ listexpr PARDER .)
    MOD             reduce using rule 101 (expresion -> ID PARIZQ listexpr PARDER .)
    AS              reduce using rule 101 (expresion -> ID PARIZQ listexpr PARDER .)
    DPT2            reduce using rule 101 (expresion -> ID PARIZQ listexpr PARDER .)
    PT              reduce using rule 101 (expresion -> ID PARIZQ listexpr PARDER .)
    LLAVEDER        reduce using rule 101 (expresion -> ID PARIZQ listexpr PARDER .)
    PTCOMA          shift and go to state 225


state 333

    (55) unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .

    LET             reduce using rule 55 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    ID              reduce using rule 55 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    PRINT           reduce using rule 55 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    IF              reduce using rule 55 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    LOOP            reduce using rule 55 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    WHILE           reduce using rule 55 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    FOR             reduce using rule 55 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    MATCH           reduce using rule 55 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    BREAK           reduce using rule 55 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    CONTINUE        reduce using rule 55 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    RETURN          reduce using rule 55 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    LLAVEDER        reduce using rule 55 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    COMA            reduce using rule 55 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    MENOS           reduce using rule 55 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    PARIZQ          reduce using rule 55 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    ENTERO          reduce using rule 55 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    DECIMAL         reduce using rule 55 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    FORM            reduce using rule 55 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    TRUE            reduce using rule 55 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    FALSE           reduce using rule 55 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    VECM            reduce using rule 55 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    CORIZQ          reduce using rule 55 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    CHARE           reduce using rule 55 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    AMP             reduce using rule 55 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    I64             reduce using rule 55 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    F64             reduce using rule 55 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    BOOL            reduce using rule 55 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    CHAR            reduce using rule 55 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    STRING          reduce using rule 55 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    USIZE           reduce using rule 55 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)


state 334

    (56) unelse -> ELSE IF logica LLAVEIZQ . instrucciones LLAVEDER unelse
    (17) instrucciones -> . instruccion instrucciones
    (18) instrucciones -> . instruccion
    (19) instruccion -> . LET mutable ID pyc arrtipos IGUAL logica PTCOMA
    (20) instruccion -> . ID listarreglo IGUAL logica PTCOMA
    (21) instruccion -> . ID PARIZQ listexpr PARDER PTCOMA
    (22) instruccion -> . PRINT NOT PARIZQ listexpr PARDER PTCOMA
    (23) instruccion -> . IF logica LLAVEIZQ instrucciones LLAVEDER unelse
    (24) instruccion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (25) instruccion -> . WHILE logica LLAVEIZQ instrucciones LLAVEDER
    (26) instruccion -> . FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER
    (27) instruccion -> . MATCH logica LLAVEIZQ insmatch LLAVEDER
    (28) instruccion -> . BREAK PTCOMA
    (29) instruccion -> . CONTINUE PTCOMA
    (30) instruccion -> . BREAK logica PTCOMA
    (31) instruccion -> . RETURN logica PTCOMA

    LET             shift and go to state 51
    ID              shift and go to state 52
    PRINT           shift and go to state 53
    IF              shift and go to state 54
    LOOP            shift and go to state 55
    WHILE           shift and go to state 56
    FOR             shift and go to state 57
    MATCH           shift and go to state 58
    BREAK           shift and go to state 59
    CONTINUE        shift and go to state 60
    RETURN          shift and go to state 61

    instrucciones                  shift and go to state 339
    instruccion                    shift and go to state 50

state 335

    (110) expresion -> tipos DPT2 POW PARIZQ logica COMA logica PARDER .

    MAS             reduce using rule 110 (expresion -> tipos DPT2 POW PARIZQ logica COMA logica PARDER .)
    MENOS           reduce using rule 110 (expresion -> tipos DPT2 POW PARIZQ logica COMA logica PARDER .)
    POR             reduce using rule 110 (expresion -> tipos DPT2 POW PARIZQ logica COMA logica PARDER .)
    DIVIDIDO        reduce using rule 110 (expresion -> tipos DPT2 POW PARIZQ logica COMA logica PARDER .)
    MOD             reduce using rule 110 (expresion -> tipos DPT2 POW PARIZQ logica COMA logica PARDER .)
    AS              reduce using rule 110 (expresion -> tipos DPT2 POW PARIZQ logica COMA logica PARDER .)
    DPT2            reduce using rule 110 (expresion -> tipos DPT2 POW PARIZQ logica COMA logica PARDER .)
    PT              reduce using rule 110 (expresion -> tipos DPT2 POW PARIZQ logica COMA logica PARDER .)
    IGUAL           reduce using rule 110 (expresion -> tipos DPT2 POW PARIZQ logica COMA logica PARDER .)
    MENOR           reduce using rule 110 (expresion -> tipos DPT2 POW PARIZQ logica COMA logica PARDER .)
    MAYOR           reduce using rule 110 (expresion -> tipos DPT2 POW PARIZQ logica COMA logica PARDER .)
    MEIGUAL         reduce using rule 110 (expresion -> tipos DPT2 POW PARIZQ logica COMA logica PARDER .)
    MAIGUAL         reduce using rule 110 (expresion -> tipos DPT2 POW PARIZQ logica COMA logica PARDER .)
    DIS             reduce using rule 110 (expresion -> tipos DPT2 POW PARIZQ logica COMA logica PARDER .)
    LLAVEIZQ        reduce using rule 110 (expresion -> tipos DPT2 POW PARIZQ logica COMA logica PARDER .)
    AND             reduce using rule 110 (expresion -> tipos DPT2 POW PARIZQ logica COMA logica PARDER .)
    OR              reduce using rule 110 (expresion -> tipos DPT2 POW PARIZQ logica COMA logica PARDER .)
    PTCOMA          reduce using rule 110 (expresion -> tipos DPT2 POW PARIZQ logica COMA logica PARDER .)
    PARDER          reduce using rule 110 (expresion -> tipos DPT2 POW PARIZQ logica COMA logica PARDER .)
    COMA            reduce using rule 110 (expresion -> tipos DPT2 POW PARIZQ logica COMA logica PARDER .)
    CORDER          reduce using rule 110 (expresion -> tipos DPT2 POW PARIZQ logica COMA logica PARDER .)
    PT2             reduce using rule 110 (expresion -> tipos DPT2 POW PARIZQ logica COMA logica PARDER .)
    IMAYOR          reduce using rule 110 (expresion -> tipos DPT2 POW PARIZQ logica COMA logica PARDER .)
    AB              reduce using rule 110 (expresion -> tipos DPT2 POW PARIZQ logica COMA logica PARDER .)
    LLAVEDER        reduce using rule 110 (expresion -> tipos DPT2 POW PARIZQ logica COMA logica PARDER .)


state 336

    (111) expresion -> tipos DPT2 POWF PARIZQ logica COMA logica PARDER .

    MAS             reduce using rule 111 (expresion -> tipos DPT2 POWF PARIZQ logica COMA logica PARDER .)
    MENOS           reduce using rule 111 (expresion -> tipos DPT2 POWF PARIZQ logica COMA logica PARDER .)
    POR             reduce using rule 111 (expresion -> tipos DPT2 POWF PARIZQ logica COMA logica PARDER .)
    DIVIDIDO        reduce using rule 111 (expresion -> tipos DPT2 POWF PARIZQ logica COMA logica PARDER .)
    MOD             reduce using rule 111 (expresion -> tipos DPT2 POWF PARIZQ logica COMA logica PARDER .)
    AS              reduce using rule 111 (expresion -> tipos DPT2 POWF PARIZQ logica COMA logica PARDER .)
    DPT2            reduce using rule 111 (expresion -> tipos DPT2 POWF PARIZQ logica COMA logica PARDER .)
    PT              reduce using rule 111 (expresion -> tipos DPT2 POWF PARIZQ logica COMA logica PARDER .)
    IGUAL           reduce using rule 111 (expresion -> tipos DPT2 POWF PARIZQ logica COMA logica PARDER .)
    MENOR           reduce using rule 111 (expresion -> tipos DPT2 POWF PARIZQ logica COMA logica PARDER .)
    MAYOR           reduce using rule 111 (expresion -> tipos DPT2 POWF PARIZQ logica COMA logica PARDER .)
    MEIGUAL         reduce using rule 111 (expresion -> tipos DPT2 POWF PARIZQ logica COMA logica PARDER .)
    MAIGUAL         reduce using rule 111 (expresion -> tipos DPT2 POWF PARIZQ logica COMA logica PARDER .)
    DIS             reduce using rule 111 (expresion -> tipos DPT2 POWF PARIZQ logica COMA logica PARDER .)
    LLAVEIZQ        reduce using rule 111 (expresion -> tipos DPT2 POWF PARIZQ logica COMA logica PARDER .)
    AND             reduce using rule 111 (expresion -> tipos DPT2 POWF PARIZQ logica COMA logica PARDER .)
    OR              reduce using rule 111 (expresion -> tipos DPT2 POWF PARIZQ logica COMA logica PARDER .)
    PTCOMA          reduce using rule 111 (expresion -> tipos DPT2 POWF PARIZQ logica COMA logica PARDER .)
    PARDER          reduce using rule 111 (expresion -> tipos DPT2 POWF PARIZQ logica COMA logica PARDER .)
    COMA            reduce using rule 111 (expresion -> tipos DPT2 POWF PARIZQ logica COMA logica PARDER .)
    CORDER          reduce using rule 111 (expresion -> tipos DPT2 POWF PARIZQ logica COMA logica PARDER .)
    PT2             reduce using rule 111 (expresion -> tipos DPT2 POWF PARIZQ logica COMA logica PARDER .)
    IMAYOR          reduce using rule 111 (expresion -> tipos DPT2 POWF PARIZQ logica COMA logica PARDER .)
    AB              reduce using rule 111 (expresion -> tipos DPT2 POWF PARIZQ logica COMA logica PARDER .)
    LLAVEDER        reduce using rule 111 (expresion -> tipos DPT2 POWF PARIZQ logica COMA logica PARDER .)


state 337

    (50) instrelse -> ELSE LLAVEIZQ instruccionesexp LLAVEDER .

    MAS             reduce using rule 50 (instrelse -> ELSE LLAVEIZQ instruccionesexp LLAVEDER .)
    MENOS           reduce using rule 50 (instrelse -> ELSE LLAVEIZQ instruccionesexp LLAVEDER .)
    POR             reduce using rule 50 (instrelse -> ELSE LLAVEIZQ instruccionesexp LLAVEDER .)
    DIVIDIDO        reduce using rule 50 (instrelse -> ELSE LLAVEIZQ instruccionesexp LLAVEDER .)
    MOD             reduce using rule 50 (instrelse -> ELSE LLAVEIZQ instruccionesexp LLAVEDER .)
    AS              reduce using rule 50 (instrelse -> ELSE LLAVEIZQ instruccionesexp LLAVEDER .)
    DPT2            reduce using rule 50 (instrelse -> ELSE LLAVEIZQ instruccionesexp LLAVEDER .)
    PT              reduce using rule 50 (instrelse -> ELSE LLAVEIZQ instruccionesexp LLAVEDER .)
    IGUAL           reduce using rule 50 (instrelse -> ELSE LLAVEIZQ instruccionesexp LLAVEDER .)
    MENOR           reduce using rule 50 (instrelse -> ELSE LLAVEIZQ instruccionesexp LLAVEDER .)
    MAYOR           reduce using rule 50 (instrelse -> ELSE LLAVEIZQ instruccionesexp LLAVEDER .)
    MEIGUAL         reduce using rule 50 (instrelse -> ELSE LLAVEIZQ instruccionesexp LLAVEDER .)
    MAIGUAL         reduce using rule 50 (instrelse -> ELSE LLAVEIZQ instruccionesexp LLAVEDER .)
    DIS             reduce using rule 50 (instrelse -> ELSE LLAVEIZQ instruccionesexp LLAVEDER .)
    LLAVEIZQ        reduce using rule 50 (instrelse -> ELSE LLAVEIZQ instruccionesexp LLAVEDER .)
    AND             reduce using rule 50 (instrelse -> ELSE LLAVEIZQ instruccionesexp LLAVEDER .)
    OR              reduce using rule 50 (instrelse -> ELSE LLAVEIZQ instruccionesexp LLAVEDER .)
    PTCOMA          reduce using rule 50 (instrelse -> ELSE LLAVEIZQ instruccionesexp LLAVEDER .)
    PARDER          reduce using rule 50 (instrelse -> ELSE LLAVEIZQ instruccionesexp LLAVEDER .)
    COMA            reduce using rule 50 (instrelse -> ELSE LLAVEIZQ instruccionesexp LLAVEDER .)
    CORDER          reduce using rule 50 (instrelse -> ELSE LLAVEIZQ instruccionesexp LLAVEDER .)
    PT2             reduce using rule 50 (instrelse -> ELSE LLAVEIZQ instruccionesexp LLAVEDER .)
    IMAYOR          reduce using rule 50 (instrelse -> ELSE LLAVEIZQ instruccionesexp LLAVEDER .)
    AB              reduce using rule 50 (instrelse -> ELSE LLAVEIZQ instruccionesexp LLAVEDER .)
    LLAVEDER        reduce using rule 50 (instrelse -> ELSE LLAVEIZQ instruccionesexp LLAVEDER .)


state 338

    (51) instrelse -> ELSE IF logica LLAVEIZQ . instruccionesexp LLAVEDER instrelse
    (32) instruccionesexp -> . instruccion instruccionesexpfin
    (33) instruccionesexp -> . instruccionesexpfin
    (19) instruccion -> . LET mutable ID pyc arrtipos IGUAL logica PTCOMA
    (20) instruccion -> . ID listarreglo IGUAL logica PTCOMA
    (21) instruccion -> . ID PARIZQ listexpr PARDER PTCOMA
    (22) instruccion -> . PRINT NOT PARIZQ listexpr PARDER PTCOMA
    (23) instruccion -> . IF logica LLAVEIZQ instrucciones LLAVEDER unelse
    (24) instruccion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (25) instruccion -> . WHILE logica LLAVEIZQ instrucciones LLAVEDER
    (26) instruccion -> . FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER
    (27) instruccion -> . MATCH logica LLAVEIZQ insmatch LLAVEDER
    (28) instruccion -> . BREAK PTCOMA
    (29) instruccion -> . CONTINUE PTCOMA
    (30) instruccion -> . BREAK logica PTCOMA
    (31) instruccion -> . RETURN logica PTCOMA
    (34) instruccionesexpfin -> . instruccionesexp
    (35) instruccionesexpfin -> . expresion
    (36) instruccionesexpfin -> .
    (86) expresion -> . expresion MAS expresion
    (87) expresion -> . expresion MENOS expresion
    (88) expresion -> . expresion POR expresion
    (89) expresion -> . expresion DIVIDIDO expresion
    (90) expresion -> . expresion MOD expresion
    (91) expresion -> . expresion AS tipos
    (92) expresion -> . instrif
    (93) expresion -> . MENOS expresion
    (94) expresion -> . PARIZQ logica PARDER
    (95) expresion -> . ENTERO
    (96) expresion -> . DECIMAL
    (97) expresion -> . FORM
    (98) expresion -> . TRUE
    (99) expresion -> . FALSE
    (100) expresion -> . VECM NOT listarreglo
    (101) expresion -> . ID PARIZQ listexpr PARDER
    (102) expresion -> . ID
    (103) expresion -> . ID listaarreglo
    (106) expresion -> . CORIZQ listexpr CORDER
    (107) expresion -> . CHARE
    (108) expresion -> . expresion DPT2 expresion
    (109) expresion -> . AMP expresion
    (110) expresion -> . tipos DPT2 POW PARIZQ logica COMA logica PARDER
    (111) expresion -> . tipos DPT2 POWF PARIZQ logica COMA logica PARDER
    (112) expresion -> . instrloop
    (113) expresion -> . instrmatch
    (114) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (115) expresion -> . expresion PT SQRT PARIZQ PARDER
    (116) expresion -> . expresion PT ABS PARIZQ PARDER
    (117) expresion -> . expresion PT CLONE PARIZQ PARDER
    (118) expresion -> . expresion PT LEN PARIZQ PARDER
    (119) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (120) expresion -> . expresion PT CONTA PARIZQ expresion PARDER
    (49) instrif -> . IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (79) tipos -> . I64
    (80) tipos -> . F64
    (81) tipos -> . BOOL
    (82) tipos -> . CHAR
    (83) tipos -> . STRING
    (84) tipos -> . AMP STR
    (85) tipos -> . USIZE
    (37) instrloop -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (45) instrmatch -> . MATCH logica LLAVEIZQ opmatch LLAVEDER

    LET             shift and go to state 51
    ID              shift and go to state 233
    PRINT           shift and go to state 53
    IF              shift and go to state 229
    LOOP            shift and go to state 234
    WHILE           shift and go to state 56
    FOR             shift and go to state 57
    MATCH           shift and go to state 235
    BREAK           shift and go to state 59
    CONTINUE        shift and go to state 60
    RETURN          shift and go to state 61
    LLAVEDER        reduce using rule 36 (instruccionesexpfin -> .)
    MENOS           shift and go to state 90
    PARIZQ          shift and go to state 93
    ENTERO          shift and go to state 94
    DECIMAL         shift and go to state 95
    FORM            shift and go to state 96
    TRUE            shift and go to state 97
    FALSE           shift and go to state 98
    VECM            shift and go to state 99
    CORIZQ          shift and go to state 101
    CHARE           shift and go to state 102
    AMP             shift and go to state 103
    I64             shift and go to state 63
    F64             shift and go to state 64
    BOOL            shift and go to state 65
    CHAR            shift and go to state 66
    STRING          shift and go to state 67
    USIZE           shift and go to state 69

    instruccionesexp               shift and go to state 340
    instruccion                    shift and go to state 231
    instruccionesexpfin            shift and go to state 232
    expresion                      shift and go to state 236
    tipos                          shift and go to state 91
    instrif                        shift and go to state 92
    instrloop                      shift and go to state 104
    instrmatch                     shift and go to state 105

state 339

    (56) unelse -> ELSE IF logica LLAVEIZQ instrucciones . LLAVEDER unelse

    LLAVEDER        shift and go to state 341


state 340

    (51) instrelse -> ELSE IF logica LLAVEIZQ instruccionesexp . LLAVEDER instrelse
    (34) instruccionesexpfin -> instruccionesexp .

  ! shift/reduce conflict for LLAVEDER resolved as shift
    LLAVEDER        shift and go to state 342

  ! LLAVEDER        [ reduce using rule 34 (instruccionesexpfin -> instruccionesexp .) ]


state 341

    (56) unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER . unelse
    (55) unelse -> . ELSE LLAVEIZQ instrucciones LLAVEDER
    (56) unelse -> . ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse
    (57) unelse -> . empty
    (125) empty -> .

    ELSE            shift and go to state 274
    LET             reduce using rule 125 (empty -> .)
    ID              reduce using rule 125 (empty -> .)
    PRINT           reduce using rule 125 (empty -> .)
    IF              reduce using rule 125 (empty -> .)
    LOOP            reduce using rule 125 (empty -> .)
    WHILE           reduce using rule 125 (empty -> .)
    FOR             reduce using rule 125 (empty -> .)
    MATCH           reduce using rule 125 (empty -> .)
    BREAK           reduce using rule 125 (empty -> .)
    CONTINUE        reduce using rule 125 (empty -> .)
    RETURN          reduce using rule 125 (empty -> .)
    LLAVEDER        reduce using rule 125 (empty -> .)
    COMA            reduce using rule 125 (empty -> .)
    MENOS           reduce using rule 125 (empty -> .)
    PARIZQ          reduce using rule 125 (empty -> .)
    ENTERO          reduce using rule 125 (empty -> .)
    DECIMAL         reduce using rule 125 (empty -> .)
    FORM            reduce using rule 125 (empty -> .)
    TRUE            reduce using rule 125 (empty -> .)
    FALSE           reduce using rule 125 (empty -> .)
    VECM            reduce using rule 125 (empty -> .)
    CORIZQ          reduce using rule 125 (empty -> .)
    CHARE           reduce using rule 125 (empty -> .)
    AMP             reduce using rule 125 (empty -> .)
    I64             reduce using rule 125 (empty -> .)
    F64             reduce using rule 125 (empty -> .)
    BOOL            reduce using rule 125 (empty -> .)
    CHAR            reduce using rule 125 (empty -> .)
    STRING          reduce using rule 125 (empty -> .)
    USIZE           reduce using rule 125 (empty -> .)

    unelse                         shift and go to state 343
    empty                          shift and go to state 275

state 342

    (51) instrelse -> ELSE IF logica LLAVEIZQ instruccionesexp LLAVEDER . instrelse
    (50) instrelse -> . ELSE LLAVEIZQ instruccionesexp LLAVEDER
    (51) instrelse -> . ELSE IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse
    (52) instrelse -> . empty
    (125) empty -> .

    ELSE            shift and go to state 298
    MAS             reduce using rule 125 (empty -> .)
    MENOS           reduce using rule 125 (empty -> .)
    POR             reduce using rule 125 (empty -> .)
    DIVIDIDO        reduce using rule 125 (empty -> .)
    MOD             reduce using rule 125 (empty -> .)
    AS              reduce using rule 125 (empty -> .)
    DPT2            reduce using rule 125 (empty -> .)
    PT              reduce using rule 125 (empty -> .)
    IGUAL           reduce using rule 125 (empty -> .)
    MENOR           reduce using rule 125 (empty -> .)
    MAYOR           reduce using rule 125 (empty -> .)
    MEIGUAL         reduce using rule 125 (empty -> .)
    MAIGUAL         reduce using rule 125 (empty -> .)
    DIS             reduce using rule 125 (empty -> .)
    LLAVEIZQ        reduce using rule 125 (empty -> .)
    AND             reduce using rule 125 (empty -> .)
    OR              reduce using rule 125 (empty -> .)
    PTCOMA          reduce using rule 125 (empty -> .)
    PARDER          reduce using rule 125 (empty -> .)
    COMA            reduce using rule 125 (empty -> .)
    CORDER          reduce using rule 125 (empty -> .)
    PT2             reduce using rule 125 (empty -> .)
    IMAYOR          reduce using rule 125 (empty -> .)
    AB              reduce using rule 125 (empty -> .)
    LLAVEDER        reduce using rule 125 (empty -> .)

    instrelse                      shift and go to state 344
    empty                          shift and go to state 299

state 343

    (56) unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .

    LET             reduce using rule 56 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    ID              reduce using rule 56 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    PRINT           reduce using rule 56 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    IF              reduce using rule 56 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    LOOP            reduce using rule 56 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    WHILE           reduce using rule 56 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    FOR             reduce using rule 56 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    MATCH           reduce using rule 56 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    BREAK           reduce using rule 56 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    CONTINUE        reduce using rule 56 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    RETURN          reduce using rule 56 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    LLAVEDER        reduce using rule 56 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    COMA            reduce using rule 56 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    MENOS           reduce using rule 56 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    PARIZQ          reduce using rule 56 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    ENTERO          reduce using rule 56 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    DECIMAL         reduce using rule 56 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    FORM            reduce using rule 56 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    TRUE            reduce using rule 56 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    FALSE           reduce using rule 56 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    VECM            reduce using rule 56 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    CORIZQ          reduce using rule 56 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    CHARE           reduce using rule 56 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    AMP             reduce using rule 56 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    I64             reduce using rule 56 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    F64             reduce using rule 56 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    BOOL            reduce using rule 56 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    CHAR            reduce using rule 56 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    STRING          reduce using rule 56 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    USIZE           reduce using rule 56 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)


state 344

    (51) instrelse -> ELSE IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .

    MAS             reduce using rule 51 (instrelse -> ELSE IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    MENOS           reduce using rule 51 (instrelse -> ELSE IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    POR             reduce using rule 51 (instrelse -> ELSE IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    DIVIDIDO        reduce using rule 51 (instrelse -> ELSE IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    MOD             reduce using rule 51 (instrelse -> ELSE IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    AS              reduce using rule 51 (instrelse -> ELSE IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    DPT2            reduce using rule 51 (instrelse -> ELSE IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    PT              reduce using rule 51 (instrelse -> ELSE IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    IGUAL           reduce using rule 51 (instrelse -> ELSE IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    MENOR           reduce using rule 51 (instrelse -> ELSE IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    MAYOR           reduce using rule 51 (instrelse -> ELSE IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    MEIGUAL         reduce using rule 51 (instrelse -> ELSE IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    MAIGUAL         reduce using rule 51 (instrelse -> ELSE IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    DIS             reduce using rule 51 (instrelse -> ELSE IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    LLAVEIZQ        reduce using rule 51 (instrelse -> ELSE IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    AND             reduce using rule 51 (instrelse -> ELSE IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    OR              reduce using rule 51 (instrelse -> ELSE IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    PTCOMA          reduce using rule 51 (instrelse -> ELSE IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    PARDER          reduce using rule 51 (instrelse -> ELSE IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    COMA            reduce using rule 51 (instrelse -> ELSE IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    CORDER          reduce using rule 51 (instrelse -> ELSE IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    PT2             reduce using rule 51 (instrelse -> ELSE IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    IMAYOR          reduce using rule 51 (instrelse -> ELSE IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    AB              reduce using rule 51 (instrelse -> ELSE IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)
    LLAVEDER        reduce using rule 51 (instrelse -> ELSE IF logica LLAVEIZQ instruccionesexp LLAVEDER instrelse .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for AND in state 133 resolved as shift
WARNING: shift/reduce conflict for OR in state 133 resolved as shift
WARNING: shift/reduce conflict for MAS in state 155 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 155 resolved as shift
WARNING: shift/reduce conflict for POR in state 155 resolved as shift
WARNING: shift/reduce conflict for DIVIDIDO in state 155 resolved as shift
WARNING: shift/reduce conflict for MOD in state 155 resolved as shift
WARNING: shift/reduce conflict for AS in state 155 resolved as shift
WARNING: shift/reduce conflict for DPT2 in state 155 resolved as shift
WARNING: shift/reduce conflict for PT in state 155 resolved as shift
WARNING: shift/reduce conflict for IGUAL in state 182 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 182 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 182 resolved as shift
WARNING: shift/reduce conflict for MEIGUAL in state 182 resolved as shift
WARNING: shift/reduce conflict for MAIGUAL in state 182 resolved as shift
WARNING: shift/reduce conflict for DIS in state 182 resolved as shift
WARNING: shift/reduce conflict for IGUAL in state 183 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 183 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 183 resolved as shift
WARNING: shift/reduce conflict for MEIGUAL in state 183 resolved as shift
WARNING: shift/reduce conflict for MAIGUAL in state 183 resolved as shift
WARNING: shift/reduce conflict for DIS in state 183 resolved as shift
WARNING: shift/reduce conflict for IGUAL in state 184 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 184 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 184 resolved as shift
WARNING: shift/reduce conflict for MEIGUAL in state 184 resolved as shift
WARNING: shift/reduce conflict for MAIGUAL in state 184 resolved as shift
WARNING: shift/reduce conflict for DIS in state 184 resolved as shift
WARNING: shift/reduce conflict for IGUAL in state 185 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 185 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 185 resolved as shift
WARNING: shift/reduce conflict for MEIGUAL in state 185 resolved as shift
WARNING: shift/reduce conflict for MAIGUAL in state 185 resolved as shift
WARNING: shift/reduce conflict for DIS in state 185 resolved as shift
WARNING: shift/reduce conflict for IGUAL in state 186 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 186 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 186 resolved as shift
WARNING: shift/reduce conflict for MEIGUAL in state 186 resolved as shift
WARNING: shift/reduce conflict for MAIGUAL in state 186 resolved as shift
WARNING: shift/reduce conflict for DIS in state 186 resolved as shift
WARNING: shift/reduce conflict for MAS in state 193 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 193 resolved as shift
WARNING: shift/reduce conflict for POR in state 193 resolved as shift
WARNING: shift/reduce conflict for DIVIDIDO in state 193 resolved as shift
WARNING: shift/reduce conflict for MOD in state 193 resolved as shift
WARNING: shift/reduce conflict for AS in state 193 resolved as shift
WARNING: shift/reduce conflict for DPT2 in state 193 resolved as shift
WARNING: shift/reduce conflict for PT in state 193 resolved as shift
WARNING: shift/reduce conflict for LLAVEDER in state 230 resolved as shift
WARNING: shift/reduce conflict for IGUAL in state 238 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 238 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 238 resolved as shift
WARNING: shift/reduce conflict for MEIGUAL in state 238 resolved as shift
WARNING: shift/reduce conflict for MAIGUAL in state 238 resolved as shift
WARNING: shift/reduce conflict for DIS in state 238 resolved as shift
WARNING: shift/reduce conflict for IMAYOR in state 322 resolved as shift
WARNING: shift/reduce conflict for LLAVEDER in state 330 resolved as shift
WARNING: shift/reduce conflict for LLAVEDER in state 340 resolved as shift
WARNING: reduce/reduce conflict in state 220 resolved using rule (arrtipos -> tipos)
WARNING: rejected rule (arreglos -> tipos) in state 220
WARNING: reduce/reduce conflict in state 266 resolved using rule (instruccionesexp -> instruccion instruccionesexpfin)
WARNING: rejected rule (instruccionesexp -> instruccionesexpfin) in state 266
WARNING: reduce/reduce conflict in state 316 resolved using rule (instrucciones -> instruccion)
WARNING: rejected rule (instruccionesexpfin -> <empty>) in state 316
WARNING: reduce/reduce conflict in state 321 resolved using rule (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER)
WARNING: rejected rule (instrloop -> LOOP LLAVEIZQ instrucciones LLAVEDER) in state 321
