Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    MATCH
    VEC

Grammar

Rule 0     S' -> funciones
Rule 1     funciones -> funcion funciones
Rule 2     funciones -> funcion
Rule 3     funcion -> PUB FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER
Rule 4     funcion -> FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER
Rule 5     funcion -> PUB MODF ID LLAVEIZQ funciones LLAVEDER
Rule 6     funcion -> MODF ID LLAVEIZQ funciones LLAVEDER
Rule 7     funcion -> FN MAIN PARIZQ PARDER LLAVEIZQ instrucciones LLAVEDER
Rule 8     funcion -> STRUCT ID LLAVEIZQ liststruct LLAVEDER
Rule 9     parametros -> parametros2
Rule 10    parametros -> empty
Rule 11    parametros2 -> parametros2 COMA mutable ID DPT tipos
Rule 12    parametros2 -> mutable ID DPT tipos
Rule 13    liststruct -> liststruct COMA ID DPT tipos
Rule 14    liststruct -> ID DPT tipos
Rule 15    tipofun -> MENOS MAYOR tipos
Rule 16    tipofun -> empty
Rule 17    instrucciones -> instruccion instrucciones
Rule 18    instrucciones -> instruccion
Rule 19    instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA
Rule 20    instruccion -> ID listarreglo IGUAL logica PTCOMA
Rule 21    instruccion -> ID PARIZQ listexpr PARDER PTCOMA
Rule 22    instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA
Rule 23    instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse
Rule 24    instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER
Rule 25    instruccion -> BREAK logica PTCOMA
Rule 26    instruccion -> BREAK PTCOMA
Rule 27    instruccion -> RETURN logica PTCOMA
Rule 28    instruccion -> CONTINUE PTCOMA
Rule 29    instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER
Rule 30    instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER
Rule 31    opcionfor -> logica
Rule 32    opcionfor -> ENTERO PT PT logica
Rule 33    opcionfor -> empty
Rule 34    unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER
Rule 35    unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse
Rule 36    unelse -> empty
Rule 37    logica -> logica AND logica
Rule 38    logica -> logica OR logica
Rule 39    logica -> NOT logica
Rule 40    logica -> rel
Rule 41    rel -> rel IGUAL IGUAL rel
Rule 42    rel -> rel MENOR rel
Rule 43    rel -> rel MAYOR rel
Rule 44    rel -> rel MEIGUAL rel
Rule 45    rel -> rel MAIGUAL rel
Rule 46    rel -> rel DIS rel
Rule 47    rel -> expresion
Rule 48    mutable -> MUT
Rule 49    mutable -> empty
Rule 50    pyc -> DPT
Rule 51    pyc -> empty
Rule 52    arrtipos -> tipos
Rule 53    arrtipos -> arreglos
Rule 54    arrtipos -> empty
Rule 55    arreglos -> CORIZQ arreglos PTCOMA ENTERO CORDER
Rule 56    arreglos -> tipos
Rule 57    arreglos -> ID
Rule 58    tipos -> I64
Rule 59    tipos -> F64
Rule 60    tipos -> BOOL
Rule 61    tipos -> CHAR
Rule 62    tipos -> STRING
Rule 63    tipos -> AMP STR
Rule 64    tipos -> USIZE
Rule 65    expresion -> expresion MAS expresion
Rule 66    expresion -> expresion MENOS expresion
Rule 67    expresion -> expresion POR expresion
Rule 68    expresion -> expresion DIVIDIDO expresion
Rule 69    expresion -> expresion MOD expresion
Rule 70    expresion -> expresion AS tipos
Rule 71    expresion -> MENOS expresion
Rule 72    expresion -> PARIZQ logica PARDER
Rule 73    expresion -> ENTERO
Rule 74    expresion -> DECIMAL
Rule 75    expresion -> FORM
Rule 76    expresion -> TRUE
Rule 77    expresion -> FALSE
Rule 78    expresion -> VECM NOT listarreglo
Rule 79    expresion -> ID listarreglo
Rule 80    expresion -> ID PARIZQ listexpr PARDER
Rule 81    expresion -> listarreglo
Rule 82    expresion -> opcionpow DPT DPT expresion
Rule 83    opcionpow -> expresion
Rule 84    opcionpow -> tipos
Rule 85    expresion -> POW PARIZQ ENTERO COMA ENTERO PARDER
Rule 86    expresion -> POWF PARIZQ DECIMAL COMA DECIMAL PARDER
Rule 87    expresion -> LOOP LLAVEIZQ instrucciones LLAVEDER
Rule 88    expresion -> expresion PT TOSTRING PARIZQ PARDER
Rule 89    expresion -> expresion PT SQRT PARIZQ PARDER
Rule 90    expresion -> expresion PT ABS PARIZQ PARDER
Rule 91    expresion -> expresion PT CLONE PARIZQ PARDER
Rule 92    expresion -> expresion PT LEN PARIZQ PARDER
Rule 93    expresion -> expresion PT TOOWNED PARIZQ PARDER
Rule 94    listarreglo -> listarreglo CORIZQ listexpr CORDER
Rule 95    listarreglo -> empty
Rule 96    listexpr -> listexpr COMA expresion
Rule 97    listexpr -> expresion
Rule 98    empty -> <empty>

Terminals, with rules where they appear

ABS                  : 90
AMP                  : 63
AND                  : 37
AS                   : 70
BOOL                 : 60
BREAK                : 25 26
CHAR                 : 61
CLONE                : 91
COMA                 : 11 13 85 86 96
CONTINUE             : 28
CORDER               : 55 94
CORIZQ               : 55 94
DECIMAL              : 74 86 86
DIS                  : 46
DIVIDIDO             : 68
DPT                  : 11 12 13 14 50 82 82
ELSE                 : 34 35
ENTERO               : 32 55 73 85 85
F64                  : 59
FALSE                : 77
FN                   : 3 4 7
FOR                  : 30
FORM                 : 75
I64                  : 58
ID                   : 3 4 5 6 8 11 12 13 14 19 20 21 30 57 79 80
IF                   : 23 35
IGUAL                : 19 20 41 41
IN                   : 30
LEN                  : 92
LET                  : 19
LLAVEDER             : 3 4 5 6 7 8 23 24 29 30 34 35 87
LLAVEIZQ             : 3 4 5 6 7 8 23 24 29 30 34 35 87
LOOP                 : 24 87
MAIGUAL              : 45
MAIN                 : 7
MAS                  : 65
MATCH                : 
MAYOR                : 15 43
MEIGUAL              : 44
MENOR                : 42
MENOS                : 15 66 71
MOD                  : 69
MODF                 : 5 6
MUT                  : 48
NOT                  : 22 39 78
OR                   : 38
PARDER               : 3 4 7 21 22 72 80 85 86 88 89 90 91 92 93
PARIZQ               : 3 4 7 21 22 72 80 85 86 88 89 90 91 92 93
POR                  : 67
POW                  : 85
POWF                 : 86
PRINT                : 22
PT                   : 32 32 88 89 90 91 92 93
PTCOMA               : 19 20 21 22 25 26 27 28 55
PUB                  : 3 5
RETURN               : 27
SQRT                 : 89
STR                  : 63
STRING               : 62
STRUCT               : 8
TOOWNED              : 93
TOSTRING             : 88
TRUE                 : 76
USIZE                : 64
VEC                  : 
VECM                 : 78
WHILE                : 29
error                : 

Nonterminals, with rules where they appear

arreglos             : 53 55
arrtipos             : 19
empty                : 10 16 33 36 49 51 54 95
expresion            : 47 65 65 66 66 67 67 68 68 69 69 70 71 82 83 88 89 90 91 92 93 96 97
funcion              : 1 2
funciones            : 1 5 6 0
instruccion          : 17 18
instrucciones        : 3 4 7 17 23 24 29 30 34 35 87
listarreglo          : 20 78 79 81 94
listexpr             : 21 22 80 94 96
liststruct           : 8 13
logica               : 19 20 23 25 27 29 31 32 35 37 37 38 38 39 72
mutable              : 11 12 19
opcionfor            : 30
opcionpow            : 82
parametros           : 3 4
parametros2          : 9 11
pyc                  : 19
rel                  : 40 41 41 42 42 43 43 44 44 45 45 46 46
tipofun              : 3 4
tipos                : 11 12 13 14 15 52 56 70 84
unelse               : 23 35

Parsing method: LALR

state 0

    (0) S' -> . funciones
    (1) funciones -> . funcion funciones
    (2) funciones -> . funcion
    (3) funcion -> . PUB FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER
    (4) funcion -> . FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER
    (5) funcion -> . PUB MODF ID LLAVEIZQ funciones LLAVEDER
    (6) funcion -> . MODF ID LLAVEIZQ funciones LLAVEDER
    (7) funcion -> . FN MAIN PARIZQ PARDER LLAVEIZQ instrucciones LLAVEDER
    (8) funcion -> . STRUCT ID LLAVEIZQ liststruct LLAVEDER

    PUB             shift and go to state 3
    FN              shift and go to state 4
    MODF            shift and go to state 5
    STRUCT          shift and go to state 6

    funciones                      shift and go to state 1
    funcion                        shift and go to state 2

state 1

    (0) S' -> funciones .



state 2

    (1) funciones -> funcion . funciones
    (2) funciones -> funcion .
    (1) funciones -> . funcion funciones
    (2) funciones -> . funcion
    (3) funcion -> . PUB FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER
    (4) funcion -> . FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER
    (5) funcion -> . PUB MODF ID LLAVEIZQ funciones LLAVEDER
    (6) funcion -> . MODF ID LLAVEIZQ funciones LLAVEDER
    (7) funcion -> . FN MAIN PARIZQ PARDER LLAVEIZQ instrucciones LLAVEDER
    (8) funcion -> . STRUCT ID LLAVEIZQ liststruct LLAVEDER

    $end            reduce using rule 2 (funciones -> funcion .)
    LLAVEDER        reduce using rule 2 (funciones -> funcion .)
    PUB             shift and go to state 3
    FN              shift and go to state 4
    MODF            shift and go to state 5
    STRUCT          shift and go to state 6

    funcion                        shift and go to state 2
    funciones                      shift and go to state 7

state 3

    (3) funcion -> PUB . FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER
    (5) funcion -> PUB . MODF ID LLAVEIZQ funciones LLAVEDER

    FN              shift and go to state 8
    MODF            shift and go to state 9


state 4

    (4) funcion -> FN . ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER
    (7) funcion -> FN . MAIN PARIZQ PARDER LLAVEIZQ instrucciones LLAVEDER

    ID              shift and go to state 10
    MAIN            shift and go to state 11


state 5

    (6) funcion -> MODF . ID LLAVEIZQ funciones LLAVEDER

    ID              shift and go to state 12


state 6

    (8) funcion -> STRUCT . ID LLAVEIZQ liststruct LLAVEDER

    ID              shift and go to state 13


state 7

    (1) funciones -> funcion funciones .

    $end            reduce using rule 1 (funciones -> funcion funciones .)
    LLAVEDER        reduce using rule 1 (funciones -> funcion funciones .)


state 8

    (3) funcion -> PUB FN . ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER

    ID              shift and go to state 14


state 9

    (5) funcion -> PUB MODF . ID LLAVEIZQ funciones LLAVEDER

    ID              shift and go to state 15


state 10

    (4) funcion -> FN ID . PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER

    PARIZQ          shift and go to state 16


state 11

    (7) funcion -> FN MAIN . PARIZQ PARDER LLAVEIZQ instrucciones LLAVEDER

    PARIZQ          shift and go to state 17


state 12

    (6) funcion -> MODF ID . LLAVEIZQ funciones LLAVEDER

    LLAVEIZQ        shift and go to state 18


state 13

    (8) funcion -> STRUCT ID . LLAVEIZQ liststruct LLAVEDER

    LLAVEIZQ        shift and go to state 19


state 14

    (3) funcion -> PUB FN ID . PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER

    PARIZQ          shift and go to state 20


state 15

    (5) funcion -> PUB MODF ID . LLAVEIZQ funciones LLAVEDER

    LLAVEIZQ        shift and go to state 21


state 16

    (4) funcion -> FN ID PARIZQ . parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER
    (9) parametros -> . parametros2
    (10) parametros -> . empty
    (11) parametros2 -> . parametros2 COMA mutable ID DPT tipos
    (12) parametros2 -> . mutable ID DPT tipos
    (98) empty -> .
    (48) mutable -> . MUT
    (49) mutable -> . empty

    PARDER          reduce using rule 98 (empty -> .)
    ID              reduce using rule 98 (empty -> .)
    MUT             shift and go to state 26

    parametros                     shift and go to state 22
    parametros2                    shift and go to state 23
    empty                          shift and go to state 24
    mutable                        shift and go to state 25

state 17

    (7) funcion -> FN MAIN PARIZQ . PARDER LLAVEIZQ instrucciones LLAVEDER

    PARDER          shift and go to state 27


state 18

    (6) funcion -> MODF ID LLAVEIZQ . funciones LLAVEDER
    (1) funciones -> . funcion funciones
    (2) funciones -> . funcion
    (3) funcion -> . PUB FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER
    (4) funcion -> . FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER
    (5) funcion -> . PUB MODF ID LLAVEIZQ funciones LLAVEDER
    (6) funcion -> . MODF ID LLAVEIZQ funciones LLAVEDER
    (7) funcion -> . FN MAIN PARIZQ PARDER LLAVEIZQ instrucciones LLAVEDER
    (8) funcion -> . STRUCT ID LLAVEIZQ liststruct LLAVEDER

    PUB             shift and go to state 3
    FN              shift and go to state 4
    MODF            shift and go to state 5
    STRUCT          shift and go to state 6

    funciones                      shift and go to state 28
    funcion                        shift and go to state 2

state 19

    (8) funcion -> STRUCT ID LLAVEIZQ . liststruct LLAVEDER
    (13) liststruct -> . liststruct COMA ID DPT tipos
    (14) liststruct -> . ID DPT tipos

    ID              shift and go to state 29

    liststruct                     shift and go to state 30

state 20

    (3) funcion -> PUB FN ID PARIZQ . parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER
    (9) parametros -> . parametros2
    (10) parametros -> . empty
    (11) parametros2 -> . parametros2 COMA mutable ID DPT tipos
    (12) parametros2 -> . mutable ID DPT tipos
    (98) empty -> .
    (48) mutable -> . MUT
    (49) mutable -> . empty

    PARDER          reduce using rule 98 (empty -> .)
    ID              reduce using rule 98 (empty -> .)
    MUT             shift and go to state 26

    parametros                     shift and go to state 31
    parametros2                    shift and go to state 23
    empty                          shift and go to state 24
    mutable                        shift and go to state 25

state 21

    (5) funcion -> PUB MODF ID LLAVEIZQ . funciones LLAVEDER
    (1) funciones -> . funcion funciones
    (2) funciones -> . funcion
    (3) funcion -> . PUB FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER
    (4) funcion -> . FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER
    (5) funcion -> . PUB MODF ID LLAVEIZQ funciones LLAVEDER
    (6) funcion -> . MODF ID LLAVEIZQ funciones LLAVEDER
    (7) funcion -> . FN MAIN PARIZQ PARDER LLAVEIZQ instrucciones LLAVEDER
    (8) funcion -> . STRUCT ID LLAVEIZQ liststruct LLAVEDER

    PUB             shift and go to state 3
    FN              shift and go to state 4
    MODF            shift and go to state 5
    STRUCT          shift and go to state 6

    funciones                      shift and go to state 32
    funcion                        shift and go to state 2

state 22

    (4) funcion -> FN ID PARIZQ parametros . PARDER tipofun LLAVEIZQ instrucciones LLAVEDER

    PARDER          shift and go to state 33


state 23

    (9) parametros -> parametros2 .
    (11) parametros2 -> parametros2 . COMA mutable ID DPT tipos

    PARDER          reduce using rule 9 (parametros -> parametros2 .)
    COMA            shift and go to state 34


state 24

    (10) parametros -> empty .
    (49) mutable -> empty .

    PARDER          reduce using rule 10 (parametros -> empty .)
    ID              reduce using rule 49 (mutable -> empty .)


state 25

    (12) parametros2 -> mutable . ID DPT tipos

    ID              shift and go to state 35


state 26

    (48) mutable -> MUT .

    ID              reduce using rule 48 (mutable -> MUT .)


state 27

    (7) funcion -> FN MAIN PARIZQ PARDER . LLAVEIZQ instrucciones LLAVEDER

    LLAVEIZQ        shift and go to state 36


state 28

    (6) funcion -> MODF ID LLAVEIZQ funciones . LLAVEDER

    LLAVEDER        shift and go to state 37


state 29

    (14) liststruct -> ID . DPT tipos

    DPT             shift and go to state 38


state 30

    (8) funcion -> STRUCT ID LLAVEIZQ liststruct . LLAVEDER
    (13) liststruct -> liststruct . COMA ID DPT tipos

    LLAVEDER        shift and go to state 39
    COMA            shift and go to state 40


state 31

    (3) funcion -> PUB FN ID PARIZQ parametros . PARDER tipofun LLAVEIZQ instrucciones LLAVEDER

    PARDER          shift and go to state 41


state 32

    (5) funcion -> PUB MODF ID LLAVEIZQ funciones . LLAVEDER

    LLAVEDER        shift and go to state 42


state 33

    (4) funcion -> FN ID PARIZQ parametros PARDER . tipofun LLAVEIZQ instrucciones LLAVEDER
    (15) tipofun -> . MENOS MAYOR tipos
    (16) tipofun -> . empty
    (98) empty -> .

    MENOS           shift and go to state 44
    LLAVEIZQ        reduce using rule 98 (empty -> .)

    tipofun                        shift and go to state 43
    empty                          shift and go to state 45

state 34

    (11) parametros2 -> parametros2 COMA . mutable ID DPT tipos
    (48) mutable -> . MUT
    (49) mutable -> . empty
    (98) empty -> .

    MUT             shift and go to state 26
    ID              reduce using rule 98 (empty -> .)

    mutable                        shift and go to state 46
    empty                          shift and go to state 47

state 35

    (12) parametros2 -> mutable ID . DPT tipos

    DPT             shift and go to state 48


state 36

    (7) funcion -> FN MAIN PARIZQ PARDER LLAVEIZQ . instrucciones LLAVEDER
    (17) instrucciones -> . instruccion instrucciones
    (18) instrucciones -> . instruccion
    (19) instruccion -> . LET mutable ID pyc arrtipos IGUAL logica PTCOMA
    (20) instruccion -> . ID listarreglo IGUAL logica PTCOMA
    (21) instruccion -> . ID PARIZQ listexpr PARDER PTCOMA
    (22) instruccion -> . PRINT NOT PARIZQ listexpr PARDER PTCOMA
    (23) instruccion -> . IF logica LLAVEIZQ instrucciones LLAVEDER unelse
    (24) instruccion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (25) instruccion -> . BREAK logica PTCOMA
    (26) instruccion -> . BREAK PTCOMA
    (27) instruccion -> . RETURN logica PTCOMA
    (28) instruccion -> . CONTINUE PTCOMA
    (29) instruccion -> . WHILE logica LLAVEIZQ instrucciones LLAVEDER
    (30) instruccion -> . FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER

    LET             shift and go to state 51
    ID              shift and go to state 52
    PRINT           shift and go to state 53
    IF              shift and go to state 54
    LOOP            shift and go to state 55
    BREAK           shift and go to state 56
    RETURN          shift and go to state 57
    CONTINUE        shift and go to state 58
    WHILE           shift and go to state 59
    FOR             shift and go to state 60

    instrucciones                  shift and go to state 49
    instruccion                    shift and go to state 50

state 37

    (6) funcion -> MODF ID LLAVEIZQ funciones LLAVEDER .

    PUB             reduce using rule 6 (funcion -> MODF ID LLAVEIZQ funciones LLAVEDER .)
    FN              reduce using rule 6 (funcion -> MODF ID LLAVEIZQ funciones LLAVEDER .)
    MODF            reduce using rule 6 (funcion -> MODF ID LLAVEIZQ funciones LLAVEDER .)
    STRUCT          reduce using rule 6 (funcion -> MODF ID LLAVEIZQ funciones LLAVEDER .)
    $end            reduce using rule 6 (funcion -> MODF ID LLAVEIZQ funciones LLAVEDER .)
    LLAVEDER        reduce using rule 6 (funcion -> MODF ID LLAVEIZQ funciones LLAVEDER .)


state 38

    (14) liststruct -> ID DPT . tipos
    (58) tipos -> . I64
    (59) tipos -> . F64
    (60) tipos -> . BOOL
    (61) tipos -> . CHAR
    (62) tipos -> . STRING
    (63) tipos -> . AMP STR
    (64) tipos -> . USIZE

    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

    tipos                          shift and go to state 61

state 39

    (8) funcion -> STRUCT ID LLAVEIZQ liststruct LLAVEDER .

    PUB             reduce using rule 8 (funcion -> STRUCT ID LLAVEIZQ liststruct LLAVEDER .)
    FN              reduce using rule 8 (funcion -> STRUCT ID LLAVEIZQ liststruct LLAVEDER .)
    MODF            reduce using rule 8 (funcion -> STRUCT ID LLAVEIZQ liststruct LLAVEDER .)
    STRUCT          reduce using rule 8 (funcion -> STRUCT ID LLAVEIZQ liststruct LLAVEDER .)
    $end            reduce using rule 8 (funcion -> STRUCT ID LLAVEIZQ liststruct LLAVEDER .)
    LLAVEDER        reduce using rule 8 (funcion -> STRUCT ID LLAVEIZQ liststruct LLAVEDER .)


state 40

    (13) liststruct -> liststruct COMA . ID DPT tipos

    ID              shift and go to state 69


state 41

    (3) funcion -> PUB FN ID PARIZQ parametros PARDER . tipofun LLAVEIZQ instrucciones LLAVEDER
    (15) tipofun -> . MENOS MAYOR tipos
    (16) tipofun -> . empty
    (98) empty -> .

    MENOS           shift and go to state 44
    LLAVEIZQ        reduce using rule 98 (empty -> .)

    tipofun                        shift and go to state 70
    empty                          shift and go to state 45

state 42

    (5) funcion -> PUB MODF ID LLAVEIZQ funciones LLAVEDER .

    PUB             reduce using rule 5 (funcion -> PUB MODF ID LLAVEIZQ funciones LLAVEDER .)
    FN              reduce using rule 5 (funcion -> PUB MODF ID LLAVEIZQ funciones LLAVEDER .)
    MODF            reduce using rule 5 (funcion -> PUB MODF ID LLAVEIZQ funciones LLAVEDER .)
    STRUCT          reduce using rule 5 (funcion -> PUB MODF ID LLAVEIZQ funciones LLAVEDER .)
    $end            reduce using rule 5 (funcion -> PUB MODF ID LLAVEIZQ funciones LLAVEDER .)
    LLAVEDER        reduce using rule 5 (funcion -> PUB MODF ID LLAVEIZQ funciones LLAVEDER .)


state 43

    (4) funcion -> FN ID PARIZQ parametros PARDER tipofun . LLAVEIZQ instrucciones LLAVEDER

    LLAVEIZQ        shift and go to state 71


state 44

    (15) tipofun -> MENOS . MAYOR tipos

    MAYOR           shift and go to state 72


state 45

    (16) tipofun -> empty .

    LLAVEIZQ        reduce using rule 16 (tipofun -> empty .)


state 46

    (11) parametros2 -> parametros2 COMA mutable . ID DPT tipos

    ID              shift and go to state 73


state 47

    (49) mutable -> empty .

    ID              reduce using rule 49 (mutable -> empty .)


state 48

    (12) parametros2 -> mutable ID DPT . tipos
    (58) tipos -> . I64
    (59) tipos -> . F64
    (60) tipos -> . BOOL
    (61) tipos -> . CHAR
    (62) tipos -> . STRING
    (63) tipos -> . AMP STR
    (64) tipos -> . USIZE

    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

    tipos                          shift and go to state 74

state 49

    (7) funcion -> FN MAIN PARIZQ PARDER LLAVEIZQ instrucciones . LLAVEDER

    LLAVEDER        shift and go to state 75


state 50

    (17) instrucciones -> instruccion . instrucciones
    (18) instrucciones -> instruccion .
    (17) instrucciones -> . instruccion instrucciones
    (18) instrucciones -> . instruccion
    (19) instruccion -> . LET mutable ID pyc arrtipos IGUAL logica PTCOMA
    (20) instruccion -> . ID listarreglo IGUAL logica PTCOMA
    (21) instruccion -> . ID PARIZQ listexpr PARDER PTCOMA
    (22) instruccion -> . PRINT NOT PARIZQ listexpr PARDER PTCOMA
    (23) instruccion -> . IF logica LLAVEIZQ instrucciones LLAVEDER unelse
    (24) instruccion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (25) instruccion -> . BREAK logica PTCOMA
    (26) instruccion -> . BREAK PTCOMA
    (27) instruccion -> . RETURN logica PTCOMA
    (28) instruccion -> . CONTINUE PTCOMA
    (29) instruccion -> . WHILE logica LLAVEIZQ instrucciones LLAVEDER
    (30) instruccion -> . FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER

    LLAVEDER        reduce using rule 18 (instrucciones -> instruccion .)
    LET             shift and go to state 51
    ID              shift and go to state 52
    PRINT           shift and go to state 53
    IF              shift and go to state 54
    LOOP            shift and go to state 55
    BREAK           shift and go to state 56
    RETURN          shift and go to state 57
    CONTINUE        shift and go to state 58
    WHILE           shift and go to state 59
    FOR             shift and go to state 60

    instruccion                    shift and go to state 50
    instrucciones                  shift and go to state 76

state 51

    (19) instruccion -> LET . mutable ID pyc arrtipos IGUAL logica PTCOMA
    (48) mutable -> . MUT
    (49) mutable -> . empty
    (98) empty -> .

    MUT             shift and go to state 26
    ID              reduce using rule 98 (empty -> .)

    mutable                        shift and go to state 77
    empty                          shift and go to state 47

state 52

    (20) instruccion -> ID . listarreglo IGUAL logica PTCOMA
    (21) instruccion -> ID . PARIZQ listexpr PARDER PTCOMA
    (94) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (95) listarreglo -> . empty
    (98) empty -> .

    PARIZQ          shift and go to state 79
    IGUAL           reduce using rule 98 (empty -> .)
    CORIZQ          reduce using rule 98 (empty -> .)

    listarreglo                    shift and go to state 78
    empty                          shift and go to state 80

state 53

    (22) instruccion -> PRINT . NOT PARIZQ listexpr PARDER PTCOMA

    NOT             shift and go to state 81


state 54

    (23) instruccion -> IF . logica LLAVEIZQ instrucciones LLAVEDER unelse
    (37) logica -> . logica AND logica
    (38) logica -> . logica OR logica
    (39) logica -> . NOT logica
    (40) logica -> . rel
    (41) rel -> . rel IGUAL IGUAL rel
    (42) rel -> . rel MENOR rel
    (43) rel -> . rel MAYOR rel
    (44) rel -> . rel MEIGUAL rel
    (45) rel -> . rel MAIGUAL rel
    (46) rel -> . rel DIS rel
    (47) rel -> . expresion
    (65) expresion -> . expresion MAS expresion
    (66) expresion -> . expresion MENOS expresion
    (67) expresion -> . expresion POR expresion
    (68) expresion -> . expresion DIVIDIDO expresion
    (69) expresion -> . expresion MOD expresion
    (70) expresion -> . expresion AS tipos
    (71) expresion -> . MENOS expresion
    (72) expresion -> . PARIZQ logica PARDER
    (73) expresion -> . ENTERO
    (74) expresion -> . DECIMAL
    (75) expresion -> . FORM
    (76) expresion -> . TRUE
    (77) expresion -> . FALSE
    (78) expresion -> . VECM NOT listarreglo
    (79) expresion -> . ID listarreglo
    (80) expresion -> . ID PARIZQ listexpr PARDER
    (81) expresion -> . listarreglo
    (82) expresion -> . opcionpow DPT DPT expresion
    (85) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (86) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (87) expresion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (88) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (89) expresion -> . expresion PT SQRT PARIZQ PARDER
    (90) expresion -> . expresion PT ABS PARIZQ PARDER
    (91) expresion -> . expresion PT CLONE PARIZQ PARDER
    (92) expresion -> . expresion PT LEN PARIZQ PARDER
    (93) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (94) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (95) listarreglo -> . empty
    (83) opcionpow -> . expresion
    (84) opcionpow -> . tipos
    (98) empty -> .
    (58) tipos -> . I64
    (59) tipos -> . F64
    (60) tipos -> . BOOL
    (61) tipos -> . CHAR
    (62) tipos -> . STRING
    (63) tipos -> . AMP STR
    (64) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    NOT             shift and go to state 83
    MENOS           shift and go to state 86
    PARIZQ          shift and go to state 88
    ENTERO          shift and go to state 89
    DECIMAL         shift and go to state 90
    FORM            shift and go to state 91
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    VECM            shift and go to state 94
    ID              shift and go to state 96
    POW             shift and go to state 98
    POWF            shift and go to state 99
    LOOP            shift and go to state 100
    CORIZQ          reduce using rule 98 (empty -> .)
    MAS             reduce using rule 98 (empty -> .)
    POR             reduce using rule 98 (empty -> .)
    DIVIDIDO        reduce using rule 98 (empty -> .)
    MOD             reduce using rule 98 (empty -> .)
    AS              reduce using rule 98 (empty -> .)
    PT              reduce using rule 98 (empty -> .)
    IGUAL           reduce using rule 98 (empty -> .)
    MENOR           reduce using rule 98 (empty -> .)
    MAYOR           reduce using rule 98 (empty -> .)
    MEIGUAL         reduce using rule 98 (empty -> .)
    MAIGUAL         reduce using rule 98 (empty -> .)
    DIS             reduce using rule 98 (empty -> .)
    LLAVEIZQ        reduce using rule 98 (empty -> .)
    AND             reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    DPT             reduce using rule 98 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 98 (empty -> .) ]

    logica                         shift and go to state 82
    rel                            shift and go to state 84
    expresion                      shift and go to state 85
    tipos                          shift and go to state 87
    listarreglo                    shift and go to state 95
    opcionpow                      shift and go to state 97
    empty                          shift and go to state 80

state 55

    (24) instruccion -> LOOP . LLAVEIZQ instrucciones LLAVEDER

    LLAVEIZQ        shift and go to state 101


state 56

    (25) instruccion -> BREAK . logica PTCOMA
    (26) instruccion -> BREAK . PTCOMA
    (37) logica -> . logica AND logica
    (38) logica -> . logica OR logica
    (39) logica -> . NOT logica
    (40) logica -> . rel
    (41) rel -> . rel IGUAL IGUAL rel
    (42) rel -> . rel MENOR rel
    (43) rel -> . rel MAYOR rel
    (44) rel -> . rel MEIGUAL rel
    (45) rel -> . rel MAIGUAL rel
    (46) rel -> . rel DIS rel
    (47) rel -> . expresion
    (65) expresion -> . expresion MAS expresion
    (66) expresion -> . expresion MENOS expresion
    (67) expresion -> . expresion POR expresion
    (68) expresion -> . expresion DIVIDIDO expresion
    (69) expresion -> . expresion MOD expresion
    (70) expresion -> . expresion AS tipos
    (71) expresion -> . MENOS expresion
    (72) expresion -> . PARIZQ logica PARDER
    (73) expresion -> . ENTERO
    (74) expresion -> . DECIMAL
    (75) expresion -> . FORM
    (76) expresion -> . TRUE
    (77) expresion -> . FALSE
    (78) expresion -> . VECM NOT listarreglo
    (79) expresion -> . ID listarreglo
    (80) expresion -> . ID PARIZQ listexpr PARDER
    (81) expresion -> . listarreglo
    (82) expresion -> . opcionpow DPT DPT expresion
    (85) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (86) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (87) expresion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (88) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (89) expresion -> . expresion PT SQRT PARIZQ PARDER
    (90) expresion -> . expresion PT ABS PARIZQ PARDER
    (91) expresion -> . expresion PT CLONE PARIZQ PARDER
    (92) expresion -> . expresion PT LEN PARIZQ PARDER
    (93) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (94) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (95) listarreglo -> . empty
    (83) opcionpow -> . expresion
    (84) opcionpow -> . tipos
    (98) empty -> .
    (58) tipos -> . I64
    (59) tipos -> . F64
    (60) tipos -> . BOOL
    (61) tipos -> . CHAR
    (62) tipos -> . STRING
    (63) tipos -> . AMP STR
    (64) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for PTCOMA resolved as shift
    PTCOMA          shift and go to state 103
    NOT             shift and go to state 83
    MENOS           shift and go to state 86
    PARIZQ          shift and go to state 88
    ENTERO          shift and go to state 89
    DECIMAL         shift and go to state 90
    FORM            shift and go to state 91
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    VECM            shift and go to state 94
    ID              shift and go to state 96
    POW             shift and go to state 98
    POWF            shift and go to state 99
    LOOP            shift and go to state 100
    CORIZQ          reduce using rule 98 (empty -> .)
    MAS             reduce using rule 98 (empty -> .)
    POR             reduce using rule 98 (empty -> .)
    DIVIDIDO        reduce using rule 98 (empty -> .)
    MOD             reduce using rule 98 (empty -> .)
    AS              reduce using rule 98 (empty -> .)
    PT              reduce using rule 98 (empty -> .)
    IGUAL           reduce using rule 98 (empty -> .)
    MENOR           reduce using rule 98 (empty -> .)
    MAYOR           reduce using rule 98 (empty -> .)
    MEIGUAL         reduce using rule 98 (empty -> .)
    MAIGUAL         reduce using rule 98 (empty -> .)
    DIS             reduce using rule 98 (empty -> .)
    AND             reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    DPT             reduce using rule 98 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 98 (empty -> .) ]
  ! PTCOMA          [ reduce using rule 98 (empty -> .) ]

    logica                         shift and go to state 102
    rel                            shift and go to state 84
    expresion                      shift and go to state 85
    tipos                          shift and go to state 87
    listarreglo                    shift and go to state 95
    opcionpow                      shift and go to state 97
    empty                          shift and go to state 80

state 57

    (27) instruccion -> RETURN . logica PTCOMA
    (37) logica -> . logica AND logica
    (38) logica -> . logica OR logica
    (39) logica -> . NOT logica
    (40) logica -> . rel
    (41) rel -> . rel IGUAL IGUAL rel
    (42) rel -> . rel MENOR rel
    (43) rel -> . rel MAYOR rel
    (44) rel -> . rel MEIGUAL rel
    (45) rel -> . rel MAIGUAL rel
    (46) rel -> . rel DIS rel
    (47) rel -> . expresion
    (65) expresion -> . expresion MAS expresion
    (66) expresion -> . expresion MENOS expresion
    (67) expresion -> . expresion POR expresion
    (68) expresion -> . expresion DIVIDIDO expresion
    (69) expresion -> . expresion MOD expresion
    (70) expresion -> . expresion AS tipos
    (71) expresion -> . MENOS expresion
    (72) expresion -> . PARIZQ logica PARDER
    (73) expresion -> . ENTERO
    (74) expresion -> . DECIMAL
    (75) expresion -> . FORM
    (76) expresion -> . TRUE
    (77) expresion -> . FALSE
    (78) expresion -> . VECM NOT listarreglo
    (79) expresion -> . ID listarreglo
    (80) expresion -> . ID PARIZQ listexpr PARDER
    (81) expresion -> . listarreglo
    (82) expresion -> . opcionpow DPT DPT expresion
    (85) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (86) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (87) expresion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (88) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (89) expresion -> . expresion PT SQRT PARIZQ PARDER
    (90) expresion -> . expresion PT ABS PARIZQ PARDER
    (91) expresion -> . expresion PT CLONE PARIZQ PARDER
    (92) expresion -> . expresion PT LEN PARIZQ PARDER
    (93) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (94) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (95) listarreglo -> . empty
    (83) opcionpow -> . expresion
    (84) opcionpow -> . tipos
    (98) empty -> .
    (58) tipos -> . I64
    (59) tipos -> . F64
    (60) tipos -> . BOOL
    (61) tipos -> . CHAR
    (62) tipos -> . STRING
    (63) tipos -> . AMP STR
    (64) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    NOT             shift and go to state 83
    MENOS           shift and go to state 86
    PARIZQ          shift and go to state 88
    ENTERO          shift and go to state 89
    DECIMAL         shift and go to state 90
    FORM            shift and go to state 91
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    VECM            shift and go to state 94
    ID              shift and go to state 96
    POW             shift and go to state 98
    POWF            shift and go to state 99
    LOOP            shift and go to state 100
    CORIZQ          reduce using rule 98 (empty -> .)
    MAS             reduce using rule 98 (empty -> .)
    POR             reduce using rule 98 (empty -> .)
    DIVIDIDO        reduce using rule 98 (empty -> .)
    MOD             reduce using rule 98 (empty -> .)
    AS              reduce using rule 98 (empty -> .)
    PT              reduce using rule 98 (empty -> .)
    IGUAL           reduce using rule 98 (empty -> .)
    MENOR           reduce using rule 98 (empty -> .)
    MAYOR           reduce using rule 98 (empty -> .)
    MEIGUAL         reduce using rule 98 (empty -> .)
    MAIGUAL         reduce using rule 98 (empty -> .)
    DIS             reduce using rule 98 (empty -> .)
    PTCOMA          reduce using rule 98 (empty -> .)
    AND             reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    DPT             reduce using rule 98 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 98 (empty -> .) ]

    logica                         shift and go to state 104
    rel                            shift and go to state 84
    expresion                      shift and go to state 85
    tipos                          shift and go to state 87
    listarreglo                    shift and go to state 95
    opcionpow                      shift and go to state 97
    empty                          shift and go to state 80

state 58

    (28) instruccion -> CONTINUE . PTCOMA

    PTCOMA          shift and go to state 105


state 59

    (29) instruccion -> WHILE . logica LLAVEIZQ instrucciones LLAVEDER
    (37) logica -> . logica AND logica
    (38) logica -> . logica OR logica
    (39) logica -> . NOT logica
    (40) logica -> . rel
    (41) rel -> . rel IGUAL IGUAL rel
    (42) rel -> . rel MENOR rel
    (43) rel -> . rel MAYOR rel
    (44) rel -> . rel MEIGUAL rel
    (45) rel -> . rel MAIGUAL rel
    (46) rel -> . rel DIS rel
    (47) rel -> . expresion
    (65) expresion -> . expresion MAS expresion
    (66) expresion -> . expresion MENOS expresion
    (67) expresion -> . expresion POR expresion
    (68) expresion -> . expresion DIVIDIDO expresion
    (69) expresion -> . expresion MOD expresion
    (70) expresion -> . expresion AS tipos
    (71) expresion -> . MENOS expresion
    (72) expresion -> . PARIZQ logica PARDER
    (73) expresion -> . ENTERO
    (74) expresion -> . DECIMAL
    (75) expresion -> . FORM
    (76) expresion -> . TRUE
    (77) expresion -> . FALSE
    (78) expresion -> . VECM NOT listarreglo
    (79) expresion -> . ID listarreglo
    (80) expresion -> . ID PARIZQ listexpr PARDER
    (81) expresion -> . listarreglo
    (82) expresion -> . opcionpow DPT DPT expresion
    (85) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (86) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (87) expresion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (88) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (89) expresion -> . expresion PT SQRT PARIZQ PARDER
    (90) expresion -> . expresion PT ABS PARIZQ PARDER
    (91) expresion -> . expresion PT CLONE PARIZQ PARDER
    (92) expresion -> . expresion PT LEN PARIZQ PARDER
    (93) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (94) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (95) listarreglo -> . empty
    (83) opcionpow -> . expresion
    (84) opcionpow -> . tipos
    (98) empty -> .
    (58) tipos -> . I64
    (59) tipos -> . F64
    (60) tipos -> . BOOL
    (61) tipos -> . CHAR
    (62) tipos -> . STRING
    (63) tipos -> . AMP STR
    (64) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    NOT             shift and go to state 83
    MENOS           shift and go to state 86
    PARIZQ          shift and go to state 88
    ENTERO          shift and go to state 89
    DECIMAL         shift and go to state 90
    FORM            shift and go to state 91
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    VECM            shift and go to state 94
    ID              shift and go to state 96
    POW             shift and go to state 98
    POWF            shift and go to state 99
    LOOP            shift and go to state 100
    CORIZQ          reduce using rule 98 (empty -> .)
    MAS             reduce using rule 98 (empty -> .)
    POR             reduce using rule 98 (empty -> .)
    DIVIDIDO        reduce using rule 98 (empty -> .)
    MOD             reduce using rule 98 (empty -> .)
    AS              reduce using rule 98 (empty -> .)
    PT              reduce using rule 98 (empty -> .)
    IGUAL           reduce using rule 98 (empty -> .)
    MENOR           reduce using rule 98 (empty -> .)
    MAYOR           reduce using rule 98 (empty -> .)
    MEIGUAL         reduce using rule 98 (empty -> .)
    MAIGUAL         reduce using rule 98 (empty -> .)
    DIS             reduce using rule 98 (empty -> .)
    LLAVEIZQ        reduce using rule 98 (empty -> .)
    AND             reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    DPT             reduce using rule 98 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 98 (empty -> .) ]

    logica                         shift and go to state 106
    rel                            shift and go to state 84
    expresion                      shift and go to state 85
    tipos                          shift and go to state 87
    listarreglo                    shift and go to state 95
    opcionpow                      shift and go to state 97
    empty                          shift and go to state 80

state 60

    (30) instruccion -> FOR . ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER

    ID              shift and go to state 107


state 61

    (14) liststruct -> ID DPT tipos .

    LLAVEDER        reduce using rule 14 (liststruct -> ID DPT tipos .)
    COMA            reduce using rule 14 (liststruct -> ID DPT tipos .)


state 62

    (58) tipos -> I64 .

    LLAVEDER        reduce using rule 58 (tipos -> I64 .)
    COMA            reduce using rule 58 (tipos -> I64 .)
    PARDER          reduce using rule 58 (tipos -> I64 .)
    DPT             reduce using rule 58 (tipos -> I64 .)
    LLAVEIZQ        reduce using rule 58 (tipos -> I64 .)
    MAS             reduce using rule 58 (tipos -> I64 .)
    MENOS           reduce using rule 58 (tipos -> I64 .)
    POR             reduce using rule 58 (tipos -> I64 .)
    DIVIDIDO        reduce using rule 58 (tipos -> I64 .)
    MOD             reduce using rule 58 (tipos -> I64 .)
    AS              reduce using rule 58 (tipos -> I64 .)
    PT              reduce using rule 58 (tipos -> I64 .)
    IGUAL           reduce using rule 58 (tipos -> I64 .)
    MENOR           reduce using rule 58 (tipos -> I64 .)
    MAYOR           reduce using rule 58 (tipos -> I64 .)
    MEIGUAL         reduce using rule 58 (tipos -> I64 .)
    MAIGUAL         reduce using rule 58 (tipos -> I64 .)
    DIS             reduce using rule 58 (tipos -> I64 .)
    AND             reduce using rule 58 (tipos -> I64 .)
    OR              reduce using rule 58 (tipos -> I64 .)
    PTCOMA          reduce using rule 58 (tipos -> I64 .)
    CORDER          reduce using rule 58 (tipos -> I64 .)


state 63

    (59) tipos -> F64 .

    LLAVEDER        reduce using rule 59 (tipos -> F64 .)
    COMA            reduce using rule 59 (tipos -> F64 .)
    PARDER          reduce using rule 59 (tipos -> F64 .)
    DPT             reduce using rule 59 (tipos -> F64 .)
    LLAVEIZQ        reduce using rule 59 (tipos -> F64 .)
    MAS             reduce using rule 59 (tipos -> F64 .)
    MENOS           reduce using rule 59 (tipos -> F64 .)
    POR             reduce using rule 59 (tipos -> F64 .)
    DIVIDIDO        reduce using rule 59 (tipos -> F64 .)
    MOD             reduce using rule 59 (tipos -> F64 .)
    AS              reduce using rule 59 (tipos -> F64 .)
    PT              reduce using rule 59 (tipos -> F64 .)
    IGUAL           reduce using rule 59 (tipos -> F64 .)
    MENOR           reduce using rule 59 (tipos -> F64 .)
    MAYOR           reduce using rule 59 (tipos -> F64 .)
    MEIGUAL         reduce using rule 59 (tipos -> F64 .)
    MAIGUAL         reduce using rule 59 (tipos -> F64 .)
    DIS             reduce using rule 59 (tipos -> F64 .)
    AND             reduce using rule 59 (tipos -> F64 .)
    OR              reduce using rule 59 (tipos -> F64 .)
    PTCOMA          reduce using rule 59 (tipos -> F64 .)
    CORDER          reduce using rule 59 (tipos -> F64 .)


state 64

    (60) tipos -> BOOL .

    LLAVEDER        reduce using rule 60 (tipos -> BOOL .)
    COMA            reduce using rule 60 (tipos -> BOOL .)
    PARDER          reduce using rule 60 (tipos -> BOOL .)
    DPT             reduce using rule 60 (tipos -> BOOL .)
    LLAVEIZQ        reduce using rule 60 (tipos -> BOOL .)
    MAS             reduce using rule 60 (tipos -> BOOL .)
    MENOS           reduce using rule 60 (tipos -> BOOL .)
    POR             reduce using rule 60 (tipos -> BOOL .)
    DIVIDIDO        reduce using rule 60 (tipos -> BOOL .)
    MOD             reduce using rule 60 (tipos -> BOOL .)
    AS              reduce using rule 60 (tipos -> BOOL .)
    PT              reduce using rule 60 (tipos -> BOOL .)
    IGUAL           reduce using rule 60 (tipos -> BOOL .)
    MENOR           reduce using rule 60 (tipos -> BOOL .)
    MAYOR           reduce using rule 60 (tipos -> BOOL .)
    MEIGUAL         reduce using rule 60 (tipos -> BOOL .)
    MAIGUAL         reduce using rule 60 (tipos -> BOOL .)
    DIS             reduce using rule 60 (tipos -> BOOL .)
    AND             reduce using rule 60 (tipos -> BOOL .)
    OR              reduce using rule 60 (tipos -> BOOL .)
    PTCOMA          reduce using rule 60 (tipos -> BOOL .)
    CORDER          reduce using rule 60 (tipos -> BOOL .)


state 65

    (61) tipos -> CHAR .

    LLAVEDER        reduce using rule 61 (tipos -> CHAR .)
    COMA            reduce using rule 61 (tipos -> CHAR .)
    PARDER          reduce using rule 61 (tipos -> CHAR .)
    DPT             reduce using rule 61 (tipos -> CHAR .)
    LLAVEIZQ        reduce using rule 61 (tipos -> CHAR .)
    MAS             reduce using rule 61 (tipos -> CHAR .)
    MENOS           reduce using rule 61 (tipos -> CHAR .)
    POR             reduce using rule 61 (tipos -> CHAR .)
    DIVIDIDO        reduce using rule 61 (tipos -> CHAR .)
    MOD             reduce using rule 61 (tipos -> CHAR .)
    AS              reduce using rule 61 (tipos -> CHAR .)
    PT              reduce using rule 61 (tipos -> CHAR .)
    IGUAL           reduce using rule 61 (tipos -> CHAR .)
    MENOR           reduce using rule 61 (tipos -> CHAR .)
    MAYOR           reduce using rule 61 (tipos -> CHAR .)
    MEIGUAL         reduce using rule 61 (tipos -> CHAR .)
    MAIGUAL         reduce using rule 61 (tipos -> CHAR .)
    DIS             reduce using rule 61 (tipos -> CHAR .)
    AND             reduce using rule 61 (tipos -> CHAR .)
    OR              reduce using rule 61 (tipos -> CHAR .)
    PTCOMA          reduce using rule 61 (tipos -> CHAR .)
    CORDER          reduce using rule 61 (tipos -> CHAR .)


state 66

    (62) tipos -> STRING .

    LLAVEDER        reduce using rule 62 (tipos -> STRING .)
    COMA            reduce using rule 62 (tipos -> STRING .)
    PARDER          reduce using rule 62 (tipos -> STRING .)
    DPT             reduce using rule 62 (tipos -> STRING .)
    LLAVEIZQ        reduce using rule 62 (tipos -> STRING .)
    MAS             reduce using rule 62 (tipos -> STRING .)
    MENOS           reduce using rule 62 (tipos -> STRING .)
    POR             reduce using rule 62 (tipos -> STRING .)
    DIVIDIDO        reduce using rule 62 (tipos -> STRING .)
    MOD             reduce using rule 62 (tipos -> STRING .)
    AS              reduce using rule 62 (tipos -> STRING .)
    PT              reduce using rule 62 (tipos -> STRING .)
    IGUAL           reduce using rule 62 (tipos -> STRING .)
    MENOR           reduce using rule 62 (tipos -> STRING .)
    MAYOR           reduce using rule 62 (tipos -> STRING .)
    MEIGUAL         reduce using rule 62 (tipos -> STRING .)
    MAIGUAL         reduce using rule 62 (tipos -> STRING .)
    DIS             reduce using rule 62 (tipos -> STRING .)
    AND             reduce using rule 62 (tipos -> STRING .)
    OR              reduce using rule 62 (tipos -> STRING .)
    PTCOMA          reduce using rule 62 (tipos -> STRING .)
    CORDER          reduce using rule 62 (tipos -> STRING .)


state 67

    (63) tipos -> AMP . STR

    STR             shift and go to state 108


state 68

    (64) tipos -> USIZE .

    LLAVEDER        reduce using rule 64 (tipos -> USIZE .)
    COMA            reduce using rule 64 (tipos -> USIZE .)
    PARDER          reduce using rule 64 (tipos -> USIZE .)
    DPT             reduce using rule 64 (tipos -> USIZE .)
    LLAVEIZQ        reduce using rule 64 (tipos -> USIZE .)
    MAS             reduce using rule 64 (tipos -> USIZE .)
    MENOS           reduce using rule 64 (tipos -> USIZE .)
    POR             reduce using rule 64 (tipos -> USIZE .)
    DIVIDIDO        reduce using rule 64 (tipos -> USIZE .)
    MOD             reduce using rule 64 (tipos -> USIZE .)
    AS              reduce using rule 64 (tipos -> USIZE .)
    PT              reduce using rule 64 (tipos -> USIZE .)
    IGUAL           reduce using rule 64 (tipos -> USIZE .)
    MENOR           reduce using rule 64 (tipos -> USIZE .)
    MAYOR           reduce using rule 64 (tipos -> USIZE .)
    MEIGUAL         reduce using rule 64 (tipos -> USIZE .)
    MAIGUAL         reduce using rule 64 (tipos -> USIZE .)
    DIS             reduce using rule 64 (tipos -> USIZE .)
    AND             reduce using rule 64 (tipos -> USIZE .)
    OR              reduce using rule 64 (tipos -> USIZE .)
    PTCOMA          reduce using rule 64 (tipos -> USIZE .)
    CORDER          reduce using rule 64 (tipos -> USIZE .)


state 69

    (13) liststruct -> liststruct COMA ID . DPT tipos

    DPT             shift and go to state 109


state 70

    (3) funcion -> PUB FN ID PARIZQ parametros PARDER tipofun . LLAVEIZQ instrucciones LLAVEDER

    LLAVEIZQ        shift and go to state 110


state 71

    (4) funcion -> FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ . instrucciones LLAVEDER
    (17) instrucciones -> . instruccion instrucciones
    (18) instrucciones -> . instruccion
    (19) instruccion -> . LET mutable ID pyc arrtipos IGUAL logica PTCOMA
    (20) instruccion -> . ID listarreglo IGUAL logica PTCOMA
    (21) instruccion -> . ID PARIZQ listexpr PARDER PTCOMA
    (22) instruccion -> . PRINT NOT PARIZQ listexpr PARDER PTCOMA
    (23) instruccion -> . IF logica LLAVEIZQ instrucciones LLAVEDER unelse
    (24) instruccion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (25) instruccion -> . BREAK logica PTCOMA
    (26) instruccion -> . BREAK PTCOMA
    (27) instruccion -> . RETURN logica PTCOMA
    (28) instruccion -> . CONTINUE PTCOMA
    (29) instruccion -> . WHILE logica LLAVEIZQ instrucciones LLAVEDER
    (30) instruccion -> . FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER

    LET             shift and go to state 51
    ID              shift and go to state 52
    PRINT           shift and go to state 53
    IF              shift and go to state 54
    LOOP            shift and go to state 55
    BREAK           shift and go to state 56
    RETURN          shift and go to state 57
    CONTINUE        shift and go to state 58
    WHILE           shift and go to state 59
    FOR             shift and go to state 60

    instrucciones                  shift and go to state 111
    instruccion                    shift and go to state 50

state 72

    (15) tipofun -> MENOS MAYOR . tipos
    (58) tipos -> . I64
    (59) tipos -> . F64
    (60) tipos -> . BOOL
    (61) tipos -> . CHAR
    (62) tipos -> . STRING
    (63) tipos -> . AMP STR
    (64) tipos -> . USIZE

    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

    tipos                          shift and go to state 112

state 73

    (11) parametros2 -> parametros2 COMA mutable ID . DPT tipos

    DPT             shift and go to state 113


state 74

    (12) parametros2 -> mutable ID DPT tipos .

    COMA            reduce using rule 12 (parametros2 -> mutable ID DPT tipos .)
    PARDER          reduce using rule 12 (parametros2 -> mutable ID DPT tipos .)


state 75

    (7) funcion -> FN MAIN PARIZQ PARDER LLAVEIZQ instrucciones LLAVEDER .

    PUB             reduce using rule 7 (funcion -> FN MAIN PARIZQ PARDER LLAVEIZQ instrucciones LLAVEDER .)
    FN              reduce using rule 7 (funcion -> FN MAIN PARIZQ PARDER LLAVEIZQ instrucciones LLAVEDER .)
    MODF            reduce using rule 7 (funcion -> FN MAIN PARIZQ PARDER LLAVEIZQ instrucciones LLAVEDER .)
    STRUCT          reduce using rule 7 (funcion -> FN MAIN PARIZQ PARDER LLAVEIZQ instrucciones LLAVEDER .)
    $end            reduce using rule 7 (funcion -> FN MAIN PARIZQ PARDER LLAVEIZQ instrucciones LLAVEDER .)
    LLAVEDER        reduce using rule 7 (funcion -> FN MAIN PARIZQ PARDER LLAVEIZQ instrucciones LLAVEDER .)


state 76

    (17) instrucciones -> instruccion instrucciones .

    LLAVEDER        reduce using rule 17 (instrucciones -> instruccion instrucciones .)


state 77

    (19) instruccion -> LET mutable . ID pyc arrtipos IGUAL logica PTCOMA

    ID              shift and go to state 114


state 78

    (20) instruccion -> ID listarreglo . IGUAL logica PTCOMA
    (94) listarreglo -> listarreglo . CORIZQ listexpr CORDER

    IGUAL           shift and go to state 115
    CORIZQ          shift and go to state 116


state 79

    (21) instruccion -> ID PARIZQ . listexpr PARDER PTCOMA
    (96) listexpr -> . listexpr COMA expresion
    (97) listexpr -> . expresion
    (65) expresion -> . expresion MAS expresion
    (66) expresion -> . expresion MENOS expresion
    (67) expresion -> . expresion POR expresion
    (68) expresion -> . expresion DIVIDIDO expresion
    (69) expresion -> . expresion MOD expresion
    (70) expresion -> . expresion AS tipos
    (71) expresion -> . MENOS expresion
    (72) expresion -> . PARIZQ logica PARDER
    (73) expresion -> . ENTERO
    (74) expresion -> . DECIMAL
    (75) expresion -> . FORM
    (76) expresion -> . TRUE
    (77) expresion -> . FALSE
    (78) expresion -> . VECM NOT listarreglo
    (79) expresion -> . ID listarreglo
    (80) expresion -> . ID PARIZQ listexpr PARDER
    (81) expresion -> . listarreglo
    (82) expresion -> . opcionpow DPT DPT expresion
    (85) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (86) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (87) expresion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (88) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (89) expresion -> . expresion PT SQRT PARIZQ PARDER
    (90) expresion -> . expresion PT ABS PARIZQ PARDER
    (91) expresion -> . expresion PT CLONE PARIZQ PARDER
    (92) expresion -> . expresion PT LEN PARIZQ PARDER
    (93) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (94) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (95) listarreglo -> . empty
    (83) opcionpow -> . expresion
    (84) opcionpow -> . tipos
    (98) empty -> .
    (58) tipos -> . I64
    (59) tipos -> . F64
    (60) tipos -> . BOOL
    (61) tipos -> . CHAR
    (62) tipos -> . STRING
    (63) tipos -> . AMP STR
    (64) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    MENOS           shift and go to state 86
    PARIZQ          shift and go to state 88
    ENTERO          shift and go to state 89
    DECIMAL         shift and go to state 90
    FORM            shift and go to state 91
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    VECM            shift and go to state 94
    ID              shift and go to state 96
    POW             shift and go to state 98
    POWF            shift and go to state 99
    LOOP            shift and go to state 100
    CORIZQ          reduce using rule 98 (empty -> .)
    MAS             reduce using rule 98 (empty -> .)
    POR             reduce using rule 98 (empty -> .)
    DIVIDIDO        reduce using rule 98 (empty -> .)
    MOD             reduce using rule 98 (empty -> .)
    AS              reduce using rule 98 (empty -> .)
    PT              reduce using rule 98 (empty -> .)
    PARDER          reduce using rule 98 (empty -> .)
    COMA            reduce using rule 98 (empty -> .)
    DPT             reduce using rule 98 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 98 (empty -> .) ]

    listexpr                       shift and go to state 117
    expresion                      shift and go to state 118
    tipos                          shift and go to state 87
    listarreglo                    shift and go to state 95
    opcionpow                      shift and go to state 97
    empty                          shift and go to state 80

state 80

    (95) listarreglo -> empty .

    IGUAL           reduce using rule 95 (listarreglo -> empty .)
    CORIZQ          reduce using rule 95 (listarreglo -> empty .)
    MAS             reduce using rule 95 (listarreglo -> empty .)
    MENOS           reduce using rule 95 (listarreglo -> empty .)
    POR             reduce using rule 95 (listarreglo -> empty .)
    DIVIDIDO        reduce using rule 95 (listarreglo -> empty .)
    MOD             reduce using rule 95 (listarreglo -> empty .)
    AS              reduce using rule 95 (listarreglo -> empty .)
    PT              reduce using rule 95 (listarreglo -> empty .)
    MENOR           reduce using rule 95 (listarreglo -> empty .)
    MAYOR           reduce using rule 95 (listarreglo -> empty .)
    MEIGUAL         reduce using rule 95 (listarreglo -> empty .)
    MAIGUAL         reduce using rule 95 (listarreglo -> empty .)
    DIS             reduce using rule 95 (listarreglo -> empty .)
    LLAVEIZQ        reduce using rule 95 (listarreglo -> empty .)
    AND             reduce using rule 95 (listarreglo -> empty .)
    OR              reduce using rule 95 (listarreglo -> empty .)
    DPT             reduce using rule 95 (listarreglo -> empty .)
    PTCOMA          reduce using rule 95 (listarreglo -> empty .)
    PARDER          reduce using rule 95 (listarreglo -> empty .)
    COMA            reduce using rule 95 (listarreglo -> empty .)
    CORDER          reduce using rule 95 (listarreglo -> empty .)


state 81

    (22) instruccion -> PRINT NOT . PARIZQ listexpr PARDER PTCOMA

    PARIZQ          shift and go to state 119


state 82

    (23) instruccion -> IF logica . LLAVEIZQ instrucciones LLAVEDER unelse
    (37) logica -> logica . AND logica
    (38) logica -> logica . OR logica

    LLAVEIZQ        shift and go to state 120
    AND             shift and go to state 121
    OR              shift and go to state 122


state 83

    (39) logica -> NOT . logica
    (37) logica -> . logica AND logica
    (38) logica -> . logica OR logica
    (39) logica -> . NOT logica
    (40) logica -> . rel
    (41) rel -> . rel IGUAL IGUAL rel
    (42) rel -> . rel MENOR rel
    (43) rel -> . rel MAYOR rel
    (44) rel -> . rel MEIGUAL rel
    (45) rel -> . rel MAIGUAL rel
    (46) rel -> . rel DIS rel
    (47) rel -> . expresion
    (65) expresion -> . expresion MAS expresion
    (66) expresion -> . expresion MENOS expresion
    (67) expresion -> . expresion POR expresion
    (68) expresion -> . expresion DIVIDIDO expresion
    (69) expresion -> . expresion MOD expresion
    (70) expresion -> . expresion AS tipos
    (71) expresion -> . MENOS expresion
    (72) expresion -> . PARIZQ logica PARDER
    (73) expresion -> . ENTERO
    (74) expresion -> . DECIMAL
    (75) expresion -> . FORM
    (76) expresion -> . TRUE
    (77) expresion -> . FALSE
    (78) expresion -> . VECM NOT listarreglo
    (79) expresion -> . ID listarreglo
    (80) expresion -> . ID PARIZQ listexpr PARDER
    (81) expresion -> . listarreglo
    (82) expresion -> . opcionpow DPT DPT expresion
    (85) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (86) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (87) expresion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (88) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (89) expresion -> . expresion PT SQRT PARIZQ PARDER
    (90) expresion -> . expresion PT ABS PARIZQ PARDER
    (91) expresion -> . expresion PT CLONE PARIZQ PARDER
    (92) expresion -> . expresion PT LEN PARIZQ PARDER
    (93) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (94) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (95) listarreglo -> . empty
    (83) opcionpow -> . expresion
    (84) opcionpow -> . tipos
    (98) empty -> .
    (58) tipos -> . I64
    (59) tipos -> . F64
    (60) tipos -> . BOOL
    (61) tipos -> . CHAR
    (62) tipos -> . STRING
    (63) tipos -> . AMP STR
    (64) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    NOT             shift and go to state 83
    MENOS           shift and go to state 86
    PARIZQ          shift and go to state 88
    ENTERO          shift and go to state 89
    DECIMAL         shift and go to state 90
    FORM            shift and go to state 91
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    VECM            shift and go to state 94
    ID              shift and go to state 96
    POW             shift and go to state 98
    POWF            shift and go to state 99
    LOOP            shift and go to state 100
    CORIZQ          reduce using rule 98 (empty -> .)
    MAS             reduce using rule 98 (empty -> .)
    POR             reduce using rule 98 (empty -> .)
    DIVIDIDO        reduce using rule 98 (empty -> .)
    MOD             reduce using rule 98 (empty -> .)
    AS              reduce using rule 98 (empty -> .)
    PT              reduce using rule 98 (empty -> .)
    IGUAL           reduce using rule 98 (empty -> .)
    MENOR           reduce using rule 98 (empty -> .)
    MAYOR           reduce using rule 98 (empty -> .)
    MEIGUAL         reduce using rule 98 (empty -> .)
    MAIGUAL         reduce using rule 98 (empty -> .)
    DIS             reduce using rule 98 (empty -> .)
    AND             reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    LLAVEIZQ        reduce using rule 98 (empty -> .)
    PTCOMA          reduce using rule 98 (empty -> .)
    PARDER          reduce using rule 98 (empty -> .)
    DPT             reduce using rule 98 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 98 (empty -> .) ]

    logica                         shift and go to state 123
    rel                            shift and go to state 84
    expresion                      shift and go to state 85
    tipos                          shift and go to state 87
    listarreglo                    shift and go to state 95
    opcionpow                      shift and go to state 97
    empty                          shift and go to state 80

state 84

    (40) logica -> rel .
    (41) rel -> rel . IGUAL IGUAL rel
    (42) rel -> rel . MENOR rel
    (43) rel -> rel . MAYOR rel
    (44) rel -> rel . MEIGUAL rel
    (45) rel -> rel . MAIGUAL rel
    (46) rel -> rel . DIS rel

    LLAVEIZQ        reduce using rule 40 (logica -> rel .)
    AND             reduce using rule 40 (logica -> rel .)
    OR              reduce using rule 40 (logica -> rel .)
    PTCOMA          reduce using rule 40 (logica -> rel .)
    PARDER          reduce using rule 40 (logica -> rel .)
    IGUAL           shift and go to state 124
    MENOR           shift and go to state 125
    MAYOR           shift and go to state 126
    MEIGUAL         shift and go to state 127
    MAIGUAL         shift and go to state 128
    DIS             shift and go to state 129


state 85

    (47) rel -> expresion .
    (65) expresion -> expresion . MAS expresion
    (66) expresion -> expresion . MENOS expresion
    (67) expresion -> expresion . POR expresion
    (68) expresion -> expresion . DIVIDIDO expresion
    (69) expresion -> expresion . MOD expresion
    (70) expresion -> expresion . AS tipos
    (88) expresion -> expresion . PT TOSTRING PARIZQ PARDER
    (89) expresion -> expresion . PT SQRT PARIZQ PARDER
    (90) expresion -> expresion . PT ABS PARIZQ PARDER
    (91) expresion -> expresion . PT CLONE PARIZQ PARDER
    (92) expresion -> expresion . PT LEN PARIZQ PARDER
    (93) expresion -> expresion . PT TOOWNED PARIZQ PARDER
    (83) opcionpow -> expresion .

    IGUAL           reduce using rule 47 (rel -> expresion .)
    MENOR           reduce using rule 47 (rel -> expresion .)
    MAYOR           reduce using rule 47 (rel -> expresion .)
    MEIGUAL         reduce using rule 47 (rel -> expresion .)
    MAIGUAL         reduce using rule 47 (rel -> expresion .)
    DIS             reduce using rule 47 (rel -> expresion .)
    LLAVEIZQ        reduce using rule 47 (rel -> expresion .)
    AND             reduce using rule 47 (rel -> expresion .)
    OR              reduce using rule 47 (rel -> expresion .)
    PTCOMA          reduce using rule 47 (rel -> expresion .)
    PARDER          reduce using rule 47 (rel -> expresion .)
    MAS             shift and go to state 130
    MENOS           shift and go to state 131
    POR             shift and go to state 132
    DIVIDIDO        shift and go to state 133
    MOD             shift and go to state 134
    AS              shift and go to state 135
    PT              shift and go to state 136
    DPT             reduce using rule 83 (opcionpow -> expresion .)


state 86

    (71) expresion -> MENOS . expresion
    (65) expresion -> . expresion MAS expresion
    (66) expresion -> . expresion MENOS expresion
    (67) expresion -> . expresion POR expresion
    (68) expresion -> . expresion DIVIDIDO expresion
    (69) expresion -> . expresion MOD expresion
    (70) expresion -> . expresion AS tipos
    (71) expresion -> . MENOS expresion
    (72) expresion -> . PARIZQ logica PARDER
    (73) expresion -> . ENTERO
    (74) expresion -> . DECIMAL
    (75) expresion -> . FORM
    (76) expresion -> . TRUE
    (77) expresion -> . FALSE
    (78) expresion -> . VECM NOT listarreglo
    (79) expresion -> . ID listarreglo
    (80) expresion -> . ID PARIZQ listexpr PARDER
    (81) expresion -> . listarreglo
    (82) expresion -> . opcionpow DPT DPT expresion
    (85) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (86) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (87) expresion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (88) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (89) expresion -> . expresion PT SQRT PARIZQ PARDER
    (90) expresion -> . expresion PT ABS PARIZQ PARDER
    (91) expresion -> . expresion PT CLONE PARIZQ PARDER
    (92) expresion -> . expresion PT LEN PARIZQ PARDER
    (93) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (94) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (95) listarreglo -> . empty
    (83) opcionpow -> . expresion
    (84) opcionpow -> . tipos
    (98) empty -> .
    (58) tipos -> . I64
    (59) tipos -> . F64
    (60) tipos -> . BOOL
    (61) tipos -> . CHAR
    (62) tipos -> . STRING
    (63) tipos -> . AMP STR
    (64) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    MENOS           shift and go to state 86
    PARIZQ          shift and go to state 88
    ENTERO          shift and go to state 89
    DECIMAL         shift and go to state 90
    FORM            shift and go to state 91
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    VECM            shift and go to state 94
    ID              shift and go to state 96
    POW             shift and go to state 98
    POWF            shift and go to state 99
    LOOP            shift and go to state 100
    CORIZQ          reduce using rule 98 (empty -> .)
    MAS             reduce using rule 98 (empty -> .)
    POR             reduce using rule 98 (empty -> .)
    DIVIDIDO        reduce using rule 98 (empty -> .)
    MOD             reduce using rule 98 (empty -> .)
    AS              reduce using rule 98 (empty -> .)
    PT              reduce using rule 98 (empty -> .)
    IGUAL           reduce using rule 98 (empty -> .)
    MENOR           reduce using rule 98 (empty -> .)
    MAYOR           reduce using rule 98 (empty -> .)
    MEIGUAL         reduce using rule 98 (empty -> .)
    MAIGUAL         reduce using rule 98 (empty -> .)
    DIS             reduce using rule 98 (empty -> .)
    LLAVEIZQ        reduce using rule 98 (empty -> .)
    AND             reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    DPT             reduce using rule 98 (empty -> .)
    PTCOMA          reduce using rule 98 (empty -> .)
    PARDER          reduce using rule 98 (empty -> .)
    COMA            reduce using rule 98 (empty -> .)
    CORDER          reduce using rule 98 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 98 (empty -> .) ]

    expresion                      shift and go to state 137
    tipos                          shift and go to state 87
    listarreglo                    shift and go to state 95
    opcionpow                      shift and go to state 97
    empty                          shift and go to state 80

state 87

    (84) opcionpow -> tipos .

    DPT             reduce using rule 84 (opcionpow -> tipos .)


state 88

    (72) expresion -> PARIZQ . logica PARDER
    (37) logica -> . logica AND logica
    (38) logica -> . logica OR logica
    (39) logica -> . NOT logica
    (40) logica -> . rel
    (41) rel -> . rel IGUAL IGUAL rel
    (42) rel -> . rel MENOR rel
    (43) rel -> . rel MAYOR rel
    (44) rel -> . rel MEIGUAL rel
    (45) rel -> . rel MAIGUAL rel
    (46) rel -> . rel DIS rel
    (47) rel -> . expresion
    (65) expresion -> . expresion MAS expresion
    (66) expresion -> . expresion MENOS expresion
    (67) expresion -> . expresion POR expresion
    (68) expresion -> . expresion DIVIDIDO expresion
    (69) expresion -> . expresion MOD expresion
    (70) expresion -> . expresion AS tipos
    (71) expresion -> . MENOS expresion
    (72) expresion -> . PARIZQ logica PARDER
    (73) expresion -> . ENTERO
    (74) expresion -> . DECIMAL
    (75) expresion -> . FORM
    (76) expresion -> . TRUE
    (77) expresion -> . FALSE
    (78) expresion -> . VECM NOT listarreglo
    (79) expresion -> . ID listarreglo
    (80) expresion -> . ID PARIZQ listexpr PARDER
    (81) expresion -> . listarreglo
    (82) expresion -> . opcionpow DPT DPT expresion
    (85) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (86) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (87) expresion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (88) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (89) expresion -> . expresion PT SQRT PARIZQ PARDER
    (90) expresion -> . expresion PT ABS PARIZQ PARDER
    (91) expresion -> . expresion PT CLONE PARIZQ PARDER
    (92) expresion -> . expresion PT LEN PARIZQ PARDER
    (93) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (94) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (95) listarreglo -> . empty
    (83) opcionpow -> . expresion
    (84) opcionpow -> . tipos
    (98) empty -> .
    (58) tipos -> . I64
    (59) tipos -> . F64
    (60) tipos -> . BOOL
    (61) tipos -> . CHAR
    (62) tipos -> . STRING
    (63) tipos -> . AMP STR
    (64) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    NOT             shift and go to state 83
    MENOS           shift and go to state 86
    PARIZQ          shift and go to state 88
    ENTERO          shift and go to state 89
    DECIMAL         shift and go to state 90
    FORM            shift and go to state 91
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    VECM            shift and go to state 94
    ID              shift and go to state 96
    POW             shift and go to state 98
    POWF            shift and go to state 99
    LOOP            shift and go to state 100
    CORIZQ          reduce using rule 98 (empty -> .)
    MAS             reduce using rule 98 (empty -> .)
    POR             reduce using rule 98 (empty -> .)
    DIVIDIDO        reduce using rule 98 (empty -> .)
    MOD             reduce using rule 98 (empty -> .)
    AS              reduce using rule 98 (empty -> .)
    PT              reduce using rule 98 (empty -> .)
    IGUAL           reduce using rule 98 (empty -> .)
    MENOR           reduce using rule 98 (empty -> .)
    MAYOR           reduce using rule 98 (empty -> .)
    MEIGUAL         reduce using rule 98 (empty -> .)
    MAIGUAL         reduce using rule 98 (empty -> .)
    DIS             reduce using rule 98 (empty -> .)
    PARDER          reduce using rule 98 (empty -> .)
    AND             reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    DPT             reduce using rule 98 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 98 (empty -> .) ]

    logica                         shift and go to state 138
    rel                            shift and go to state 84
    expresion                      shift and go to state 85
    tipos                          shift and go to state 87
    listarreglo                    shift and go to state 95
    opcionpow                      shift and go to state 97
    empty                          shift and go to state 80

state 89

    (73) expresion -> ENTERO .

    MAS             reduce using rule 73 (expresion -> ENTERO .)
    MENOS           reduce using rule 73 (expresion -> ENTERO .)
    POR             reduce using rule 73 (expresion -> ENTERO .)
    DIVIDIDO        reduce using rule 73 (expresion -> ENTERO .)
    MOD             reduce using rule 73 (expresion -> ENTERO .)
    AS              reduce using rule 73 (expresion -> ENTERO .)
    PT              reduce using rule 73 (expresion -> ENTERO .)
    IGUAL           reduce using rule 73 (expresion -> ENTERO .)
    MENOR           reduce using rule 73 (expresion -> ENTERO .)
    MAYOR           reduce using rule 73 (expresion -> ENTERO .)
    MEIGUAL         reduce using rule 73 (expresion -> ENTERO .)
    MAIGUAL         reduce using rule 73 (expresion -> ENTERO .)
    DIS             reduce using rule 73 (expresion -> ENTERO .)
    LLAVEIZQ        reduce using rule 73 (expresion -> ENTERO .)
    AND             reduce using rule 73 (expresion -> ENTERO .)
    OR              reduce using rule 73 (expresion -> ENTERO .)
    DPT             reduce using rule 73 (expresion -> ENTERO .)
    PTCOMA          reduce using rule 73 (expresion -> ENTERO .)
    PARDER          reduce using rule 73 (expresion -> ENTERO .)
    COMA            reduce using rule 73 (expresion -> ENTERO .)
    CORDER          reduce using rule 73 (expresion -> ENTERO .)


state 90

    (74) expresion -> DECIMAL .

    MAS             reduce using rule 74 (expresion -> DECIMAL .)
    MENOS           reduce using rule 74 (expresion -> DECIMAL .)
    POR             reduce using rule 74 (expresion -> DECIMAL .)
    DIVIDIDO        reduce using rule 74 (expresion -> DECIMAL .)
    MOD             reduce using rule 74 (expresion -> DECIMAL .)
    AS              reduce using rule 74 (expresion -> DECIMAL .)
    PT              reduce using rule 74 (expresion -> DECIMAL .)
    IGUAL           reduce using rule 74 (expresion -> DECIMAL .)
    MENOR           reduce using rule 74 (expresion -> DECIMAL .)
    MAYOR           reduce using rule 74 (expresion -> DECIMAL .)
    MEIGUAL         reduce using rule 74 (expresion -> DECIMAL .)
    MAIGUAL         reduce using rule 74 (expresion -> DECIMAL .)
    DIS             reduce using rule 74 (expresion -> DECIMAL .)
    LLAVEIZQ        reduce using rule 74 (expresion -> DECIMAL .)
    AND             reduce using rule 74 (expresion -> DECIMAL .)
    OR              reduce using rule 74 (expresion -> DECIMAL .)
    DPT             reduce using rule 74 (expresion -> DECIMAL .)
    PTCOMA          reduce using rule 74 (expresion -> DECIMAL .)
    PARDER          reduce using rule 74 (expresion -> DECIMAL .)
    COMA            reduce using rule 74 (expresion -> DECIMAL .)
    CORDER          reduce using rule 74 (expresion -> DECIMAL .)


state 91

    (75) expresion -> FORM .

    MAS             reduce using rule 75 (expresion -> FORM .)
    MENOS           reduce using rule 75 (expresion -> FORM .)
    POR             reduce using rule 75 (expresion -> FORM .)
    DIVIDIDO        reduce using rule 75 (expresion -> FORM .)
    MOD             reduce using rule 75 (expresion -> FORM .)
    AS              reduce using rule 75 (expresion -> FORM .)
    PT              reduce using rule 75 (expresion -> FORM .)
    IGUAL           reduce using rule 75 (expresion -> FORM .)
    MENOR           reduce using rule 75 (expresion -> FORM .)
    MAYOR           reduce using rule 75 (expresion -> FORM .)
    MEIGUAL         reduce using rule 75 (expresion -> FORM .)
    MAIGUAL         reduce using rule 75 (expresion -> FORM .)
    DIS             reduce using rule 75 (expresion -> FORM .)
    LLAVEIZQ        reduce using rule 75 (expresion -> FORM .)
    AND             reduce using rule 75 (expresion -> FORM .)
    OR              reduce using rule 75 (expresion -> FORM .)
    DPT             reduce using rule 75 (expresion -> FORM .)
    PTCOMA          reduce using rule 75 (expresion -> FORM .)
    PARDER          reduce using rule 75 (expresion -> FORM .)
    COMA            reduce using rule 75 (expresion -> FORM .)
    CORDER          reduce using rule 75 (expresion -> FORM .)


state 92

    (76) expresion -> TRUE .

    MAS             reduce using rule 76 (expresion -> TRUE .)
    MENOS           reduce using rule 76 (expresion -> TRUE .)
    POR             reduce using rule 76 (expresion -> TRUE .)
    DIVIDIDO        reduce using rule 76 (expresion -> TRUE .)
    MOD             reduce using rule 76 (expresion -> TRUE .)
    AS              reduce using rule 76 (expresion -> TRUE .)
    PT              reduce using rule 76 (expresion -> TRUE .)
    IGUAL           reduce using rule 76 (expresion -> TRUE .)
    MENOR           reduce using rule 76 (expresion -> TRUE .)
    MAYOR           reduce using rule 76 (expresion -> TRUE .)
    MEIGUAL         reduce using rule 76 (expresion -> TRUE .)
    MAIGUAL         reduce using rule 76 (expresion -> TRUE .)
    DIS             reduce using rule 76 (expresion -> TRUE .)
    LLAVEIZQ        reduce using rule 76 (expresion -> TRUE .)
    AND             reduce using rule 76 (expresion -> TRUE .)
    OR              reduce using rule 76 (expresion -> TRUE .)
    DPT             reduce using rule 76 (expresion -> TRUE .)
    PTCOMA          reduce using rule 76 (expresion -> TRUE .)
    PARDER          reduce using rule 76 (expresion -> TRUE .)
    COMA            reduce using rule 76 (expresion -> TRUE .)
    CORDER          reduce using rule 76 (expresion -> TRUE .)


state 93

    (77) expresion -> FALSE .

    MAS             reduce using rule 77 (expresion -> FALSE .)
    MENOS           reduce using rule 77 (expresion -> FALSE .)
    POR             reduce using rule 77 (expresion -> FALSE .)
    DIVIDIDO        reduce using rule 77 (expresion -> FALSE .)
    MOD             reduce using rule 77 (expresion -> FALSE .)
    AS              reduce using rule 77 (expresion -> FALSE .)
    PT              reduce using rule 77 (expresion -> FALSE .)
    IGUAL           reduce using rule 77 (expresion -> FALSE .)
    MENOR           reduce using rule 77 (expresion -> FALSE .)
    MAYOR           reduce using rule 77 (expresion -> FALSE .)
    MEIGUAL         reduce using rule 77 (expresion -> FALSE .)
    MAIGUAL         reduce using rule 77 (expresion -> FALSE .)
    DIS             reduce using rule 77 (expresion -> FALSE .)
    LLAVEIZQ        reduce using rule 77 (expresion -> FALSE .)
    AND             reduce using rule 77 (expresion -> FALSE .)
    OR              reduce using rule 77 (expresion -> FALSE .)
    DPT             reduce using rule 77 (expresion -> FALSE .)
    PTCOMA          reduce using rule 77 (expresion -> FALSE .)
    PARDER          reduce using rule 77 (expresion -> FALSE .)
    COMA            reduce using rule 77 (expresion -> FALSE .)
    CORDER          reduce using rule 77 (expresion -> FALSE .)


state 94

    (78) expresion -> VECM . NOT listarreglo

    NOT             shift and go to state 139


state 95

    (81) expresion -> listarreglo .
    (94) listarreglo -> listarreglo . CORIZQ listexpr CORDER

    MAS             reduce using rule 81 (expresion -> listarreglo .)
    MENOS           reduce using rule 81 (expresion -> listarreglo .)
    POR             reduce using rule 81 (expresion -> listarreglo .)
    DIVIDIDO        reduce using rule 81 (expresion -> listarreglo .)
    MOD             reduce using rule 81 (expresion -> listarreglo .)
    AS              reduce using rule 81 (expresion -> listarreglo .)
    PT              reduce using rule 81 (expresion -> listarreglo .)
    IGUAL           reduce using rule 81 (expresion -> listarreglo .)
    MENOR           reduce using rule 81 (expresion -> listarreglo .)
    MAYOR           reduce using rule 81 (expresion -> listarreglo .)
    MEIGUAL         reduce using rule 81 (expresion -> listarreglo .)
    MAIGUAL         reduce using rule 81 (expresion -> listarreglo .)
    DIS             reduce using rule 81 (expresion -> listarreglo .)
    LLAVEIZQ        reduce using rule 81 (expresion -> listarreglo .)
    AND             reduce using rule 81 (expresion -> listarreglo .)
    OR              reduce using rule 81 (expresion -> listarreglo .)
    DPT             reduce using rule 81 (expresion -> listarreglo .)
    PTCOMA          reduce using rule 81 (expresion -> listarreglo .)
    PARDER          reduce using rule 81 (expresion -> listarreglo .)
    COMA            reduce using rule 81 (expresion -> listarreglo .)
    CORDER          reduce using rule 81 (expresion -> listarreglo .)
    CORIZQ          shift and go to state 116


state 96

    (79) expresion -> ID . listarreglo
    (80) expresion -> ID . PARIZQ listexpr PARDER
    (94) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (95) listarreglo -> . empty
    (98) empty -> .

    PARIZQ          shift and go to state 141
    CORIZQ          reduce using rule 98 (empty -> .)
    MAS             reduce using rule 98 (empty -> .)
    MENOS           reduce using rule 98 (empty -> .)
    POR             reduce using rule 98 (empty -> .)
    DIVIDIDO        reduce using rule 98 (empty -> .)
    MOD             reduce using rule 98 (empty -> .)
    AS              reduce using rule 98 (empty -> .)
    PT              reduce using rule 98 (empty -> .)
    IGUAL           reduce using rule 98 (empty -> .)
    MENOR           reduce using rule 98 (empty -> .)
    MAYOR           reduce using rule 98 (empty -> .)
    MEIGUAL         reduce using rule 98 (empty -> .)
    MAIGUAL         reduce using rule 98 (empty -> .)
    DIS             reduce using rule 98 (empty -> .)
    LLAVEIZQ        reduce using rule 98 (empty -> .)
    AND             reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    DPT             reduce using rule 98 (empty -> .)
    PTCOMA          reduce using rule 98 (empty -> .)
    PARDER          reduce using rule 98 (empty -> .)
    COMA            reduce using rule 98 (empty -> .)
    CORDER          reduce using rule 98 (empty -> .)

    listarreglo                    shift and go to state 140
    empty                          shift and go to state 80

state 97

    (82) expresion -> opcionpow . DPT DPT expresion

    DPT             shift and go to state 142


state 98

    (85) expresion -> POW . PARIZQ ENTERO COMA ENTERO PARDER

    PARIZQ          shift and go to state 143


state 99

    (86) expresion -> POWF . PARIZQ DECIMAL COMA DECIMAL PARDER

    PARIZQ          shift and go to state 144


state 100

    (87) expresion -> LOOP . LLAVEIZQ instrucciones LLAVEDER

    LLAVEIZQ        shift and go to state 145


state 101

    (24) instruccion -> LOOP LLAVEIZQ . instrucciones LLAVEDER
    (17) instrucciones -> . instruccion instrucciones
    (18) instrucciones -> . instruccion
    (19) instruccion -> . LET mutable ID pyc arrtipos IGUAL logica PTCOMA
    (20) instruccion -> . ID listarreglo IGUAL logica PTCOMA
    (21) instruccion -> . ID PARIZQ listexpr PARDER PTCOMA
    (22) instruccion -> . PRINT NOT PARIZQ listexpr PARDER PTCOMA
    (23) instruccion -> . IF logica LLAVEIZQ instrucciones LLAVEDER unelse
    (24) instruccion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (25) instruccion -> . BREAK logica PTCOMA
    (26) instruccion -> . BREAK PTCOMA
    (27) instruccion -> . RETURN logica PTCOMA
    (28) instruccion -> . CONTINUE PTCOMA
    (29) instruccion -> . WHILE logica LLAVEIZQ instrucciones LLAVEDER
    (30) instruccion -> . FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER

    LET             shift and go to state 51
    ID              shift and go to state 52
    PRINT           shift and go to state 53
    IF              shift and go to state 54
    LOOP            shift and go to state 55
    BREAK           shift and go to state 56
    RETURN          shift and go to state 57
    CONTINUE        shift and go to state 58
    WHILE           shift and go to state 59
    FOR             shift and go to state 60

    instrucciones                  shift and go to state 146
    instruccion                    shift and go to state 50

state 102

    (25) instruccion -> BREAK logica . PTCOMA
    (37) logica -> logica . AND logica
    (38) logica -> logica . OR logica

    PTCOMA          shift and go to state 147
    AND             shift and go to state 121
    OR              shift and go to state 122


state 103

    (26) instruccion -> BREAK PTCOMA .

    LET             reduce using rule 26 (instruccion -> BREAK PTCOMA .)
    ID              reduce using rule 26 (instruccion -> BREAK PTCOMA .)
    PRINT           reduce using rule 26 (instruccion -> BREAK PTCOMA .)
    IF              reduce using rule 26 (instruccion -> BREAK PTCOMA .)
    LOOP            reduce using rule 26 (instruccion -> BREAK PTCOMA .)
    BREAK           reduce using rule 26 (instruccion -> BREAK PTCOMA .)
    RETURN          reduce using rule 26 (instruccion -> BREAK PTCOMA .)
    CONTINUE        reduce using rule 26 (instruccion -> BREAK PTCOMA .)
    WHILE           reduce using rule 26 (instruccion -> BREAK PTCOMA .)
    FOR             reduce using rule 26 (instruccion -> BREAK PTCOMA .)
    LLAVEDER        reduce using rule 26 (instruccion -> BREAK PTCOMA .)


state 104

    (27) instruccion -> RETURN logica . PTCOMA
    (37) logica -> logica . AND logica
    (38) logica -> logica . OR logica

    PTCOMA          shift and go to state 148
    AND             shift and go to state 121
    OR              shift and go to state 122


state 105

    (28) instruccion -> CONTINUE PTCOMA .

    LET             reduce using rule 28 (instruccion -> CONTINUE PTCOMA .)
    ID              reduce using rule 28 (instruccion -> CONTINUE PTCOMA .)
    PRINT           reduce using rule 28 (instruccion -> CONTINUE PTCOMA .)
    IF              reduce using rule 28 (instruccion -> CONTINUE PTCOMA .)
    LOOP            reduce using rule 28 (instruccion -> CONTINUE PTCOMA .)
    BREAK           reduce using rule 28 (instruccion -> CONTINUE PTCOMA .)
    RETURN          reduce using rule 28 (instruccion -> CONTINUE PTCOMA .)
    CONTINUE        reduce using rule 28 (instruccion -> CONTINUE PTCOMA .)
    WHILE           reduce using rule 28 (instruccion -> CONTINUE PTCOMA .)
    FOR             reduce using rule 28 (instruccion -> CONTINUE PTCOMA .)
    LLAVEDER        reduce using rule 28 (instruccion -> CONTINUE PTCOMA .)


state 106

    (29) instruccion -> WHILE logica . LLAVEIZQ instrucciones LLAVEDER
    (37) logica -> logica . AND logica
    (38) logica -> logica . OR logica

    LLAVEIZQ        shift and go to state 149
    AND             shift and go to state 121
    OR              shift and go to state 122


state 107

    (30) instruccion -> FOR ID . IN opcionfor LLAVEIZQ instrucciones LLAVEDER

    IN              shift and go to state 150


state 108

    (63) tipos -> AMP STR .

    LLAVEDER        reduce using rule 63 (tipos -> AMP STR .)
    COMA            reduce using rule 63 (tipos -> AMP STR .)
    PARDER          reduce using rule 63 (tipos -> AMP STR .)
    DPT             reduce using rule 63 (tipos -> AMP STR .)
    LLAVEIZQ        reduce using rule 63 (tipos -> AMP STR .)
    MAS             reduce using rule 63 (tipos -> AMP STR .)
    MENOS           reduce using rule 63 (tipos -> AMP STR .)
    POR             reduce using rule 63 (tipos -> AMP STR .)
    DIVIDIDO        reduce using rule 63 (tipos -> AMP STR .)
    MOD             reduce using rule 63 (tipos -> AMP STR .)
    AS              reduce using rule 63 (tipos -> AMP STR .)
    PT              reduce using rule 63 (tipos -> AMP STR .)
    IGUAL           reduce using rule 63 (tipos -> AMP STR .)
    MENOR           reduce using rule 63 (tipos -> AMP STR .)
    MAYOR           reduce using rule 63 (tipos -> AMP STR .)
    MEIGUAL         reduce using rule 63 (tipos -> AMP STR .)
    MAIGUAL         reduce using rule 63 (tipos -> AMP STR .)
    DIS             reduce using rule 63 (tipos -> AMP STR .)
    AND             reduce using rule 63 (tipos -> AMP STR .)
    OR              reduce using rule 63 (tipos -> AMP STR .)
    PTCOMA          reduce using rule 63 (tipos -> AMP STR .)
    CORDER          reduce using rule 63 (tipos -> AMP STR .)


state 109

    (13) liststruct -> liststruct COMA ID DPT . tipos
    (58) tipos -> . I64
    (59) tipos -> . F64
    (60) tipos -> . BOOL
    (61) tipos -> . CHAR
    (62) tipos -> . STRING
    (63) tipos -> . AMP STR
    (64) tipos -> . USIZE

    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

    tipos                          shift and go to state 151

state 110

    (3) funcion -> PUB FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ . instrucciones LLAVEDER
    (17) instrucciones -> . instruccion instrucciones
    (18) instrucciones -> . instruccion
    (19) instruccion -> . LET mutable ID pyc arrtipos IGUAL logica PTCOMA
    (20) instruccion -> . ID listarreglo IGUAL logica PTCOMA
    (21) instruccion -> . ID PARIZQ listexpr PARDER PTCOMA
    (22) instruccion -> . PRINT NOT PARIZQ listexpr PARDER PTCOMA
    (23) instruccion -> . IF logica LLAVEIZQ instrucciones LLAVEDER unelse
    (24) instruccion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (25) instruccion -> . BREAK logica PTCOMA
    (26) instruccion -> . BREAK PTCOMA
    (27) instruccion -> . RETURN logica PTCOMA
    (28) instruccion -> . CONTINUE PTCOMA
    (29) instruccion -> . WHILE logica LLAVEIZQ instrucciones LLAVEDER
    (30) instruccion -> . FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER

    LET             shift and go to state 51
    ID              shift and go to state 52
    PRINT           shift and go to state 53
    IF              shift and go to state 54
    LOOP            shift and go to state 55
    BREAK           shift and go to state 56
    RETURN          shift and go to state 57
    CONTINUE        shift and go to state 58
    WHILE           shift and go to state 59
    FOR             shift and go to state 60

    instrucciones                  shift and go to state 152
    instruccion                    shift and go to state 50

state 111

    (4) funcion -> FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones . LLAVEDER

    LLAVEDER        shift and go to state 153


state 112

    (15) tipofun -> MENOS MAYOR tipos .

    LLAVEIZQ        reduce using rule 15 (tipofun -> MENOS MAYOR tipos .)


state 113

    (11) parametros2 -> parametros2 COMA mutable ID DPT . tipos
    (58) tipos -> . I64
    (59) tipos -> . F64
    (60) tipos -> . BOOL
    (61) tipos -> . CHAR
    (62) tipos -> . STRING
    (63) tipos -> . AMP STR
    (64) tipos -> . USIZE

    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

    tipos                          shift and go to state 154

state 114

    (19) instruccion -> LET mutable ID . pyc arrtipos IGUAL logica PTCOMA
    (50) pyc -> . DPT
    (51) pyc -> . empty
    (98) empty -> .

    DPT             shift and go to state 156
    I64             reduce using rule 98 (empty -> .)
    F64             reduce using rule 98 (empty -> .)
    BOOL            reduce using rule 98 (empty -> .)
    CHAR            reduce using rule 98 (empty -> .)
    STRING          reduce using rule 98 (empty -> .)
    AMP             reduce using rule 98 (empty -> .)
    USIZE           reduce using rule 98 (empty -> .)
    CORIZQ          reduce using rule 98 (empty -> .)
    ID              reduce using rule 98 (empty -> .)
    IGUAL           reduce using rule 98 (empty -> .)

    pyc                            shift and go to state 155
    empty                          shift and go to state 157

state 115

    (20) instruccion -> ID listarreglo IGUAL . logica PTCOMA
    (37) logica -> . logica AND logica
    (38) logica -> . logica OR logica
    (39) logica -> . NOT logica
    (40) logica -> . rel
    (41) rel -> . rel IGUAL IGUAL rel
    (42) rel -> . rel MENOR rel
    (43) rel -> . rel MAYOR rel
    (44) rel -> . rel MEIGUAL rel
    (45) rel -> . rel MAIGUAL rel
    (46) rel -> . rel DIS rel
    (47) rel -> . expresion
    (65) expresion -> . expresion MAS expresion
    (66) expresion -> . expresion MENOS expresion
    (67) expresion -> . expresion POR expresion
    (68) expresion -> . expresion DIVIDIDO expresion
    (69) expresion -> . expresion MOD expresion
    (70) expresion -> . expresion AS tipos
    (71) expresion -> . MENOS expresion
    (72) expresion -> . PARIZQ logica PARDER
    (73) expresion -> . ENTERO
    (74) expresion -> . DECIMAL
    (75) expresion -> . FORM
    (76) expresion -> . TRUE
    (77) expresion -> . FALSE
    (78) expresion -> . VECM NOT listarreglo
    (79) expresion -> . ID listarreglo
    (80) expresion -> . ID PARIZQ listexpr PARDER
    (81) expresion -> . listarreglo
    (82) expresion -> . opcionpow DPT DPT expresion
    (85) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (86) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (87) expresion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (88) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (89) expresion -> . expresion PT SQRT PARIZQ PARDER
    (90) expresion -> . expresion PT ABS PARIZQ PARDER
    (91) expresion -> . expresion PT CLONE PARIZQ PARDER
    (92) expresion -> . expresion PT LEN PARIZQ PARDER
    (93) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (94) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (95) listarreglo -> . empty
    (83) opcionpow -> . expresion
    (84) opcionpow -> . tipos
    (98) empty -> .
    (58) tipos -> . I64
    (59) tipos -> . F64
    (60) tipos -> . BOOL
    (61) tipos -> . CHAR
    (62) tipos -> . STRING
    (63) tipos -> . AMP STR
    (64) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    NOT             shift and go to state 83
    MENOS           shift and go to state 86
    PARIZQ          shift and go to state 88
    ENTERO          shift and go to state 89
    DECIMAL         shift and go to state 90
    FORM            shift and go to state 91
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    VECM            shift and go to state 94
    ID              shift and go to state 96
    POW             shift and go to state 98
    POWF            shift and go to state 99
    LOOP            shift and go to state 100
    CORIZQ          reduce using rule 98 (empty -> .)
    MAS             reduce using rule 98 (empty -> .)
    POR             reduce using rule 98 (empty -> .)
    DIVIDIDO        reduce using rule 98 (empty -> .)
    MOD             reduce using rule 98 (empty -> .)
    AS              reduce using rule 98 (empty -> .)
    PT              reduce using rule 98 (empty -> .)
    IGUAL           reduce using rule 98 (empty -> .)
    MENOR           reduce using rule 98 (empty -> .)
    MAYOR           reduce using rule 98 (empty -> .)
    MEIGUAL         reduce using rule 98 (empty -> .)
    MAIGUAL         reduce using rule 98 (empty -> .)
    DIS             reduce using rule 98 (empty -> .)
    PTCOMA          reduce using rule 98 (empty -> .)
    AND             reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    DPT             reduce using rule 98 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 98 (empty -> .) ]

    listarreglo                    shift and go to state 95
    logica                         shift and go to state 158
    rel                            shift and go to state 84
    expresion                      shift and go to state 85
    tipos                          shift and go to state 87
    opcionpow                      shift and go to state 97
    empty                          shift and go to state 80

state 116

    (94) listarreglo -> listarreglo CORIZQ . listexpr CORDER
    (96) listexpr -> . listexpr COMA expresion
    (97) listexpr -> . expresion
    (65) expresion -> . expresion MAS expresion
    (66) expresion -> . expresion MENOS expresion
    (67) expresion -> . expresion POR expresion
    (68) expresion -> . expresion DIVIDIDO expresion
    (69) expresion -> . expresion MOD expresion
    (70) expresion -> . expresion AS tipos
    (71) expresion -> . MENOS expresion
    (72) expresion -> . PARIZQ logica PARDER
    (73) expresion -> . ENTERO
    (74) expresion -> . DECIMAL
    (75) expresion -> . FORM
    (76) expresion -> . TRUE
    (77) expresion -> . FALSE
    (78) expresion -> . VECM NOT listarreglo
    (79) expresion -> . ID listarreglo
    (80) expresion -> . ID PARIZQ listexpr PARDER
    (81) expresion -> . listarreglo
    (82) expresion -> . opcionpow DPT DPT expresion
    (85) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (86) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (87) expresion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (88) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (89) expresion -> . expresion PT SQRT PARIZQ PARDER
    (90) expresion -> . expresion PT ABS PARIZQ PARDER
    (91) expresion -> . expresion PT CLONE PARIZQ PARDER
    (92) expresion -> . expresion PT LEN PARIZQ PARDER
    (93) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (94) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (95) listarreglo -> . empty
    (83) opcionpow -> . expresion
    (84) opcionpow -> . tipos
    (98) empty -> .
    (58) tipos -> . I64
    (59) tipos -> . F64
    (60) tipos -> . BOOL
    (61) tipos -> . CHAR
    (62) tipos -> . STRING
    (63) tipos -> . AMP STR
    (64) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    MENOS           shift and go to state 86
    PARIZQ          shift and go to state 88
    ENTERO          shift and go to state 89
    DECIMAL         shift and go to state 90
    FORM            shift and go to state 91
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    VECM            shift and go to state 94
    ID              shift and go to state 96
    POW             shift and go to state 98
    POWF            shift and go to state 99
    LOOP            shift and go to state 100
    CORIZQ          reduce using rule 98 (empty -> .)
    MAS             reduce using rule 98 (empty -> .)
    POR             reduce using rule 98 (empty -> .)
    DIVIDIDO        reduce using rule 98 (empty -> .)
    MOD             reduce using rule 98 (empty -> .)
    AS              reduce using rule 98 (empty -> .)
    PT              reduce using rule 98 (empty -> .)
    CORDER          reduce using rule 98 (empty -> .)
    COMA            reduce using rule 98 (empty -> .)
    DPT             reduce using rule 98 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 98 (empty -> .) ]

    listarreglo                    shift and go to state 95
    listexpr                       shift and go to state 159
    expresion                      shift and go to state 118
    tipos                          shift and go to state 87
    opcionpow                      shift and go to state 97
    empty                          shift and go to state 80

state 117

    (21) instruccion -> ID PARIZQ listexpr . PARDER PTCOMA
    (96) listexpr -> listexpr . COMA expresion

    PARDER          shift and go to state 160
    COMA            shift and go to state 161


state 118

    (97) listexpr -> expresion .
    (65) expresion -> expresion . MAS expresion
    (66) expresion -> expresion . MENOS expresion
    (67) expresion -> expresion . POR expresion
    (68) expresion -> expresion . DIVIDIDO expresion
    (69) expresion -> expresion . MOD expresion
    (70) expresion -> expresion . AS tipos
    (88) expresion -> expresion . PT TOSTRING PARIZQ PARDER
    (89) expresion -> expresion . PT SQRT PARIZQ PARDER
    (90) expresion -> expresion . PT ABS PARIZQ PARDER
    (91) expresion -> expresion . PT CLONE PARIZQ PARDER
    (92) expresion -> expresion . PT LEN PARIZQ PARDER
    (93) expresion -> expresion . PT TOOWNED PARIZQ PARDER
    (83) opcionpow -> expresion .

    PARDER          reduce using rule 97 (listexpr -> expresion .)
    COMA            reduce using rule 97 (listexpr -> expresion .)
    CORDER          reduce using rule 97 (listexpr -> expresion .)
    MAS             shift and go to state 130
    MENOS           shift and go to state 131
    POR             shift and go to state 132
    DIVIDIDO        shift and go to state 133
    MOD             shift and go to state 134
    AS              shift and go to state 135
    PT              shift and go to state 136
    DPT             reduce using rule 83 (opcionpow -> expresion .)


state 119

    (22) instruccion -> PRINT NOT PARIZQ . listexpr PARDER PTCOMA
    (96) listexpr -> . listexpr COMA expresion
    (97) listexpr -> . expresion
    (65) expresion -> . expresion MAS expresion
    (66) expresion -> . expresion MENOS expresion
    (67) expresion -> . expresion POR expresion
    (68) expresion -> . expresion DIVIDIDO expresion
    (69) expresion -> . expresion MOD expresion
    (70) expresion -> . expresion AS tipos
    (71) expresion -> . MENOS expresion
    (72) expresion -> . PARIZQ logica PARDER
    (73) expresion -> . ENTERO
    (74) expresion -> . DECIMAL
    (75) expresion -> . FORM
    (76) expresion -> . TRUE
    (77) expresion -> . FALSE
    (78) expresion -> . VECM NOT listarreglo
    (79) expresion -> . ID listarreglo
    (80) expresion -> . ID PARIZQ listexpr PARDER
    (81) expresion -> . listarreglo
    (82) expresion -> . opcionpow DPT DPT expresion
    (85) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (86) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (87) expresion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (88) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (89) expresion -> . expresion PT SQRT PARIZQ PARDER
    (90) expresion -> . expresion PT ABS PARIZQ PARDER
    (91) expresion -> . expresion PT CLONE PARIZQ PARDER
    (92) expresion -> . expresion PT LEN PARIZQ PARDER
    (93) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (94) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (95) listarreglo -> . empty
    (83) opcionpow -> . expresion
    (84) opcionpow -> . tipos
    (98) empty -> .
    (58) tipos -> . I64
    (59) tipos -> . F64
    (60) tipos -> . BOOL
    (61) tipos -> . CHAR
    (62) tipos -> . STRING
    (63) tipos -> . AMP STR
    (64) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    MENOS           shift and go to state 86
    PARIZQ          shift and go to state 88
    ENTERO          shift and go to state 89
    DECIMAL         shift and go to state 90
    FORM            shift and go to state 91
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    VECM            shift and go to state 94
    ID              shift and go to state 96
    POW             shift and go to state 98
    POWF            shift and go to state 99
    LOOP            shift and go to state 100
    CORIZQ          reduce using rule 98 (empty -> .)
    MAS             reduce using rule 98 (empty -> .)
    POR             reduce using rule 98 (empty -> .)
    DIVIDIDO        reduce using rule 98 (empty -> .)
    MOD             reduce using rule 98 (empty -> .)
    AS              reduce using rule 98 (empty -> .)
    PT              reduce using rule 98 (empty -> .)
    PARDER          reduce using rule 98 (empty -> .)
    COMA            reduce using rule 98 (empty -> .)
    DPT             reduce using rule 98 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 98 (empty -> .) ]

    listexpr                       shift and go to state 162
    expresion                      shift and go to state 118
    tipos                          shift and go to state 87
    listarreglo                    shift and go to state 95
    opcionpow                      shift and go to state 97
    empty                          shift and go to state 80

state 120

    (23) instruccion -> IF logica LLAVEIZQ . instrucciones LLAVEDER unelse
    (17) instrucciones -> . instruccion instrucciones
    (18) instrucciones -> . instruccion
    (19) instruccion -> . LET mutable ID pyc arrtipos IGUAL logica PTCOMA
    (20) instruccion -> . ID listarreglo IGUAL logica PTCOMA
    (21) instruccion -> . ID PARIZQ listexpr PARDER PTCOMA
    (22) instruccion -> . PRINT NOT PARIZQ listexpr PARDER PTCOMA
    (23) instruccion -> . IF logica LLAVEIZQ instrucciones LLAVEDER unelse
    (24) instruccion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (25) instruccion -> . BREAK logica PTCOMA
    (26) instruccion -> . BREAK PTCOMA
    (27) instruccion -> . RETURN logica PTCOMA
    (28) instruccion -> . CONTINUE PTCOMA
    (29) instruccion -> . WHILE logica LLAVEIZQ instrucciones LLAVEDER
    (30) instruccion -> . FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER

    LET             shift and go to state 51
    ID              shift and go to state 52
    PRINT           shift and go to state 53
    IF              shift and go to state 54
    LOOP            shift and go to state 55
    BREAK           shift and go to state 56
    RETURN          shift and go to state 57
    CONTINUE        shift and go to state 58
    WHILE           shift and go to state 59
    FOR             shift and go to state 60

    instrucciones                  shift and go to state 163
    instruccion                    shift and go to state 50

state 121

    (37) logica -> logica AND . logica
    (37) logica -> . logica AND logica
    (38) logica -> . logica OR logica
    (39) logica -> . NOT logica
    (40) logica -> . rel
    (41) rel -> . rel IGUAL IGUAL rel
    (42) rel -> . rel MENOR rel
    (43) rel -> . rel MAYOR rel
    (44) rel -> . rel MEIGUAL rel
    (45) rel -> . rel MAIGUAL rel
    (46) rel -> . rel DIS rel
    (47) rel -> . expresion
    (65) expresion -> . expresion MAS expresion
    (66) expresion -> . expresion MENOS expresion
    (67) expresion -> . expresion POR expresion
    (68) expresion -> . expresion DIVIDIDO expresion
    (69) expresion -> . expresion MOD expresion
    (70) expresion -> . expresion AS tipos
    (71) expresion -> . MENOS expresion
    (72) expresion -> . PARIZQ logica PARDER
    (73) expresion -> . ENTERO
    (74) expresion -> . DECIMAL
    (75) expresion -> . FORM
    (76) expresion -> . TRUE
    (77) expresion -> . FALSE
    (78) expresion -> . VECM NOT listarreglo
    (79) expresion -> . ID listarreglo
    (80) expresion -> . ID PARIZQ listexpr PARDER
    (81) expresion -> . listarreglo
    (82) expresion -> . opcionpow DPT DPT expresion
    (85) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (86) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (87) expresion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (88) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (89) expresion -> . expresion PT SQRT PARIZQ PARDER
    (90) expresion -> . expresion PT ABS PARIZQ PARDER
    (91) expresion -> . expresion PT CLONE PARIZQ PARDER
    (92) expresion -> . expresion PT LEN PARIZQ PARDER
    (93) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (94) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (95) listarreglo -> . empty
    (83) opcionpow -> . expresion
    (84) opcionpow -> . tipos
    (98) empty -> .
    (58) tipos -> . I64
    (59) tipos -> . F64
    (60) tipos -> . BOOL
    (61) tipos -> . CHAR
    (62) tipos -> . STRING
    (63) tipos -> . AMP STR
    (64) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    NOT             shift and go to state 83
    MENOS           shift and go to state 86
    PARIZQ          shift and go to state 88
    ENTERO          shift and go to state 89
    DECIMAL         shift and go to state 90
    FORM            shift and go to state 91
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    VECM            shift and go to state 94
    ID              shift and go to state 96
    POW             shift and go to state 98
    POWF            shift and go to state 99
    LOOP            shift and go to state 100
    CORIZQ          reduce using rule 98 (empty -> .)
    MAS             reduce using rule 98 (empty -> .)
    POR             reduce using rule 98 (empty -> .)
    DIVIDIDO        reduce using rule 98 (empty -> .)
    MOD             reduce using rule 98 (empty -> .)
    AS              reduce using rule 98 (empty -> .)
    PT              reduce using rule 98 (empty -> .)
    IGUAL           reduce using rule 98 (empty -> .)
    MENOR           reduce using rule 98 (empty -> .)
    MAYOR           reduce using rule 98 (empty -> .)
    MEIGUAL         reduce using rule 98 (empty -> .)
    MAIGUAL         reduce using rule 98 (empty -> .)
    DIS             reduce using rule 98 (empty -> .)
    AND             reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    LLAVEIZQ        reduce using rule 98 (empty -> .)
    PTCOMA          reduce using rule 98 (empty -> .)
    PARDER          reduce using rule 98 (empty -> .)
    DPT             reduce using rule 98 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 98 (empty -> .) ]

    logica                         shift and go to state 164
    rel                            shift and go to state 84
    expresion                      shift and go to state 85
    tipos                          shift and go to state 87
    listarreglo                    shift and go to state 95
    opcionpow                      shift and go to state 97
    empty                          shift and go to state 80

state 122

    (38) logica -> logica OR . logica
    (37) logica -> . logica AND logica
    (38) logica -> . logica OR logica
    (39) logica -> . NOT logica
    (40) logica -> . rel
    (41) rel -> . rel IGUAL IGUAL rel
    (42) rel -> . rel MENOR rel
    (43) rel -> . rel MAYOR rel
    (44) rel -> . rel MEIGUAL rel
    (45) rel -> . rel MAIGUAL rel
    (46) rel -> . rel DIS rel
    (47) rel -> . expresion
    (65) expresion -> . expresion MAS expresion
    (66) expresion -> . expresion MENOS expresion
    (67) expresion -> . expresion POR expresion
    (68) expresion -> . expresion DIVIDIDO expresion
    (69) expresion -> . expresion MOD expresion
    (70) expresion -> . expresion AS tipos
    (71) expresion -> . MENOS expresion
    (72) expresion -> . PARIZQ logica PARDER
    (73) expresion -> . ENTERO
    (74) expresion -> . DECIMAL
    (75) expresion -> . FORM
    (76) expresion -> . TRUE
    (77) expresion -> . FALSE
    (78) expresion -> . VECM NOT listarreglo
    (79) expresion -> . ID listarreglo
    (80) expresion -> . ID PARIZQ listexpr PARDER
    (81) expresion -> . listarreglo
    (82) expresion -> . opcionpow DPT DPT expresion
    (85) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (86) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (87) expresion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (88) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (89) expresion -> . expresion PT SQRT PARIZQ PARDER
    (90) expresion -> . expresion PT ABS PARIZQ PARDER
    (91) expresion -> . expresion PT CLONE PARIZQ PARDER
    (92) expresion -> . expresion PT LEN PARIZQ PARDER
    (93) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (94) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (95) listarreglo -> . empty
    (83) opcionpow -> . expresion
    (84) opcionpow -> . tipos
    (98) empty -> .
    (58) tipos -> . I64
    (59) tipos -> . F64
    (60) tipos -> . BOOL
    (61) tipos -> . CHAR
    (62) tipos -> . STRING
    (63) tipos -> . AMP STR
    (64) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    NOT             shift and go to state 83
    MENOS           shift and go to state 86
    PARIZQ          shift and go to state 88
    ENTERO          shift and go to state 89
    DECIMAL         shift and go to state 90
    FORM            shift and go to state 91
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    VECM            shift and go to state 94
    ID              shift and go to state 96
    POW             shift and go to state 98
    POWF            shift and go to state 99
    LOOP            shift and go to state 100
    CORIZQ          reduce using rule 98 (empty -> .)
    MAS             reduce using rule 98 (empty -> .)
    POR             reduce using rule 98 (empty -> .)
    DIVIDIDO        reduce using rule 98 (empty -> .)
    MOD             reduce using rule 98 (empty -> .)
    AS              reduce using rule 98 (empty -> .)
    PT              reduce using rule 98 (empty -> .)
    IGUAL           reduce using rule 98 (empty -> .)
    MENOR           reduce using rule 98 (empty -> .)
    MAYOR           reduce using rule 98 (empty -> .)
    MEIGUAL         reduce using rule 98 (empty -> .)
    MAIGUAL         reduce using rule 98 (empty -> .)
    DIS             reduce using rule 98 (empty -> .)
    AND             reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    LLAVEIZQ        reduce using rule 98 (empty -> .)
    PTCOMA          reduce using rule 98 (empty -> .)
    PARDER          reduce using rule 98 (empty -> .)
    DPT             reduce using rule 98 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 98 (empty -> .) ]

    logica                         shift and go to state 165
    rel                            shift and go to state 84
    expresion                      shift and go to state 85
    tipos                          shift and go to state 87
    listarreglo                    shift and go to state 95
    opcionpow                      shift and go to state 97
    empty                          shift and go to state 80

state 123

    (39) logica -> NOT logica .
    (37) logica -> logica . AND logica
    (38) logica -> logica . OR logica

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    LLAVEIZQ        reduce using rule 39 (logica -> NOT logica .)
    PTCOMA          reduce using rule 39 (logica -> NOT logica .)
    PARDER          reduce using rule 39 (logica -> NOT logica .)
    AND             shift and go to state 121
    OR              shift and go to state 122

  ! AND             [ reduce using rule 39 (logica -> NOT logica .) ]
  ! OR              [ reduce using rule 39 (logica -> NOT logica .) ]


state 124

    (41) rel -> rel IGUAL . IGUAL rel

    IGUAL           shift and go to state 166


state 125

    (42) rel -> rel MENOR . rel
    (41) rel -> . rel IGUAL IGUAL rel
    (42) rel -> . rel MENOR rel
    (43) rel -> . rel MAYOR rel
    (44) rel -> . rel MEIGUAL rel
    (45) rel -> . rel MAIGUAL rel
    (46) rel -> . rel DIS rel
    (47) rel -> . expresion
    (65) expresion -> . expresion MAS expresion
    (66) expresion -> . expresion MENOS expresion
    (67) expresion -> . expresion POR expresion
    (68) expresion -> . expresion DIVIDIDO expresion
    (69) expresion -> . expresion MOD expresion
    (70) expresion -> . expresion AS tipos
    (71) expresion -> . MENOS expresion
    (72) expresion -> . PARIZQ logica PARDER
    (73) expresion -> . ENTERO
    (74) expresion -> . DECIMAL
    (75) expresion -> . FORM
    (76) expresion -> . TRUE
    (77) expresion -> . FALSE
    (78) expresion -> . VECM NOT listarreglo
    (79) expresion -> . ID listarreglo
    (80) expresion -> . ID PARIZQ listexpr PARDER
    (81) expresion -> . listarreglo
    (82) expresion -> . opcionpow DPT DPT expresion
    (85) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (86) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (87) expresion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (88) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (89) expresion -> . expresion PT SQRT PARIZQ PARDER
    (90) expresion -> . expresion PT ABS PARIZQ PARDER
    (91) expresion -> . expresion PT CLONE PARIZQ PARDER
    (92) expresion -> . expresion PT LEN PARIZQ PARDER
    (93) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (94) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (95) listarreglo -> . empty
    (83) opcionpow -> . expresion
    (84) opcionpow -> . tipos
    (98) empty -> .
    (58) tipos -> . I64
    (59) tipos -> . F64
    (60) tipos -> . BOOL
    (61) tipos -> . CHAR
    (62) tipos -> . STRING
    (63) tipos -> . AMP STR
    (64) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    MENOS           shift and go to state 86
    PARIZQ          shift and go to state 88
    ENTERO          shift and go to state 89
    DECIMAL         shift and go to state 90
    FORM            shift and go to state 91
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    VECM            shift and go to state 94
    ID              shift and go to state 96
    POW             shift and go to state 98
    POWF            shift and go to state 99
    LOOP            shift and go to state 100
    CORIZQ          reduce using rule 98 (empty -> .)
    MAS             reduce using rule 98 (empty -> .)
    POR             reduce using rule 98 (empty -> .)
    DIVIDIDO        reduce using rule 98 (empty -> .)
    MOD             reduce using rule 98 (empty -> .)
    AS              reduce using rule 98 (empty -> .)
    PT              reduce using rule 98 (empty -> .)
    IGUAL           reduce using rule 98 (empty -> .)
    MENOR           reduce using rule 98 (empty -> .)
    MAYOR           reduce using rule 98 (empty -> .)
    MEIGUAL         reduce using rule 98 (empty -> .)
    MAIGUAL         reduce using rule 98 (empty -> .)
    DIS             reduce using rule 98 (empty -> .)
    LLAVEIZQ        reduce using rule 98 (empty -> .)
    AND             reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    PTCOMA          reduce using rule 98 (empty -> .)
    PARDER          reduce using rule 98 (empty -> .)
    DPT             reduce using rule 98 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 98 (empty -> .) ]

    rel                            shift and go to state 167
    expresion                      shift and go to state 85
    tipos                          shift and go to state 87
    listarreglo                    shift and go to state 95
    opcionpow                      shift and go to state 97
    empty                          shift and go to state 80

state 126

    (43) rel -> rel MAYOR . rel
    (41) rel -> . rel IGUAL IGUAL rel
    (42) rel -> . rel MENOR rel
    (43) rel -> . rel MAYOR rel
    (44) rel -> . rel MEIGUAL rel
    (45) rel -> . rel MAIGUAL rel
    (46) rel -> . rel DIS rel
    (47) rel -> . expresion
    (65) expresion -> . expresion MAS expresion
    (66) expresion -> . expresion MENOS expresion
    (67) expresion -> . expresion POR expresion
    (68) expresion -> . expresion DIVIDIDO expresion
    (69) expresion -> . expresion MOD expresion
    (70) expresion -> . expresion AS tipos
    (71) expresion -> . MENOS expresion
    (72) expresion -> . PARIZQ logica PARDER
    (73) expresion -> . ENTERO
    (74) expresion -> . DECIMAL
    (75) expresion -> . FORM
    (76) expresion -> . TRUE
    (77) expresion -> . FALSE
    (78) expresion -> . VECM NOT listarreglo
    (79) expresion -> . ID listarreglo
    (80) expresion -> . ID PARIZQ listexpr PARDER
    (81) expresion -> . listarreglo
    (82) expresion -> . opcionpow DPT DPT expresion
    (85) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (86) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (87) expresion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (88) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (89) expresion -> . expresion PT SQRT PARIZQ PARDER
    (90) expresion -> . expresion PT ABS PARIZQ PARDER
    (91) expresion -> . expresion PT CLONE PARIZQ PARDER
    (92) expresion -> . expresion PT LEN PARIZQ PARDER
    (93) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (94) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (95) listarreglo -> . empty
    (83) opcionpow -> . expresion
    (84) opcionpow -> . tipos
    (98) empty -> .
    (58) tipos -> . I64
    (59) tipos -> . F64
    (60) tipos -> . BOOL
    (61) tipos -> . CHAR
    (62) tipos -> . STRING
    (63) tipos -> . AMP STR
    (64) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    MENOS           shift and go to state 86
    PARIZQ          shift and go to state 88
    ENTERO          shift and go to state 89
    DECIMAL         shift and go to state 90
    FORM            shift and go to state 91
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    VECM            shift and go to state 94
    ID              shift and go to state 96
    POW             shift and go to state 98
    POWF            shift and go to state 99
    LOOP            shift and go to state 100
    CORIZQ          reduce using rule 98 (empty -> .)
    MAS             reduce using rule 98 (empty -> .)
    POR             reduce using rule 98 (empty -> .)
    DIVIDIDO        reduce using rule 98 (empty -> .)
    MOD             reduce using rule 98 (empty -> .)
    AS              reduce using rule 98 (empty -> .)
    PT              reduce using rule 98 (empty -> .)
    IGUAL           reduce using rule 98 (empty -> .)
    MENOR           reduce using rule 98 (empty -> .)
    MAYOR           reduce using rule 98 (empty -> .)
    MEIGUAL         reduce using rule 98 (empty -> .)
    MAIGUAL         reduce using rule 98 (empty -> .)
    DIS             reduce using rule 98 (empty -> .)
    LLAVEIZQ        reduce using rule 98 (empty -> .)
    AND             reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    PTCOMA          reduce using rule 98 (empty -> .)
    PARDER          reduce using rule 98 (empty -> .)
    DPT             reduce using rule 98 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 98 (empty -> .) ]

    rel                            shift and go to state 168
    expresion                      shift and go to state 85
    tipos                          shift and go to state 87
    listarreglo                    shift and go to state 95
    opcionpow                      shift and go to state 97
    empty                          shift and go to state 80

state 127

    (44) rel -> rel MEIGUAL . rel
    (41) rel -> . rel IGUAL IGUAL rel
    (42) rel -> . rel MENOR rel
    (43) rel -> . rel MAYOR rel
    (44) rel -> . rel MEIGUAL rel
    (45) rel -> . rel MAIGUAL rel
    (46) rel -> . rel DIS rel
    (47) rel -> . expresion
    (65) expresion -> . expresion MAS expresion
    (66) expresion -> . expresion MENOS expresion
    (67) expresion -> . expresion POR expresion
    (68) expresion -> . expresion DIVIDIDO expresion
    (69) expresion -> . expresion MOD expresion
    (70) expresion -> . expresion AS tipos
    (71) expresion -> . MENOS expresion
    (72) expresion -> . PARIZQ logica PARDER
    (73) expresion -> . ENTERO
    (74) expresion -> . DECIMAL
    (75) expresion -> . FORM
    (76) expresion -> . TRUE
    (77) expresion -> . FALSE
    (78) expresion -> . VECM NOT listarreglo
    (79) expresion -> . ID listarreglo
    (80) expresion -> . ID PARIZQ listexpr PARDER
    (81) expresion -> . listarreglo
    (82) expresion -> . opcionpow DPT DPT expresion
    (85) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (86) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (87) expresion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (88) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (89) expresion -> . expresion PT SQRT PARIZQ PARDER
    (90) expresion -> . expresion PT ABS PARIZQ PARDER
    (91) expresion -> . expresion PT CLONE PARIZQ PARDER
    (92) expresion -> . expresion PT LEN PARIZQ PARDER
    (93) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (94) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (95) listarreglo -> . empty
    (83) opcionpow -> . expresion
    (84) opcionpow -> . tipos
    (98) empty -> .
    (58) tipos -> . I64
    (59) tipos -> . F64
    (60) tipos -> . BOOL
    (61) tipos -> . CHAR
    (62) tipos -> . STRING
    (63) tipos -> . AMP STR
    (64) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    MENOS           shift and go to state 86
    PARIZQ          shift and go to state 88
    ENTERO          shift and go to state 89
    DECIMAL         shift and go to state 90
    FORM            shift and go to state 91
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    VECM            shift and go to state 94
    ID              shift and go to state 96
    POW             shift and go to state 98
    POWF            shift and go to state 99
    LOOP            shift and go to state 100
    CORIZQ          reduce using rule 98 (empty -> .)
    MAS             reduce using rule 98 (empty -> .)
    POR             reduce using rule 98 (empty -> .)
    DIVIDIDO        reduce using rule 98 (empty -> .)
    MOD             reduce using rule 98 (empty -> .)
    AS              reduce using rule 98 (empty -> .)
    PT              reduce using rule 98 (empty -> .)
    IGUAL           reduce using rule 98 (empty -> .)
    MENOR           reduce using rule 98 (empty -> .)
    MAYOR           reduce using rule 98 (empty -> .)
    MEIGUAL         reduce using rule 98 (empty -> .)
    MAIGUAL         reduce using rule 98 (empty -> .)
    DIS             reduce using rule 98 (empty -> .)
    LLAVEIZQ        reduce using rule 98 (empty -> .)
    AND             reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    PTCOMA          reduce using rule 98 (empty -> .)
    PARDER          reduce using rule 98 (empty -> .)
    DPT             reduce using rule 98 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 98 (empty -> .) ]

    rel                            shift and go to state 169
    expresion                      shift and go to state 85
    tipos                          shift and go to state 87
    listarreglo                    shift and go to state 95
    opcionpow                      shift and go to state 97
    empty                          shift and go to state 80

state 128

    (45) rel -> rel MAIGUAL . rel
    (41) rel -> . rel IGUAL IGUAL rel
    (42) rel -> . rel MENOR rel
    (43) rel -> . rel MAYOR rel
    (44) rel -> . rel MEIGUAL rel
    (45) rel -> . rel MAIGUAL rel
    (46) rel -> . rel DIS rel
    (47) rel -> . expresion
    (65) expresion -> . expresion MAS expresion
    (66) expresion -> . expresion MENOS expresion
    (67) expresion -> . expresion POR expresion
    (68) expresion -> . expresion DIVIDIDO expresion
    (69) expresion -> . expresion MOD expresion
    (70) expresion -> . expresion AS tipos
    (71) expresion -> . MENOS expresion
    (72) expresion -> . PARIZQ logica PARDER
    (73) expresion -> . ENTERO
    (74) expresion -> . DECIMAL
    (75) expresion -> . FORM
    (76) expresion -> . TRUE
    (77) expresion -> . FALSE
    (78) expresion -> . VECM NOT listarreglo
    (79) expresion -> . ID listarreglo
    (80) expresion -> . ID PARIZQ listexpr PARDER
    (81) expresion -> . listarreglo
    (82) expresion -> . opcionpow DPT DPT expresion
    (85) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (86) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (87) expresion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (88) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (89) expresion -> . expresion PT SQRT PARIZQ PARDER
    (90) expresion -> . expresion PT ABS PARIZQ PARDER
    (91) expresion -> . expresion PT CLONE PARIZQ PARDER
    (92) expresion -> . expresion PT LEN PARIZQ PARDER
    (93) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (94) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (95) listarreglo -> . empty
    (83) opcionpow -> . expresion
    (84) opcionpow -> . tipos
    (98) empty -> .
    (58) tipos -> . I64
    (59) tipos -> . F64
    (60) tipos -> . BOOL
    (61) tipos -> . CHAR
    (62) tipos -> . STRING
    (63) tipos -> . AMP STR
    (64) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    MENOS           shift and go to state 86
    PARIZQ          shift and go to state 88
    ENTERO          shift and go to state 89
    DECIMAL         shift and go to state 90
    FORM            shift and go to state 91
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    VECM            shift and go to state 94
    ID              shift and go to state 96
    POW             shift and go to state 98
    POWF            shift and go to state 99
    LOOP            shift and go to state 100
    CORIZQ          reduce using rule 98 (empty -> .)
    MAS             reduce using rule 98 (empty -> .)
    POR             reduce using rule 98 (empty -> .)
    DIVIDIDO        reduce using rule 98 (empty -> .)
    MOD             reduce using rule 98 (empty -> .)
    AS              reduce using rule 98 (empty -> .)
    PT              reduce using rule 98 (empty -> .)
    IGUAL           reduce using rule 98 (empty -> .)
    MENOR           reduce using rule 98 (empty -> .)
    MAYOR           reduce using rule 98 (empty -> .)
    MEIGUAL         reduce using rule 98 (empty -> .)
    MAIGUAL         reduce using rule 98 (empty -> .)
    DIS             reduce using rule 98 (empty -> .)
    LLAVEIZQ        reduce using rule 98 (empty -> .)
    AND             reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    PTCOMA          reduce using rule 98 (empty -> .)
    PARDER          reduce using rule 98 (empty -> .)
    DPT             reduce using rule 98 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 98 (empty -> .) ]

    rel                            shift and go to state 170
    expresion                      shift and go to state 85
    tipos                          shift and go to state 87
    listarreglo                    shift and go to state 95
    opcionpow                      shift and go to state 97
    empty                          shift and go to state 80

state 129

    (46) rel -> rel DIS . rel
    (41) rel -> . rel IGUAL IGUAL rel
    (42) rel -> . rel MENOR rel
    (43) rel -> . rel MAYOR rel
    (44) rel -> . rel MEIGUAL rel
    (45) rel -> . rel MAIGUAL rel
    (46) rel -> . rel DIS rel
    (47) rel -> . expresion
    (65) expresion -> . expresion MAS expresion
    (66) expresion -> . expresion MENOS expresion
    (67) expresion -> . expresion POR expresion
    (68) expresion -> . expresion DIVIDIDO expresion
    (69) expresion -> . expresion MOD expresion
    (70) expresion -> . expresion AS tipos
    (71) expresion -> . MENOS expresion
    (72) expresion -> . PARIZQ logica PARDER
    (73) expresion -> . ENTERO
    (74) expresion -> . DECIMAL
    (75) expresion -> . FORM
    (76) expresion -> . TRUE
    (77) expresion -> . FALSE
    (78) expresion -> . VECM NOT listarreglo
    (79) expresion -> . ID listarreglo
    (80) expresion -> . ID PARIZQ listexpr PARDER
    (81) expresion -> . listarreglo
    (82) expresion -> . opcionpow DPT DPT expresion
    (85) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (86) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (87) expresion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (88) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (89) expresion -> . expresion PT SQRT PARIZQ PARDER
    (90) expresion -> . expresion PT ABS PARIZQ PARDER
    (91) expresion -> . expresion PT CLONE PARIZQ PARDER
    (92) expresion -> . expresion PT LEN PARIZQ PARDER
    (93) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (94) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (95) listarreglo -> . empty
    (83) opcionpow -> . expresion
    (84) opcionpow -> . tipos
    (98) empty -> .
    (58) tipos -> . I64
    (59) tipos -> . F64
    (60) tipos -> . BOOL
    (61) tipos -> . CHAR
    (62) tipos -> . STRING
    (63) tipos -> . AMP STR
    (64) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    MENOS           shift and go to state 86
    PARIZQ          shift and go to state 88
    ENTERO          shift and go to state 89
    DECIMAL         shift and go to state 90
    FORM            shift and go to state 91
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    VECM            shift and go to state 94
    ID              shift and go to state 96
    POW             shift and go to state 98
    POWF            shift and go to state 99
    LOOP            shift and go to state 100
    CORIZQ          reduce using rule 98 (empty -> .)
    MAS             reduce using rule 98 (empty -> .)
    POR             reduce using rule 98 (empty -> .)
    DIVIDIDO        reduce using rule 98 (empty -> .)
    MOD             reduce using rule 98 (empty -> .)
    AS              reduce using rule 98 (empty -> .)
    PT              reduce using rule 98 (empty -> .)
    IGUAL           reduce using rule 98 (empty -> .)
    MENOR           reduce using rule 98 (empty -> .)
    MAYOR           reduce using rule 98 (empty -> .)
    MEIGUAL         reduce using rule 98 (empty -> .)
    MAIGUAL         reduce using rule 98 (empty -> .)
    DIS             reduce using rule 98 (empty -> .)
    LLAVEIZQ        reduce using rule 98 (empty -> .)
    AND             reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    PTCOMA          reduce using rule 98 (empty -> .)
    PARDER          reduce using rule 98 (empty -> .)
    DPT             reduce using rule 98 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 98 (empty -> .) ]

    rel                            shift and go to state 171
    expresion                      shift and go to state 85
    tipos                          shift and go to state 87
    listarreglo                    shift and go to state 95
    opcionpow                      shift and go to state 97
    empty                          shift and go to state 80

state 130

    (65) expresion -> expresion MAS . expresion
    (65) expresion -> . expresion MAS expresion
    (66) expresion -> . expresion MENOS expresion
    (67) expresion -> . expresion POR expresion
    (68) expresion -> . expresion DIVIDIDO expresion
    (69) expresion -> . expresion MOD expresion
    (70) expresion -> . expresion AS tipos
    (71) expresion -> . MENOS expresion
    (72) expresion -> . PARIZQ logica PARDER
    (73) expresion -> . ENTERO
    (74) expresion -> . DECIMAL
    (75) expresion -> . FORM
    (76) expresion -> . TRUE
    (77) expresion -> . FALSE
    (78) expresion -> . VECM NOT listarreglo
    (79) expresion -> . ID listarreglo
    (80) expresion -> . ID PARIZQ listexpr PARDER
    (81) expresion -> . listarreglo
    (82) expresion -> . opcionpow DPT DPT expresion
    (85) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (86) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (87) expresion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (88) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (89) expresion -> . expresion PT SQRT PARIZQ PARDER
    (90) expresion -> . expresion PT ABS PARIZQ PARDER
    (91) expresion -> . expresion PT CLONE PARIZQ PARDER
    (92) expresion -> . expresion PT LEN PARIZQ PARDER
    (93) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (94) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (95) listarreglo -> . empty
    (83) opcionpow -> . expresion
    (84) opcionpow -> . tipos
    (98) empty -> .
    (58) tipos -> . I64
    (59) tipos -> . F64
    (60) tipos -> . BOOL
    (61) tipos -> . CHAR
    (62) tipos -> . STRING
    (63) tipos -> . AMP STR
    (64) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    MENOS           shift and go to state 86
    PARIZQ          shift and go to state 88
    ENTERO          shift and go to state 89
    DECIMAL         shift and go to state 90
    FORM            shift and go to state 91
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    VECM            shift and go to state 94
    ID              shift and go to state 96
    POW             shift and go to state 98
    POWF            shift and go to state 99
    LOOP            shift and go to state 100
    CORIZQ          reduce using rule 98 (empty -> .)
    MAS             reduce using rule 98 (empty -> .)
    POR             reduce using rule 98 (empty -> .)
    DIVIDIDO        reduce using rule 98 (empty -> .)
    MOD             reduce using rule 98 (empty -> .)
    AS              reduce using rule 98 (empty -> .)
    PT              reduce using rule 98 (empty -> .)
    IGUAL           reduce using rule 98 (empty -> .)
    MENOR           reduce using rule 98 (empty -> .)
    MAYOR           reduce using rule 98 (empty -> .)
    MEIGUAL         reduce using rule 98 (empty -> .)
    MAIGUAL         reduce using rule 98 (empty -> .)
    DIS             reduce using rule 98 (empty -> .)
    LLAVEIZQ        reduce using rule 98 (empty -> .)
    AND             reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    DPT             reduce using rule 98 (empty -> .)
    PTCOMA          reduce using rule 98 (empty -> .)
    PARDER          reduce using rule 98 (empty -> .)
    COMA            reduce using rule 98 (empty -> .)
    CORDER          reduce using rule 98 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 98 (empty -> .) ]

    expresion                      shift and go to state 172
    tipos                          shift and go to state 87
    listarreglo                    shift and go to state 95
    opcionpow                      shift and go to state 97
    empty                          shift and go to state 80

state 131

    (66) expresion -> expresion MENOS . expresion
    (65) expresion -> . expresion MAS expresion
    (66) expresion -> . expresion MENOS expresion
    (67) expresion -> . expresion POR expresion
    (68) expresion -> . expresion DIVIDIDO expresion
    (69) expresion -> . expresion MOD expresion
    (70) expresion -> . expresion AS tipos
    (71) expresion -> . MENOS expresion
    (72) expresion -> . PARIZQ logica PARDER
    (73) expresion -> . ENTERO
    (74) expresion -> . DECIMAL
    (75) expresion -> . FORM
    (76) expresion -> . TRUE
    (77) expresion -> . FALSE
    (78) expresion -> . VECM NOT listarreglo
    (79) expresion -> . ID listarreglo
    (80) expresion -> . ID PARIZQ listexpr PARDER
    (81) expresion -> . listarreglo
    (82) expresion -> . opcionpow DPT DPT expresion
    (85) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (86) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (87) expresion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (88) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (89) expresion -> . expresion PT SQRT PARIZQ PARDER
    (90) expresion -> . expresion PT ABS PARIZQ PARDER
    (91) expresion -> . expresion PT CLONE PARIZQ PARDER
    (92) expresion -> . expresion PT LEN PARIZQ PARDER
    (93) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (94) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (95) listarreglo -> . empty
    (83) opcionpow -> . expresion
    (84) opcionpow -> . tipos
    (98) empty -> .
    (58) tipos -> . I64
    (59) tipos -> . F64
    (60) tipos -> . BOOL
    (61) tipos -> . CHAR
    (62) tipos -> . STRING
    (63) tipos -> . AMP STR
    (64) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    MENOS           shift and go to state 86
    PARIZQ          shift and go to state 88
    ENTERO          shift and go to state 89
    DECIMAL         shift and go to state 90
    FORM            shift and go to state 91
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    VECM            shift and go to state 94
    ID              shift and go to state 96
    POW             shift and go to state 98
    POWF            shift and go to state 99
    LOOP            shift and go to state 100
    CORIZQ          reduce using rule 98 (empty -> .)
    MAS             reduce using rule 98 (empty -> .)
    POR             reduce using rule 98 (empty -> .)
    DIVIDIDO        reduce using rule 98 (empty -> .)
    MOD             reduce using rule 98 (empty -> .)
    AS              reduce using rule 98 (empty -> .)
    PT              reduce using rule 98 (empty -> .)
    IGUAL           reduce using rule 98 (empty -> .)
    MENOR           reduce using rule 98 (empty -> .)
    MAYOR           reduce using rule 98 (empty -> .)
    MEIGUAL         reduce using rule 98 (empty -> .)
    MAIGUAL         reduce using rule 98 (empty -> .)
    DIS             reduce using rule 98 (empty -> .)
    LLAVEIZQ        reduce using rule 98 (empty -> .)
    AND             reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    DPT             reduce using rule 98 (empty -> .)
    PTCOMA          reduce using rule 98 (empty -> .)
    PARDER          reduce using rule 98 (empty -> .)
    COMA            reduce using rule 98 (empty -> .)
    CORDER          reduce using rule 98 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 98 (empty -> .) ]

    expresion                      shift and go to state 173
    tipos                          shift and go to state 87
    listarreglo                    shift and go to state 95
    opcionpow                      shift and go to state 97
    empty                          shift and go to state 80

state 132

    (67) expresion -> expresion POR . expresion
    (65) expresion -> . expresion MAS expresion
    (66) expresion -> . expresion MENOS expresion
    (67) expresion -> . expresion POR expresion
    (68) expresion -> . expresion DIVIDIDO expresion
    (69) expresion -> . expresion MOD expresion
    (70) expresion -> . expresion AS tipos
    (71) expresion -> . MENOS expresion
    (72) expresion -> . PARIZQ logica PARDER
    (73) expresion -> . ENTERO
    (74) expresion -> . DECIMAL
    (75) expresion -> . FORM
    (76) expresion -> . TRUE
    (77) expresion -> . FALSE
    (78) expresion -> . VECM NOT listarreglo
    (79) expresion -> . ID listarreglo
    (80) expresion -> . ID PARIZQ listexpr PARDER
    (81) expresion -> . listarreglo
    (82) expresion -> . opcionpow DPT DPT expresion
    (85) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (86) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (87) expresion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (88) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (89) expresion -> . expresion PT SQRT PARIZQ PARDER
    (90) expresion -> . expresion PT ABS PARIZQ PARDER
    (91) expresion -> . expresion PT CLONE PARIZQ PARDER
    (92) expresion -> . expresion PT LEN PARIZQ PARDER
    (93) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (94) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (95) listarreglo -> . empty
    (83) opcionpow -> . expresion
    (84) opcionpow -> . tipos
    (98) empty -> .
    (58) tipos -> . I64
    (59) tipos -> . F64
    (60) tipos -> . BOOL
    (61) tipos -> . CHAR
    (62) tipos -> . STRING
    (63) tipos -> . AMP STR
    (64) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    MENOS           shift and go to state 86
    PARIZQ          shift and go to state 88
    ENTERO          shift and go to state 89
    DECIMAL         shift and go to state 90
    FORM            shift and go to state 91
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    VECM            shift and go to state 94
    ID              shift and go to state 96
    POW             shift and go to state 98
    POWF            shift and go to state 99
    LOOP            shift and go to state 100
    CORIZQ          reduce using rule 98 (empty -> .)
    MAS             reduce using rule 98 (empty -> .)
    POR             reduce using rule 98 (empty -> .)
    DIVIDIDO        reduce using rule 98 (empty -> .)
    MOD             reduce using rule 98 (empty -> .)
    AS              reduce using rule 98 (empty -> .)
    PT              reduce using rule 98 (empty -> .)
    IGUAL           reduce using rule 98 (empty -> .)
    MENOR           reduce using rule 98 (empty -> .)
    MAYOR           reduce using rule 98 (empty -> .)
    MEIGUAL         reduce using rule 98 (empty -> .)
    MAIGUAL         reduce using rule 98 (empty -> .)
    DIS             reduce using rule 98 (empty -> .)
    LLAVEIZQ        reduce using rule 98 (empty -> .)
    AND             reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    DPT             reduce using rule 98 (empty -> .)
    PTCOMA          reduce using rule 98 (empty -> .)
    PARDER          reduce using rule 98 (empty -> .)
    COMA            reduce using rule 98 (empty -> .)
    CORDER          reduce using rule 98 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 98 (empty -> .) ]

    expresion                      shift and go to state 174
    tipos                          shift and go to state 87
    listarreglo                    shift and go to state 95
    opcionpow                      shift and go to state 97
    empty                          shift and go to state 80

state 133

    (68) expresion -> expresion DIVIDIDO . expresion
    (65) expresion -> . expresion MAS expresion
    (66) expresion -> . expresion MENOS expresion
    (67) expresion -> . expresion POR expresion
    (68) expresion -> . expresion DIVIDIDO expresion
    (69) expresion -> . expresion MOD expresion
    (70) expresion -> . expresion AS tipos
    (71) expresion -> . MENOS expresion
    (72) expresion -> . PARIZQ logica PARDER
    (73) expresion -> . ENTERO
    (74) expresion -> . DECIMAL
    (75) expresion -> . FORM
    (76) expresion -> . TRUE
    (77) expresion -> . FALSE
    (78) expresion -> . VECM NOT listarreglo
    (79) expresion -> . ID listarreglo
    (80) expresion -> . ID PARIZQ listexpr PARDER
    (81) expresion -> . listarreglo
    (82) expresion -> . opcionpow DPT DPT expresion
    (85) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (86) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (87) expresion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (88) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (89) expresion -> . expresion PT SQRT PARIZQ PARDER
    (90) expresion -> . expresion PT ABS PARIZQ PARDER
    (91) expresion -> . expresion PT CLONE PARIZQ PARDER
    (92) expresion -> . expresion PT LEN PARIZQ PARDER
    (93) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (94) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (95) listarreglo -> . empty
    (83) opcionpow -> . expresion
    (84) opcionpow -> . tipos
    (98) empty -> .
    (58) tipos -> . I64
    (59) tipos -> . F64
    (60) tipos -> . BOOL
    (61) tipos -> . CHAR
    (62) tipos -> . STRING
    (63) tipos -> . AMP STR
    (64) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    MENOS           shift and go to state 86
    PARIZQ          shift and go to state 88
    ENTERO          shift and go to state 89
    DECIMAL         shift and go to state 90
    FORM            shift and go to state 91
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    VECM            shift and go to state 94
    ID              shift and go to state 96
    POW             shift and go to state 98
    POWF            shift and go to state 99
    LOOP            shift and go to state 100
    CORIZQ          reduce using rule 98 (empty -> .)
    MAS             reduce using rule 98 (empty -> .)
    POR             reduce using rule 98 (empty -> .)
    DIVIDIDO        reduce using rule 98 (empty -> .)
    MOD             reduce using rule 98 (empty -> .)
    AS              reduce using rule 98 (empty -> .)
    PT              reduce using rule 98 (empty -> .)
    IGUAL           reduce using rule 98 (empty -> .)
    MENOR           reduce using rule 98 (empty -> .)
    MAYOR           reduce using rule 98 (empty -> .)
    MEIGUAL         reduce using rule 98 (empty -> .)
    MAIGUAL         reduce using rule 98 (empty -> .)
    DIS             reduce using rule 98 (empty -> .)
    LLAVEIZQ        reduce using rule 98 (empty -> .)
    AND             reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    DPT             reduce using rule 98 (empty -> .)
    PTCOMA          reduce using rule 98 (empty -> .)
    PARDER          reduce using rule 98 (empty -> .)
    COMA            reduce using rule 98 (empty -> .)
    CORDER          reduce using rule 98 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 98 (empty -> .) ]

    expresion                      shift and go to state 175
    tipos                          shift and go to state 87
    listarreglo                    shift and go to state 95
    opcionpow                      shift and go to state 97
    empty                          shift and go to state 80

state 134

    (69) expresion -> expresion MOD . expresion
    (65) expresion -> . expresion MAS expresion
    (66) expresion -> . expresion MENOS expresion
    (67) expresion -> . expresion POR expresion
    (68) expresion -> . expresion DIVIDIDO expresion
    (69) expresion -> . expresion MOD expresion
    (70) expresion -> . expresion AS tipos
    (71) expresion -> . MENOS expresion
    (72) expresion -> . PARIZQ logica PARDER
    (73) expresion -> . ENTERO
    (74) expresion -> . DECIMAL
    (75) expresion -> . FORM
    (76) expresion -> . TRUE
    (77) expresion -> . FALSE
    (78) expresion -> . VECM NOT listarreglo
    (79) expresion -> . ID listarreglo
    (80) expresion -> . ID PARIZQ listexpr PARDER
    (81) expresion -> . listarreglo
    (82) expresion -> . opcionpow DPT DPT expresion
    (85) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (86) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (87) expresion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (88) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (89) expresion -> . expresion PT SQRT PARIZQ PARDER
    (90) expresion -> . expresion PT ABS PARIZQ PARDER
    (91) expresion -> . expresion PT CLONE PARIZQ PARDER
    (92) expresion -> . expresion PT LEN PARIZQ PARDER
    (93) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (94) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (95) listarreglo -> . empty
    (83) opcionpow -> . expresion
    (84) opcionpow -> . tipos
    (98) empty -> .
    (58) tipos -> . I64
    (59) tipos -> . F64
    (60) tipos -> . BOOL
    (61) tipos -> . CHAR
    (62) tipos -> . STRING
    (63) tipos -> . AMP STR
    (64) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    MENOS           shift and go to state 86
    PARIZQ          shift and go to state 88
    ENTERO          shift and go to state 89
    DECIMAL         shift and go to state 90
    FORM            shift and go to state 91
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    VECM            shift and go to state 94
    ID              shift and go to state 96
    POW             shift and go to state 98
    POWF            shift and go to state 99
    LOOP            shift and go to state 100
    CORIZQ          reduce using rule 98 (empty -> .)
    MAS             reduce using rule 98 (empty -> .)
    POR             reduce using rule 98 (empty -> .)
    DIVIDIDO        reduce using rule 98 (empty -> .)
    MOD             reduce using rule 98 (empty -> .)
    AS              reduce using rule 98 (empty -> .)
    PT              reduce using rule 98 (empty -> .)
    IGUAL           reduce using rule 98 (empty -> .)
    MENOR           reduce using rule 98 (empty -> .)
    MAYOR           reduce using rule 98 (empty -> .)
    MEIGUAL         reduce using rule 98 (empty -> .)
    MAIGUAL         reduce using rule 98 (empty -> .)
    DIS             reduce using rule 98 (empty -> .)
    LLAVEIZQ        reduce using rule 98 (empty -> .)
    AND             reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    DPT             reduce using rule 98 (empty -> .)
    PTCOMA          reduce using rule 98 (empty -> .)
    PARDER          reduce using rule 98 (empty -> .)
    COMA            reduce using rule 98 (empty -> .)
    CORDER          reduce using rule 98 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 98 (empty -> .) ]

    expresion                      shift and go to state 176
    tipos                          shift and go to state 87
    listarreglo                    shift and go to state 95
    opcionpow                      shift and go to state 97
    empty                          shift and go to state 80

state 135

    (70) expresion -> expresion AS . tipos
    (58) tipos -> . I64
    (59) tipos -> . F64
    (60) tipos -> . BOOL
    (61) tipos -> . CHAR
    (62) tipos -> . STRING
    (63) tipos -> . AMP STR
    (64) tipos -> . USIZE

    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

    tipos                          shift and go to state 177

state 136

    (88) expresion -> expresion PT . TOSTRING PARIZQ PARDER
    (89) expresion -> expresion PT . SQRT PARIZQ PARDER
    (90) expresion -> expresion PT . ABS PARIZQ PARDER
    (91) expresion -> expresion PT . CLONE PARIZQ PARDER
    (92) expresion -> expresion PT . LEN PARIZQ PARDER
    (93) expresion -> expresion PT . TOOWNED PARIZQ PARDER

    TOSTRING        shift and go to state 178
    SQRT            shift and go to state 179
    ABS             shift and go to state 180
    CLONE           shift and go to state 181
    LEN             shift and go to state 182
    TOOWNED         shift and go to state 183


state 137

    (71) expresion -> MENOS expresion .
    (65) expresion -> expresion . MAS expresion
    (66) expresion -> expresion . MENOS expresion
    (67) expresion -> expresion . POR expresion
    (68) expresion -> expresion . DIVIDIDO expresion
    (69) expresion -> expresion . MOD expresion
    (70) expresion -> expresion . AS tipos
    (88) expresion -> expresion . PT TOSTRING PARIZQ PARDER
    (89) expresion -> expresion . PT SQRT PARIZQ PARDER
    (90) expresion -> expresion . PT ABS PARIZQ PARDER
    (91) expresion -> expresion . PT CLONE PARIZQ PARDER
    (92) expresion -> expresion . PT LEN PARIZQ PARDER
    (93) expresion -> expresion . PT TOOWNED PARIZQ PARDER
    (83) opcionpow -> expresion .

  ! reduce/reduce conflict for DPT resolved using rule 71 (expresion -> MENOS expresion .)
    MAS             reduce using rule 71 (expresion -> MENOS expresion .)
    MENOS           reduce using rule 71 (expresion -> MENOS expresion .)
    POR             reduce using rule 71 (expresion -> MENOS expresion .)
    DIVIDIDO        reduce using rule 71 (expresion -> MENOS expresion .)
    MOD             reduce using rule 71 (expresion -> MENOS expresion .)
    AS              reduce using rule 71 (expresion -> MENOS expresion .)
    PT              reduce using rule 71 (expresion -> MENOS expresion .)
    IGUAL           reduce using rule 71 (expresion -> MENOS expresion .)
    MENOR           reduce using rule 71 (expresion -> MENOS expresion .)
    MAYOR           reduce using rule 71 (expresion -> MENOS expresion .)
    MEIGUAL         reduce using rule 71 (expresion -> MENOS expresion .)
    MAIGUAL         reduce using rule 71 (expresion -> MENOS expresion .)
    DIS             reduce using rule 71 (expresion -> MENOS expresion .)
    LLAVEIZQ        reduce using rule 71 (expresion -> MENOS expresion .)
    AND             reduce using rule 71 (expresion -> MENOS expresion .)
    OR              reduce using rule 71 (expresion -> MENOS expresion .)
    DPT             reduce using rule 71 (expresion -> MENOS expresion .)
    PTCOMA          reduce using rule 71 (expresion -> MENOS expresion .)
    PARDER          reduce using rule 71 (expresion -> MENOS expresion .)
    COMA            reduce using rule 71 (expresion -> MENOS expresion .)
    CORDER          reduce using rule 71 (expresion -> MENOS expresion .)

  ! MAS             [ shift and go to state 130 ]
  ! MENOS           [ shift and go to state 131 ]
  ! POR             [ shift and go to state 132 ]
  ! DIVIDIDO        [ shift and go to state 133 ]
  ! MOD             [ shift and go to state 134 ]
  ! AS              [ shift and go to state 135 ]
  ! PT              [ shift and go to state 136 ]
  ! DPT             [ reduce using rule 83 (opcionpow -> expresion .) ]


state 138

    (72) expresion -> PARIZQ logica . PARDER
    (37) logica -> logica . AND logica
    (38) logica -> logica . OR logica

    PARDER          shift and go to state 184
    AND             shift and go to state 121
    OR              shift and go to state 122


state 139

    (78) expresion -> VECM NOT . listarreglo
    (94) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (95) listarreglo -> . empty
    (98) empty -> .

    CORIZQ          reduce using rule 98 (empty -> .)
    MAS             reduce using rule 98 (empty -> .)
    MENOS           reduce using rule 98 (empty -> .)
    POR             reduce using rule 98 (empty -> .)
    DIVIDIDO        reduce using rule 98 (empty -> .)
    MOD             reduce using rule 98 (empty -> .)
    AS              reduce using rule 98 (empty -> .)
    PT              reduce using rule 98 (empty -> .)
    IGUAL           reduce using rule 98 (empty -> .)
    MENOR           reduce using rule 98 (empty -> .)
    MAYOR           reduce using rule 98 (empty -> .)
    MEIGUAL         reduce using rule 98 (empty -> .)
    MAIGUAL         reduce using rule 98 (empty -> .)
    DIS             reduce using rule 98 (empty -> .)
    LLAVEIZQ        reduce using rule 98 (empty -> .)
    AND             reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    DPT             reduce using rule 98 (empty -> .)
    PTCOMA          reduce using rule 98 (empty -> .)
    PARDER          reduce using rule 98 (empty -> .)
    COMA            reduce using rule 98 (empty -> .)
    CORDER          reduce using rule 98 (empty -> .)

    listarreglo                    shift and go to state 185
    empty                          shift and go to state 80

state 140

    (79) expresion -> ID listarreglo .
    (94) listarreglo -> listarreglo . CORIZQ listexpr CORDER

    MAS             reduce using rule 79 (expresion -> ID listarreglo .)
    MENOS           reduce using rule 79 (expresion -> ID listarreglo .)
    POR             reduce using rule 79 (expresion -> ID listarreglo .)
    DIVIDIDO        reduce using rule 79 (expresion -> ID listarreglo .)
    MOD             reduce using rule 79 (expresion -> ID listarreglo .)
    AS              reduce using rule 79 (expresion -> ID listarreglo .)
    PT              reduce using rule 79 (expresion -> ID listarreglo .)
    IGUAL           reduce using rule 79 (expresion -> ID listarreglo .)
    MENOR           reduce using rule 79 (expresion -> ID listarreglo .)
    MAYOR           reduce using rule 79 (expresion -> ID listarreglo .)
    MEIGUAL         reduce using rule 79 (expresion -> ID listarreglo .)
    MAIGUAL         reduce using rule 79 (expresion -> ID listarreglo .)
    DIS             reduce using rule 79 (expresion -> ID listarreglo .)
    LLAVEIZQ        reduce using rule 79 (expresion -> ID listarreglo .)
    AND             reduce using rule 79 (expresion -> ID listarreglo .)
    OR              reduce using rule 79 (expresion -> ID listarreglo .)
    DPT             reduce using rule 79 (expresion -> ID listarreglo .)
    PTCOMA          reduce using rule 79 (expresion -> ID listarreglo .)
    PARDER          reduce using rule 79 (expresion -> ID listarreglo .)
    COMA            reduce using rule 79 (expresion -> ID listarreglo .)
    CORDER          reduce using rule 79 (expresion -> ID listarreglo .)
    CORIZQ          shift and go to state 116


state 141

    (80) expresion -> ID PARIZQ . listexpr PARDER
    (96) listexpr -> . listexpr COMA expresion
    (97) listexpr -> . expresion
    (65) expresion -> . expresion MAS expresion
    (66) expresion -> . expresion MENOS expresion
    (67) expresion -> . expresion POR expresion
    (68) expresion -> . expresion DIVIDIDO expresion
    (69) expresion -> . expresion MOD expresion
    (70) expresion -> . expresion AS tipos
    (71) expresion -> . MENOS expresion
    (72) expresion -> . PARIZQ logica PARDER
    (73) expresion -> . ENTERO
    (74) expresion -> . DECIMAL
    (75) expresion -> . FORM
    (76) expresion -> . TRUE
    (77) expresion -> . FALSE
    (78) expresion -> . VECM NOT listarreglo
    (79) expresion -> . ID listarreglo
    (80) expresion -> . ID PARIZQ listexpr PARDER
    (81) expresion -> . listarreglo
    (82) expresion -> . opcionpow DPT DPT expresion
    (85) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (86) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (87) expresion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (88) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (89) expresion -> . expresion PT SQRT PARIZQ PARDER
    (90) expresion -> . expresion PT ABS PARIZQ PARDER
    (91) expresion -> . expresion PT CLONE PARIZQ PARDER
    (92) expresion -> . expresion PT LEN PARIZQ PARDER
    (93) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (94) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (95) listarreglo -> . empty
    (83) opcionpow -> . expresion
    (84) opcionpow -> . tipos
    (98) empty -> .
    (58) tipos -> . I64
    (59) tipos -> . F64
    (60) tipos -> . BOOL
    (61) tipos -> . CHAR
    (62) tipos -> . STRING
    (63) tipos -> . AMP STR
    (64) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    MENOS           shift and go to state 86
    PARIZQ          shift and go to state 88
    ENTERO          shift and go to state 89
    DECIMAL         shift and go to state 90
    FORM            shift and go to state 91
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    VECM            shift and go to state 94
    ID              shift and go to state 96
    POW             shift and go to state 98
    POWF            shift and go to state 99
    LOOP            shift and go to state 100
    CORIZQ          reduce using rule 98 (empty -> .)
    MAS             reduce using rule 98 (empty -> .)
    POR             reduce using rule 98 (empty -> .)
    DIVIDIDO        reduce using rule 98 (empty -> .)
    MOD             reduce using rule 98 (empty -> .)
    AS              reduce using rule 98 (empty -> .)
    PT              reduce using rule 98 (empty -> .)
    PARDER          reduce using rule 98 (empty -> .)
    COMA            reduce using rule 98 (empty -> .)
    DPT             reduce using rule 98 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 98 (empty -> .) ]

    listexpr                       shift and go to state 186
    expresion                      shift and go to state 118
    tipos                          shift and go to state 87
    listarreglo                    shift and go to state 95
    opcionpow                      shift and go to state 97
    empty                          shift and go to state 80

state 142

    (82) expresion -> opcionpow DPT . DPT expresion

    DPT             shift and go to state 187


state 143

    (85) expresion -> POW PARIZQ . ENTERO COMA ENTERO PARDER

    ENTERO          shift and go to state 188


state 144

    (86) expresion -> POWF PARIZQ . DECIMAL COMA DECIMAL PARDER

    DECIMAL         shift and go to state 189


state 145

    (87) expresion -> LOOP LLAVEIZQ . instrucciones LLAVEDER
    (17) instrucciones -> . instruccion instrucciones
    (18) instrucciones -> . instruccion
    (19) instruccion -> . LET mutable ID pyc arrtipos IGUAL logica PTCOMA
    (20) instruccion -> . ID listarreglo IGUAL logica PTCOMA
    (21) instruccion -> . ID PARIZQ listexpr PARDER PTCOMA
    (22) instruccion -> . PRINT NOT PARIZQ listexpr PARDER PTCOMA
    (23) instruccion -> . IF logica LLAVEIZQ instrucciones LLAVEDER unelse
    (24) instruccion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (25) instruccion -> . BREAK logica PTCOMA
    (26) instruccion -> . BREAK PTCOMA
    (27) instruccion -> . RETURN logica PTCOMA
    (28) instruccion -> . CONTINUE PTCOMA
    (29) instruccion -> . WHILE logica LLAVEIZQ instrucciones LLAVEDER
    (30) instruccion -> . FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER

    LET             shift and go to state 51
    ID              shift and go to state 52
    PRINT           shift and go to state 53
    IF              shift and go to state 54
    LOOP            shift and go to state 55
    BREAK           shift and go to state 56
    RETURN          shift and go to state 57
    CONTINUE        shift and go to state 58
    WHILE           shift and go to state 59
    FOR             shift and go to state 60

    instrucciones                  shift and go to state 190
    instruccion                    shift and go to state 50

state 146

    (24) instruccion -> LOOP LLAVEIZQ instrucciones . LLAVEDER

    LLAVEDER        shift and go to state 191


state 147

    (25) instruccion -> BREAK logica PTCOMA .

    LET             reduce using rule 25 (instruccion -> BREAK logica PTCOMA .)
    ID              reduce using rule 25 (instruccion -> BREAK logica PTCOMA .)
    PRINT           reduce using rule 25 (instruccion -> BREAK logica PTCOMA .)
    IF              reduce using rule 25 (instruccion -> BREAK logica PTCOMA .)
    LOOP            reduce using rule 25 (instruccion -> BREAK logica PTCOMA .)
    BREAK           reduce using rule 25 (instruccion -> BREAK logica PTCOMA .)
    RETURN          reduce using rule 25 (instruccion -> BREAK logica PTCOMA .)
    CONTINUE        reduce using rule 25 (instruccion -> BREAK logica PTCOMA .)
    WHILE           reduce using rule 25 (instruccion -> BREAK logica PTCOMA .)
    FOR             reduce using rule 25 (instruccion -> BREAK logica PTCOMA .)
    LLAVEDER        reduce using rule 25 (instruccion -> BREAK logica PTCOMA .)


state 148

    (27) instruccion -> RETURN logica PTCOMA .

    LET             reduce using rule 27 (instruccion -> RETURN logica PTCOMA .)
    ID              reduce using rule 27 (instruccion -> RETURN logica PTCOMA .)
    PRINT           reduce using rule 27 (instruccion -> RETURN logica PTCOMA .)
    IF              reduce using rule 27 (instruccion -> RETURN logica PTCOMA .)
    LOOP            reduce using rule 27 (instruccion -> RETURN logica PTCOMA .)
    BREAK           reduce using rule 27 (instruccion -> RETURN logica PTCOMA .)
    RETURN          reduce using rule 27 (instruccion -> RETURN logica PTCOMA .)
    CONTINUE        reduce using rule 27 (instruccion -> RETURN logica PTCOMA .)
    WHILE           reduce using rule 27 (instruccion -> RETURN logica PTCOMA .)
    FOR             reduce using rule 27 (instruccion -> RETURN logica PTCOMA .)
    LLAVEDER        reduce using rule 27 (instruccion -> RETURN logica PTCOMA .)


state 149

    (29) instruccion -> WHILE logica LLAVEIZQ . instrucciones LLAVEDER
    (17) instrucciones -> . instruccion instrucciones
    (18) instrucciones -> . instruccion
    (19) instruccion -> . LET mutable ID pyc arrtipos IGUAL logica PTCOMA
    (20) instruccion -> . ID listarreglo IGUAL logica PTCOMA
    (21) instruccion -> . ID PARIZQ listexpr PARDER PTCOMA
    (22) instruccion -> . PRINT NOT PARIZQ listexpr PARDER PTCOMA
    (23) instruccion -> . IF logica LLAVEIZQ instrucciones LLAVEDER unelse
    (24) instruccion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (25) instruccion -> . BREAK logica PTCOMA
    (26) instruccion -> . BREAK PTCOMA
    (27) instruccion -> . RETURN logica PTCOMA
    (28) instruccion -> . CONTINUE PTCOMA
    (29) instruccion -> . WHILE logica LLAVEIZQ instrucciones LLAVEDER
    (30) instruccion -> . FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER

    LET             shift and go to state 51
    ID              shift and go to state 52
    PRINT           shift and go to state 53
    IF              shift and go to state 54
    LOOP            shift and go to state 55
    BREAK           shift and go to state 56
    RETURN          shift and go to state 57
    CONTINUE        shift and go to state 58
    WHILE           shift and go to state 59
    FOR             shift and go to state 60

    instrucciones                  shift and go to state 192
    instruccion                    shift and go to state 50

state 150

    (30) instruccion -> FOR ID IN . opcionfor LLAVEIZQ instrucciones LLAVEDER
    (31) opcionfor -> . logica
    (32) opcionfor -> . ENTERO PT PT logica
    (33) opcionfor -> . empty
    (37) logica -> . logica AND logica
    (38) logica -> . logica OR logica
    (39) logica -> . NOT logica
    (40) logica -> . rel
    (98) empty -> .
    (41) rel -> . rel IGUAL IGUAL rel
    (42) rel -> . rel MENOR rel
    (43) rel -> . rel MAYOR rel
    (44) rel -> . rel MEIGUAL rel
    (45) rel -> . rel MAIGUAL rel
    (46) rel -> . rel DIS rel
    (47) rel -> . expresion
    (65) expresion -> . expresion MAS expresion
    (66) expresion -> . expresion MENOS expresion
    (67) expresion -> . expresion POR expresion
    (68) expresion -> . expresion DIVIDIDO expresion
    (69) expresion -> . expresion MOD expresion
    (70) expresion -> . expresion AS tipos
    (71) expresion -> . MENOS expresion
    (72) expresion -> . PARIZQ logica PARDER
    (73) expresion -> . ENTERO
    (74) expresion -> . DECIMAL
    (75) expresion -> . FORM
    (76) expresion -> . TRUE
    (77) expresion -> . FALSE
    (78) expresion -> . VECM NOT listarreglo
    (79) expresion -> . ID listarreglo
    (80) expresion -> . ID PARIZQ listexpr PARDER
    (81) expresion -> . listarreglo
    (82) expresion -> . opcionpow DPT DPT expresion
    (85) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (86) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (87) expresion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (88) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (89) expresion -> . expresion PT SQRT PARIZQ PARDER
    (90) expresion -> . expresion PT ABS PARIZQ PARDER
    (91) expresion -> . expresion PT CLONE PARIZQ PARDER
    (92) expresion -> . expresion PT LEN PARIZQ PARDER
    (93) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (94) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (95) listarreglo -> . empty
    (83) opcionpow -> . expresion
    (84) opcionpow -> . tipos
    (58) tipos -> . I64
    (59) tipos -> . F64
    (60) tipos -> . BOOL
    (61) tipos -> . CHAR
    (62) tipos -> . STRING
    (63) tipos -> . AMP STR
    (64) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    ENTERO          shift and go to state 195
    NOT             shift and go to state 83
    LLAVEIZQ        reduce using rule 98 (empty -> .)
    CORIZQ          reduce using rule 98 (empty -> .)
    MAS             reduce using rule 98 (empty -> .)
    POR             reduce using rule 98 (empty -> .)
    DIVIDIDO        reduce using rule 98 (empty -> .)
    MOD             reduce using rule 98 (empty -> .)
    AS              reduce using rule 98 (empty -> .)
    PT              reduce using rule 98 (empty -> .)
    IGUAL           reduce using rule 98 (empty -> .)
    MENOR           reduce using rule 98 (empty -> .)
    MAYOR           reduce using rule 98 (empty -> .)
    MEIGUAL         reduce using rule 98 (empty -> .)
    MAIGUAL         reduce using rule 98 (empty -> .)
    DIS             reduce using rule 98 (empty -> .)
    AND             reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    DPT             reduce using rule 98 (empty -> .)
    MENOS           shift and go to state 86
    PARIZQ          shift and go to state 88
    DECIMAL         shift and go to state 90
    FORM            shift and go to state 91
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    VECM            shift and go to state 94
    ID              shift and go to state 96
    POW             shift and go to state 98
    POWF            shift and go to state 99
    LOOP            shift and go to state 100
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 98 (empty -> .) ]

    opcionfor                      shift and go to state 193
    logica                         shift and go to state 194
    empty                          shift and go to state 196
    rel                            shift and go to state 84
    expresion                      shift and go to state 85
    tipos                          shift and go to state 87
    listarreglo                    shift and go to state 95
    opcionpow                      shift and go to state 97

state 151

    (13) liststruct -> liststruct COMA ID DPT tipos .

    LLAVEDER        reduce using rule 13 (liststruct -> liststruct COMA ID DPT tipos .)
    COMA            reduce using rule 13 (liststruct -> liststruct COMA ID DPT tipos .)


state 152

    (3) funcion -> PUB FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones . LLAVEDER

    LLAVEDER        shift and go to state 197


state 153

    (4) funcion -> FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER .

    PUB             reduce using rule 4 (funcion -> FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER .)
    FN              reduce using rule 4 (funcion -> FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER .)
    MODF            reduce using rule 4 (funcion -> FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER .)
    STRUCT          reduce using rule 4 (funcion -> FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER .)
    $end            reduce using rule 4 (funcion -> FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER .)
    LLAVEDER        reduce using rule 4 (funcion -> FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER .)


state 154

    (11) parametros2 -> parametros2 COMA mutable ID DPT tipos .

    COMA            reduce using rule 11 (parametros2 -> parametros2 COMA mutable ID DPT tipos .)
    PARDER          reduce using rule 11 (parametros2 -> parametros2 COMA mutable ID DPT tipos .)


state 155

    (19) instruccion -> LET mutable ID pyc . arrtipos IGUAL logica PTCOMA
    (52) arrtipos -> . tipos
    (53) arrtipos -> . arreglos
    (54) arrtipos -> . empty
    (58) tipos -> . I64
    (59) tipos -> . F64
    (60) tipos -> . BOOL
    (61) tipos -> . CHAR
    (62) tipos -> . STRING
    (63) tipos -> . AMP STR
    (64) tipos -> . USIZE
    (55) arreglos -> . CORIZQ arreglos PTCOMA ENTERO CORDER
    (56) arreglos -> . tipos
    (57) arreglos -> . ID
    (98) empty -> .

    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68
    CORIZQ          shift and go to state 203
    ID              shift and go to state 198
    IGUAL           reduce using rule 98 (empty -> .)

    arrtipos                       shift and go to state 199
    tipos                          shift and go to state 200
    arreglos                       shift and go to state 201
    empty                          shift and go to state 202

state 156

    (50) pyc -> DPT .

    I64             reduce using rule 50 (pyc -> DPT .)
    F64             reduce using rule 50 (pyc -> DPT .)
    BOOL            reduce using rule 50 (pyc -> DPT .)
    CHAR            reduce using rule 50 (pyc -> DPT .)
    STRING          reduce using rule 50 (pyc -> DPT .)
    AMP             reduce using rule 50 (pyc -> DPT .)
    USIZE           reduce using rule 50 (pyc -> DPT .)
    CORIZQ          reduce using rule 50 (pyc -> DPT .)
    ID              reduce using rule 50 (pyc -> DPT .)
    IGUAL           reduce using rule 50 (pyc -> DPT .)


state 157

    (51) pyc -> empty .

    I64             reduce using rule 51 (pyc -> empty .)
    F64             reduce using rule 51 (pyc -> empty .)
    BOOL            reduce using rule 51 (pyc -> empty .)
    CHAR            reduce using rule 51 (pyc -> empty .)
    STRING          reduce using rule 51 (pyc -> empty .)
    AMP             reduce using rule 51 (pyc -> empty .)
    USIZE           reduce using rule 51 (pyc -> empty .)
    CORIZQ          reduce using rule 51 (pyc -> empty .)
    ID              reduce using rule 51 (pyc -> empty .)
    IGUAL           reduce using rule 51 (pyc -> empty .)


state 158

    (20) instruccion -> ID listarreglo IGUAL logica . PTCOMA
    (37) logica -> logica . AND logica
    (38) logica -> logica . OR logica

    PTCOMA          shift and go to state 204
    AND             shift and go to state 121
    OR              shift and go to state 122


state 159

    (94) listarreglo -> listarreglo CORIZQ listexpr . CORDER
    (96) listexpr -> listexpr . COMA expresion

    CORDER          shift and go to state 205
    COMA            shift and go to state 161


state 160

    (21) instruccion -> ID PARIZQ listexpr PARDER . PTCOMA

    PTCOMA          shift and go to state 206


state 161

    (96) listexpr -> listexpr COMA . expresion
    (65) expresion -> . expresion MAS expresion
    (66) expresion -> . expresion MENOS expresion
    (67) expresion -> . expresion POR expresion
    (68) expresion -> . expresion DIVIDIDO expresion
    (69) expresion -> . expresion MOD expresion
    (70) expresion -> . expresion AS tipos
    (71) expresion -> . MENOS expresion
    (72) expresion -> . PARIZQ logica PARDER
    (73) expresion -> . ENTERO
    (74) expresion -> . DECIMAL
    (75) expresion -> . FORM
    (76) expresion -> . TRUE
    (77) expresion -> . FALSE
    (78) expresion -> . VECM NOT listarreglo
    (79) expresion -> . ID listarreglo
    (80) expresion -> . ID PARIZQ listexpr PARDER
    (81) expresion -> . listarreglo
    (82) expresion -> . opcionpow DPT DPT expresion
    (85) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (86) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (87) expresion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (88) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (89) expresion -> . expresion PT SQRT PARIZQ PARDER
    (90) expresion -> . expresion PT ABS PARIZQ PARDER
    (91) expresion -> . expresion PT CLONE PARIZQ PARDER
    (92) expresion -> . expresion PT LEN PARIZQ PARDER
    (93) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (94) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (95) listarreglo -> . empty
    (83) opcionpow -> . expresion
    (84) opcionpow -> . tipos
    (98) empty -> .
    (58) tipos -> . I64
    (59) tipos -> . F64
    (60) tipos -> . BOOL
    (61) tipos -> . CHAR
    (62) tipos -> . STRING
    (63) tipos -> . AMP STR
    (64) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    MENOS           shift and go to state 86
    PARIZQ          shift and go to state 88
    ENTERO          shift and go to state 89
    DECIMAL         shift and go to state 90
    FORM            shift and go to state 91
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    VECM            shift and go to state 94
    ID              shift and go to state 96
    POW             shift and go to state 98
    POWF            shift and go to state 99
    LOOP            shift and go to state 100
    CORIZQ          reduce using rule 98 (empty -> .)
    MAS             reduce using rule 98 (empty -> .)
    POR             reduce using rule 98 (empty -> .)
    DIVIDIDO        reduce using rule 98 (empty -> .)
    MOD             reduce using rule 98 (empty -> .)
    AS              reduce using rule 98 (empty -> .)
    PT              reduce using rule 98 (empty -> .)
    PARDER          reduce using rule 98 (empty -> .)
    COMA            reduce using rule 98 (empty -> .)
    CORDER          reduce using rule 98 (empty -> .)
    DPT             reduce using rule 98 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 98 (empty -> .) ]

    expresion                      shift and go to state 207
    tipos                          shift and go to state 87
    listarreglo                    shift and go to state 95
    opcionpow                      shift and go to state 97
    empty                          shift and go to state 80

state 162

    (22) instruccion -> PRINT NOT PARIZQ listexpr . PARDER PTCOMA
    (96) listexpr -> listexpr . COMA expresion

    PARDER          shift and go to state 208
    COMA            shift and go to state 161


state 163

    (23) instruccion -> IF logica LLAVEIZQ instrucciones . LLAVEDER unelse

    LLAVEDER        shift and go to state 209


state 164

    (37) logica -> logica AND logica .
    (37) logica -> logica . AND logica
    (38) logica -> logica . OR logica

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    LLAVEIZQ        reduce using rule 37 (logica -> logica AND logica .)
    PTCOMA          reduce using rule 37 (logica -> logica AND logica .)
    PARDER          reduce using rule 37 (logica -> logica AND logica .)
    AND             shift and go to state 121
    OR              shift and go to state 122

  ! AND             [ reduce using rule 37 (logica -> logica AND logica .) ]
  ! OR              [ reduce using rule 37 (logica -> logica AND logica .) ]


state 165

    (38) logica -> logica OR logica .
    (37) logica -> logica . AND logica
    (38) logica -> logica . OR logica

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    LLAVEIZQ        reduce using rule 38 (logica -> logica OR logica .)
    PTCOMA          reduce using rule 38 (logica -> logica OR logica .)
    PARDER          reduce using rule 38 (logica -> logica OR logica .)
    AND             shift and go to state 121
    OR              shift and go to state 122

  ! AND             [ reduce using rule 38 (logica -> logica OR logica .) ]
  ! OR              [ reduce using rule 38 (logica -> logica OR logica .) ]


state 166

    (41) rel -> rel IGUAL IGUAL . rel
    (41) rel -> . rel IGUAL IGUAL rel
    (42) rel -> . rel MENOR rel
    (43) rel -> . rel MAYOR rel
    (44) rel -> . rel MEIGUAL rel
    (45) rel -> . rel MAIGUAL rel
    (46) rel -> . rel DIS rel
    (47) rel -> . expresion
    (65) expresion -> . expresion MAS expresion
    (66) expresion -> . expresion MENOS expresion
    (67) expresion -> . expresion POR expresion
    (68) expresion -> . expresion DIVIDIDO expresion
    (69) expresion -> . expresion MOD expresion
    (70) expresion -> . expresion AS tipos
    (71) expresion -> . MENOS expresion
    (72) expresion -> . PARIZQ logica PARDER
    (73) expresion -> . ENTERO
    (74) expresion -> . DECIMAL
    (75) expresion -> . FORM
    (76) expresion -> . TRUE
    (77) expresion -> . FALSE
    (78) expresion -> . VECM NOT listarreglo
    (79) expresion -> . ID listarreglo
    (80) expresion -> . ID PARIZQ listexpr PARDER
    (81) expresion -> . listarreglo
    (82) expresion -> . opcionpow DPT DPT expresion
    (85) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (86) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (87) expresion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (88) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (89) expresion -> . expresion PT SQRT PARIZQ PARDER
    (90) expresion -> . expresion PT ABS PARIZQ PARDER
    (91) expresion -> . expresion PT CLONE PARIZQ PARDER
    (92) expresion -> . expresion PT LEN PARIZQ PARDER
    (93) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (94) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (95) listarreglo -> . empty
    (83) opcionpow -> . expresion
    (84) opcionpow -> . tipos
    (98) empty -> .
    (58) tipos -> . I64
    (59) tipos -> . F64
    (60) tipos -> . BOOL
    (61) tipos -> . CHAR
    (62) tipos -> . STRING
    (63) tipos -> . AMP STR
    (64) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    MENOS           shift and go to state 86
    PARIZQ          shift and go to state 88
    ENTERO          shift and go to state 89
    DECIMAL         shift and go to state 90
    FORM            shift and go to state 91
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    VECM            shift and go to state 94
    ID              shift and go to state 96
    POW             shift and go to state 98
    POWF            shift and go to state 99
    LOOP            shift and go to state 100
    CORIZQ          reduce using rule 98 (empty -> .)
    MAS             reduce using rule 98 (empty -> .)
    POR             reduce using rule 98 (empty -> .)
    DIVIDIDO        reduce using rule 98 (empty -> .)
    MOD             reduce using rule 98 (empty -> .)
    AS              reduce using rule 98 (empty -> .)
    PT              reduce using rule 98 (empty -> .)
    IGUAL           reduce using rule 98 (empty -> .)
    MENOR           reduce using rule 98 (empty -> .)
    MAYOR           reduce using rule 98 (empty -> .)
    MEIGUAL         reduce using rule 98 (empty -> .)
    MAIGUAL         reduce using rule 98 (empty -> .)
    DIS             reduce using rule 98 (empty -> .)
    LLAVEIZQ        reduce using rule 98 (empty -> .)
    AND             reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    PTCOMA          reduce using rule 98 (empty -> .)
    PARDER          reduce using rule 98 (empty -> .)
    DPT             reduce using rule 98 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 98 (empty -> .) ]

    rel                            shift and go to state 210
    expresion                      shift and go to state 85
    tipos                          shift and go to state 87
    listarreglo                    shift and go to state 95
    opcionpow                      shift and go to state 97
    empty                          shift and go to state 80

state 167

    (42) rel -> rel MENOR rel .
    (41) rel -> rel . IGUAL IGUAL rel
    (42) rel -> rel . MENOR rel
    (43) rel -> rel . MAYOR rel
    (44) rel -> rel . MEIGUAL rel
    (45) rel -> rel . MAIGUAL rel
    (46) rel -> rel . DIS rel

  ! shift/reduce conflict for IGUAL resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for MEIGUAL resolved as shift
  ! shift/reduce conflict for MAIGUAL resolved as shift
  ! shift/reduce conflict for DIS resolved as shift
    LLAVEIZQ        reduce using rule 42 (rel -> rel MENOR rel .)
    AND             reduce using rule 42 (rel -> rel MENOR rel .)
    OR              reduce using rule 42 (rel -> rel MENOR rel .)
    PTCOMA          reduce using rule 42 (rel -> rel MENOR rel .)
    PARDER          reduce using rule 42 (rel -> rel MENOR rel .)
    IGUAL           shift and go to state 124
    MENOR           shift and go to state 125
    MAYOR           shift and go to state 126
    MEIGUAL         shift and go to state 127
    MAIGUAL         shift and go to state 128
    DIS             shift and go to state 129

  ! IGUAL           [ reduce using rule 42 (rel -> rel MENOR rel .) ]
  ! MENOR           [ reduce using rule 42 (rel -> rel MENOR rel .) ]
  ! MAYOR           [ reduce using rule 42 (rel -> rel MENOR rel .) ]
  ! MEIGUAL         [ reduce using rule 42 (rel -> rel MENOR rel .) ]
  ! MAIGUAL         [ reduce using rule 42 (rel -> rel MENOR rel .) ]
  ! DIS             [ reduce using rule 42 (rel -> rel MENOR rel .) ]


state 168

    (43) rel -> rel MAYOR rel .
    (41) rel -> rel . IGUAL IGUAL rel
    (42) rel -> rel . MENOR rel
    (43) rel -> rel . MAYOR rel
    (44) rel -> rel . MEIGUAL rel
    (45) rel -> rel . MAIGUAL rel
    (46) rel -> rel . DIS rel

  ! shift/reduce conflict for IGUAL resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for MEIGUAL resolved as shift
  ! shift/reduce conflict for MAIGUAL resolved as shift
  ! shift/reduce conflict for DIS resolved as shift
    LLAVEIZQ        reduce using rule 43 (rel -> rel MAYOR rel .)
    AND             reduce using rule 43 (rel -> rel MAYOR rel .)
    OR              reduce using rule 43 (rel -> rel MAYOR rel .)
    PTCOMA          reduce using rule 43 (rel -> rel MAYOR rel .)
    PARDER          reduce using rule 43 (rel -> rel MAYOR rel .)
    IGUAL           shift and go to state 124
    MENOR           shift and go to state 125
    MAYOR           shift and go to state 126
    MEIGUAL         shift and go to state 127
    MAIGUAL         shift and go to state 128
    DIS             shift and go to state 129

  ! IGUAL           [ reduce using rule 43 (rel -> rel MAYOR rel .) ]
  ! MENOR           [ reduce using rule 43 (rel -> rel MAYOR rel .) ]
  ! MAYOR           [ reduce using rule 43 (rel -> rel MAYOR rel .) ]
  ! MEIGUAL         [ reduce using rule 43 (rel -> rel MAYOR rel .) ]
  ! MAIGUAL         [ reduce using rule 43 (rel -> rel MAYOR rel .) ]
  ! DIS             [ reduce using rule 43 (rel -> rel MAYOR rel .) ]


state 169

    (44) rel -> rel MEIGUAL rel .
    (41) rel -> rel . IGUAL IGUAL rel
    (42) rel -> rel . MENOR rel
    (43) rel -> rel . MAYOR rel
    (44) rel -> rel . MEIGUAL rel
    (45) rel -> rel . MAIGUAL rel
    (46) rel -> rel . DIS rel

  ! shift/reduce conflict for IGUAL resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for MEIGUAL resolved as shift
  ! shift/reduce conflict for MAIGUAL resolved as shift
  ! shift/reduce conflict for DIS resolved as shift
    LLAVEIZQ        reduce using rule 44 (rel -> rel MEIGUAL rel .)
    AND             reduce using rule 44 (rel -> rel MEIGUAL rel .)
    OR              reduce using rule 44 (rel -> rel MEIGUAL rel .)
    PTCOMA          reduce using rule 44 (rel -> rel MEIGUAL rel .)
    PARDER          reduce using rule 44 (rel -> rel MEIGUAL rel .)
    IGUAL           shift and go to state 124
    MENOR           shift and go to state 125
    MAYOR           shift and go to state 126
    MEIGUAL         shift and go to state 127
    MAIGUAL         shift and go to state 128
    DIS             shift and go to state 129

  ! IGUAL           [ reduce using rule 44 (rel -> rel MEIGUAL rel .) ]
  ! MENOR           [ reduce using rule 44 (rel -> rel MEIGUAL rel .) ]
  ! MAYOR           [ reduce using rule 44 (rel -> rel MEIGUAL rel .) ]
  ! MEIGUAL         [ reduce using rule 44 (rel -> rel MEIGUAL rel .) ]
  ! MAIGUAL         [ reduce using rule 44 (rel -> rel MEIGUAL rel .) ]
  ! DIS             [ reduce using rule 44 (rel -> rel MEIGUAL rel .) ]


state 170

    (45) rel -> rel MAIGUAL rel .
    (41) rel -> rel . IGUAL IGUAL rel
    (42) rel -> rel . MENOR rel
    (43) rel -> rel . MAYOR rel
    (44) rel -> rel . MEIGUAL rel
    (45) rel -> rel . MAIGUAL rel
    (46) rel -> rel . DIS rel

  ! shift/reduce conflict for IGUAL resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for MEIGUAL resolved as shift
  ! shift/reduce conflict for MAIGUAL resolved as shift
  ! shift/reduce conflict for DIS resolved as shift
    LLAVEIZQ        reduce using rule 45 (rel -> rel MAIGUAL rel .)
    AND             reduce using rule 45 (rel -> rel MAIGUAL rel .)
    OR              reduce using rule 45 (rel -> rel MAIGUAL rel .)
    PTCOMA          reduce using rule 45 (rel -> rel MAIGUAL rel .)
    PARDER          reduce using rule 45 (rel -> rel MAIGUAL rel .)
    IGUAL           shift and go to state 124
    MENOR           shift and go to state 125
    MAYOR           shift and go to state 126
    MEIGUAL         shift and go to state 127
    MAIGUAL         shift and go to state 128
    DIS             shift and go to state 129

  ! IGUAL           [ reduce using rule 45 (rel -> rel MAIGUAL rel .) ]
  ! MENOR           [ reduce using rule 45 (rel -> rel MAIGUAL rel .) ]
  ! MAYOR           [ reduce using rule 45 (rel -> rel MAIGUAL rel .) ]
  ! MEIGUAL         [ reduce using rule 45 (rel -> rel MAIGUAL rel .) ]
  ! MAIGUAL         [ reduce using rule 45 (rel -> rel MAIGUAL rel .) ]
  ! DIS             [ reduce using rule 45 (rel -> rel MAIGUAL rel .) ]


state 171

    (46) rel -> rel DIS rel .
    (41) rel -> rel . IGUAL IGUAL rel
    (42) rel -> rel . MENOR rel
    (43) rel -> rel . MAYOR rel
    (44) rel -> rel . MEIGUAL rel
    (45) rel -> rel . MAIGUAL rel
    (46) rel -> rel . DIS rel

  ! shift/reduce conflict for IGUAL resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for MEIGUAL resolved as shift
  ! shift/reduce conflict for MAIGUAL resolved as shift
  ! shift/reduce conflict for DIS resolved as shift
    LLAVEIZQ        reduce using rule 46 (rel -> rel DIS rel .)
    AND             reduce using rule 46 (rel -> rel DIS rel .)
    OR              reduce using rule 46 (rel -> rel DIS rel .)
    PTCOMA          reduce using rule 46 (rel -> rel DIS rel .)
    PARDER          reduce using rule 46 (rel -> rel DIS rel .)
    IGUAL           shift and go to state 124
    MENOR           shift and go to state 125
    MAYOR           shift and go to state 126
    MEIGUAL         shift and go to state 127
    MAIGUAL         shift and go to state 128
    DIS             shift and go to state 129

  ! IGUAL           [ reduce using rule 46 (rel -> rel DIS rel .) ]
  ! MENOR           [ reduce using rule 46 (rel -> rel DIS rel .) ]
  ! MAYOR           [ reduce using rule 46 (rel -> rel DIS rel .) ]
  ! MEIGUAL         [ reduce using rule 46 (rel -> rel DIS rel .) ]
  ! MAIGUAL         [ reduce using rule 46 (rel -> rel DIS rel .) ]
  ! DIS             [ reduce using rule 46 (rel -> rel DIS rel .) ]


state 172

    (65) expresion -> expresion MAS expresion .
    (65) expresion -> expresion . MAS expresion
    (66) expresion -> expresion . MENOS expresion
    (67) expresion -> expresion . POR expresion
    (68) expresion -> expresion . DIVIDIDO expresion
    (69) expresion -> expresion . MOD expresion
    (70) expresion -> expresion . AS tipos
    (88) expresion -> expresion . PT TOSTRING PARIZQ PARDER
    (89) expresion -> expresion . PT SQRT PARIZQ PARDER
    (90) expresion -> expresion . PT ABS PARIZQ PARDER
    (91) expresion -> expresion . PT CLONE PARIZQ PARDER
    (92) expresion -> expresion . PT LEN PARIZQ PARDER
    (93) expresion -> expresion . PT TOOWNED PARIZQ PARDER
    (83) opcionpow -> expresion .

  ! reduce/reduce conflict for DPT resolved using rule 65 (expresion -> expresion MAS expresion .)
    MAS             reduce using rule 65 (expresion -> expresion MAS expresion .)
    MENOS           reduce using rule 65 (expresion -> expresion MAS expresion .)
    MOD             reduce using rule 65 (expresion -> expresion MAS expresion .)
    AS              reduce using rule 65 (expresion -> expresion MAS expresion .)
    PT              reduce using rule 65 (expresion -> expresion MAS expresion .)
    IGUAL           reduce using rule 65 (expresion -> expresion MAS expresion .)
    MENOR           reduce using rule 65 (expresion -> expresion MAS expresion .)
    MAYOR           reduce using rule 65 (expresion -> expresion MAS expresion .)
    MEIGUAL         reduce using rule 65 (expresion -> expresion MAS expresion .)
    MAIGUAL         reduce using rule 65 (expresion -> expresion MAS expresion .)
    DIS             reduce using rule 65 (expresion -> expresion MAS expresion .)
    LLAVEIZQ        reduce using rule 65 (expresion -> expresion MAS expresion .)
    AND             reduce using rule 65 (expresion -> expresion MAS expresion .)
    OR              reduce using rule 65 (expresion -> expresion MAS expresion .)
    DPT             reduce using rule 65 (expresion -> expresion MAS expresion .)
    PTCOMA          reduce using rule 65 (expresion -> expresion MAS expresion .)
    PARDER          reduce using rule 65 (expresion -> expresion MAS expresion .)
    COMA            reduce using rule 65 (expresion -> expresion MAS expresion .)
    CORDER          reduce using rule 65 (expresion -> expresion MAS expresion .)
    POR             shift and go to state 132
    DIVIDIDO        shift and go to state 133

  ! POR             [ reduce using rule 65 (expresion -> expresion MAS expresion .) ]
  ! DIVIDIDO        [ reduce using rule 65 (expresion -> expresion MAS expresion .) ]
  ! MAS             [ shift and go to state 130 ]
  ! MENOS           [ shift and go to state 131 ]
  ! MOD             [ shift and go to state 134 ]
  ! AS              [ shift and go to state 135 ]
  ! PT              [ shift and go to state 136 ]
  ! DPT             [ reduce using rule 83 (opcionpow -> expresion .) ]


state 173

    (66) expresion -> expresion MENOS expresion .
    (65) expresion -> expresion . MAS expresion
    (66) expresion -> expresion . MENOS expresion
    (67) expresion -> expresion . POR expresion
    (68) expresion -> expresion . DIVIDIDO expresion
    (69) expresion -> expresion . MOD expresion
    (70) expresion -> expresion . AS tipos
    (88) expresion -> expresion . PT TOSTRING PARIZQ PARDER
    (89) expresion -> expresion . PT SQRT PARIZQ PARDER
    (90) expresion -> expresion . PT ABS PARIZQ PARDER
    (91) expresion -> expresion . PT CLONE PARIZQ PARDER
    (92) expresion -> expresion . PT LEN PARIZQ PARDER
    (93) expresion -> expresion . PT TOOWNED PARIZQ PARDER
    (83) opcionpow -> expresion .

  ! reduce/reduce conflict for DPT resolved using rule 66 (expresion -> expresion MENOS expresion .)
    MAS             reduce using rule 66 (expresion -> expresion MENOS expresion .)
    MENOS           reduce using rule 66 (expresion -> expresion MENOS expresion .)
    MOD             reduce using rule 66 (expresion -> expresion MENOS expresion .)
    AS              reduce using rule 66 (expresion -> expresion MENOS expresion .)
    PT              reduce using rule 66 (expresion -> expresion MENOS expresion .)
    IGUAL           reduce using rule 66 (expresion -> expresion MENOS expresion .)
    MENOR           reduce using rule 66 (expresion -> expresion MENOS expresion .)
    MAYOR           reduce using rule 66 (expresion -> expresion MENOS expresion .)
    MEIGUAL         reduce using rule 66 (expresion -> expresion MENOS expresion .)
    MAIGUAL         reduce using rule 66 (expresion -> expresion MENOS expresion .)
    DIS             reduce using rule 66 (expresion -> expresion MENOS expresion .)
    LLAVEIZQ        reduce using rule 66 (expresion -> expresion MENOS expresion .)
    AND             reduce using rule 66 (expresion -> expresion MENOS expresion .)
    OR              reduce using rule 66 (expresion -> expresion MENOS expresion .)
    DPT             reduce using rule 66 (expresion -> expresion MENOS expresion .)
    PTCOMA          reduce using rule 66 (expresion -> expresion MENOS expresion .)
    PARDER          reduce using rule 66 (expresion -> expresion MENOS expresion .)
    COMA            reduce using rule 66 (expresion -> expresion MENOS expresion .)
    CORDER          reduce using rule 66 (expresion -> expresion MENOS expresion .)
    POR             shift and go to state 132
    DIVIDIDO        shift and go to state 133

  ! POR             [ reduce using rule 66 (expresion -> expresion MENOS expresion .) ]
  ! DIVIDIDO        [ reduce using rule 66 (expresion -> expresion MENOS expresion .) ]
  ! MAS             [ shift and go to state 130 ]
  ! MENOS           [ shift and go to state 131 ]
  ! MOD             [ shift and go to state 134 ]
  ! AS              [ shift and go to state 135 ]
  ! PT              [ shift and go to state 136 ]
  ! DPT             [ reduce using rule 83 (opcionpow -> expresion .) ]


state 174

    (67) expresion -> expresion POR expresion .
    (65) expresion -> expresion . MAS expresion
    (66) expresion -> expresion . MENOS expresion
    (67) expresion -> expresion . POR expresion
    (68) expresion -> expresion . DIVIDIDO expresion
    (69) expresion -> expresion . MOD expresion
    (70) expresion -> expresion . AS tipos
    (88) expresion -> expresion . PT TOSTRING PARIZQ PARDER
    (89) expresion -> expresion . PT SQRT PARIZQ PARDER
    (90) expresion -> expresion . PT ABS PARIZQ PARDER
    (91) expresion -> expresion . PT CLONE PARIZQ PARDER
    (92) expresion -> expresion . PT LEN PARIZQ PARDER
    (93) expresion -> expresion . PT TOOWNED PARIZQ PARDER
    (83) opcionpow -> expresion .

  ! reduce/reduce conflict for DPT resolved using rule 67 (expresion -> expresion POR expresion .)
    MAS             reduce using rule 67 (expresion -> expresion POR expresion .)
    MENOS           reduce using rule 67 (expresion -> expresion POR expresion .)
    POR             reduce using rule 67 (expresion -> expresion POR expresion .)
    DIVIDIDO        reduce using rule 67 (expresion -> expresion POR expresion .)
    MOD             reduce using rule 67 (expresion -> expresion POR expresion .)
    AS              reduce using rule 67 (expresion -> expresion POR expresion .)
    PT              reduce using rule 67 (expresion -> expresion POR expresion .)
    IGUAL           reduce using rule 67 (expresion -> expresion POR expresion .)
    MENOR           reduce using rule 67 (expresion -> expresion POR expresion .)
    MAYOR           reduce using rule 67 (expresion -> expresion POR expresion .)
    MEIGUAL         reduce using rule 67 (expresion -> expresion POR expresion .)
    MAIGUAL         reduce using rule 67 (expresion -> expresion POR expresion .)
    DIS             reduce using rule 67 (expresion -> expresion POR expresion .)
    LLAVEIZQ        reduce using rule 67 (expresion -> expresion POR expresion .)
    AND             reduce using rule 67 (expresion -> expresion POR expresion .)
    OR              reduce using rule 67 (expresion -> expresion POR expresion .)
    DPT             reduce using rule 67 (expresion -> expresion POR expresion .)
    PTCOMA          reduce using rule 67 (expresion -> expresion POR expresion .)
    PARDER          reduce using rule 67 (expresion -> expresion POR expresion .)
    COMA            reduce using rule 67 (expresion -> expresion POR expresion .)
    CORDER          reduce using rule 67 (expresion -> expresion POR expresion .)

  ! MAS             [ shift and go to state 130 ]
  ! MENOS           [ shift and go to state 131 ]
  ! POR             [ shift and go to state 132 ]
  ! DIVIDIDO        [ shift and go to state 133 ]
  ! MOD             [ shift and go to state 134 ]
  ! AS              [ shift and go to state 135 ]
  ! PT              [ shift and go to state 136 ]
  ! DPT             [ reduce using rule 83 (opcionpow -> expresion .) ]


state 175

    (68) expresion -> expresion DIVIDIDO expresion .
    (65) expresion -> expresion . MAS expresion
    (66) expresion -> expresion . MENOS expresion
    (67) expresion -> expresion . POR expresion
    (68) expresion -> expresion . DIVIDIDO expresion
    (69) expresion -> expresion . MOD expresion
    (70) expresion -> expresion . AS tipos
    (88) expresion -> expresion . PT TOSTRING PARIZQ PARDER
    (89) expresion -> expresion . PT SQRT PARIZQ PARDER
    (90) expresion -> expresion . PT ABS PARIZQ PARDER
    (91) expresion -> expresion . PT CLONE PARIZQ PARDER
    (92) expresion -> expresion . PT LEN PARIZQ PARDER
    (93) expresion -> expresion . PT TOOWNED PARIZQ PARDER
    (83) opcionpow -> expresion .

  ! reduce/reduce conflict for DPT resolved using rule 68 (expresion -> expresion DIVIDIDO expresion .)
    MAS             reduce using rule 68 (expresion -> expresion DIVIDIDO expresion .)
    MENOS           reduce using rule 68 (expresion -> expresion DIVIDIDO expresion .)
    POR             reduce using rule 68 (expresion -> expresion DIVIDIDO expresion .)
    DIVIDIDO        reduce using rule 68 (expresion -> expresion DIVIDIDO expresion .)
    MOD             reduce using rule 68 (expresion -> expresion DIVIDIDO expresion .)
    AS              reduce using rule 68 (expresion -> expresion DIVIDIDO expresion .)
    PT              reduce using rule 68 (expresion -> expresion DIVIDIDO expresion .)
    IGUAL           reduce using rule 68 (expresion -> expresion DIVIDIDO expresion .)
    MENOR           reduce using rule 68 (expresion -> expresion DIVIDIDO expresion .)
    MAYOR           reduce using rule 68 (expresion -> expresion DIVIDIDO expresion .)
    MEIGUAL         reduce using rule 68 (expresion -> expresion DIVIDIDO expresion .)
    MAIGUAL         reduce using rule 68 (expresion -> expresion DIVIDIDO expresion .)
    DIS             reduce using rule 68 (expresion -> expresion DIVIDIDO expresion .)
    LLAVEIZQ        reduce using rule 68 (expresion -> expresion DIVIDIDO expresion .)
    AND             reduce using rule 68 (expresion -> expresion DIVIDIDO expresion .)
    OR              reduce using rule 68 (expresion -> expresion DIVIDIDO expresion .)
    DPT             reduce using rule 68 (expresion -> expresion DIVIDIDO expresion .)
    PTCOMA          reduce using rule 68 (expresion -> expresion DIVIDIDO expresion .)
    PARDER          reduce using rule 68 (expresion -> expresion DIVIDIDO expresion .)
    COMA            reduce using rule 68 (expresion -> expresion DIVIDIDO expresion .)
    CORDER          reduce using rule 68 (expresion -> expresion DIVIDIDO expresion .)

  ! MAS             [ shift and go to state 130 ]
  ! MENOS           [ shift and go to state 131 ]
  ! POR             [ shift and go to state 132 ]
  ! DIVIDIDO        [ shift and go to state 133 ]
  ! MOD             [ shift and go to state 134 ]
  ! AS              [ shift and go to state 135 ]
  ! PT              [ shift and go to state 136 ]
  ! DPT             [ reduce using rule 83 (opcionpow -> expresion .) ]


state 176

    (69) expresion -> expresion MOD expresion .
    (65) expresion -> expresion . MAS expresion
    (66) expresion -> expresion . MENOS expresion
    (67) expresion -> expresion . POR expresion
    (68) expresion -> expresion . DIVIDIDO expresion
    (69) expresion -> expresion . MOD expresion
    (70) expresion -> expresion . AS tipos
    (88) expresion -> expresion . PT TOSTRING PARIZQ PARDER
    (89) expresion -> expresion . PT SQRT PARIZQ PARDER
    (90) expresion -> expresion . PT ABS PARIZQ PARDER
    (91) expresion -> expresion . PT CLONE PARIZQ PARDER
    (92) expresion -> expresion . PT LEN PARIZQ PARDER
    (93) expresion -> expresion . PT TOOWNED PARIZQ PARDER
    (83) opcionpow -> expresion .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for POR resolved as shift
  ! shift/reduce conflict for DIVIDIDO resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AS resolved as shift
  ! shift/reduce conflict for PT resolved as shift
  ! reduce/reduce conflict for DPT resolved using rule 69 (expresion -> expresion MOD expresion .)
    IGUAL           reduce using rule 69 (expresion -> expresion MOD expresion .)
    MENOR           reduce using rule 69 (expresion -> expresion MOD expresion .)
    MAYOR           reduce using rule 69 (expresion -> expresion MOD expresion .)
    MEIGUAL         reduce using rule 69 (expresion -> expresion MOD expresion .)
    MAIGUAL         reduce using rule 69 (expresion -> expresion MOD expresion .)
    DIS             reduce using rule 69 (expresion -> expresion MOD expresion .)
    LLAVEIZQ        reduce using rule 69 (expresion -> expresion MOD expresion .)
    AND             reduce using rule 69 (expresion -> expresion MOD expresion .)
    OR              reduce using rule 69 (expresion -> expresion MOD expresion .)
    DPT             reduce using rule 69 (expresion -> expresion MOD expresion .)
    PTCOMA          reduce using rule 69 (expresion -> expresion MOD expresion .)
    PARDER          reduce using rule 69 (expresion -> expresion MOD expresion .)
    COMA            reduce using rule 69 (expresion -> expresion MOD expresion .)
    CORDER          reduce using rule 69 (expresion -> expresion MOD expresion .)
    MAS             shift and go to state 130
    MENOS           shift and go to state 131
    POR             shift and go to state 132
    DIVIDIDO        shift and go to state 133
    MOD             shift and go to state 134
    AS              shift and go to state 135
    PT              shift and go to state 136

  ! MAS             [ reduce using rule 69 (expresion -> expresion MOD expresion .) ]
  ! MENOS           [ reduce using rule 69 (expresion -> expresion MOD expresion .) ]
  ! POR             [ reduce using rule 69 (expresion -> expresion MOD expresion .) ]
  ! DIVIDIDO        [ reduce using rule 69 (expresion -> expresion MOD expresion .) ]
  ! MOD             [ reduce using rule 69 (expresion -> expresion MOD expresion .) ]
  ! AS              [ reduce using rule 69 (expresion -> expresion MOD expresion .) ]
  ! PT              [ reduce using rule 69 (expresion -> expresion MOD expresion .) ]
  ! DPT             [ reduce using rule 83 (opcionpow -> expresion .) ]


state 177

    (70) expresion -> expresion AS tipos .

    MAS             reduce using rule 70 (expresion -> expresion AS tipos .)
    MENOS           reduce using rule 70 (expresion -> expresion AS tipos .)
    POR             reduce using rule 70 (expresion -> expresion AS tipos .)
    DIVIDIDO        reduce using rule 70 (expresion -> expresion AS tipos .)
    MOD             reduce using rule 70 (expresion -> expresion AS tipos .)
    AS              reduce using rule 70 (expresion -> expresion AS tipos .)
    PT              reduce using rule 70 (expresion -> expresion AS tipos .)
    IGUAL           reduce using rule 70 (expresion -> expresion AS tipos .)
    MENOR           reduce using rule 70 (expresion -> expresion AS tipos .)
    MAYOR           reduce using rule 70 (expresion -> expresion AS tipos .)
    MEIGUAL         reduce using rule 70 (expresion -> expresion AS tipos .)
    MAIGUAL         reduce using rule 70 (expresion -> expresion AS tipos .)
    DIS             reduce using rule 70 (expresion -> expresion AS tipos .)
    LLAVEIZQ        reduce using rule 70 (expresion -> expresion AS tipos .)
    AND             reduce using rule 70 (expresion -> expresion AS tipos .)
    OR              reduce using rule 70 (expresion -> expresion AS tipos .)
    DPT             reduce using rule 70 (expresion -> expresion AS tipos .)
    PTCOMA          reduce using rule 70 (expresion -> expresion AS tipos .)
    PARDER          reduce using rule 70 (expresion -> expresion AS tipos .)
    COMA            reduce using rule 70 (expresion -> expresion AS tipos .)
    CORDER          reduce using rule 70 (expresion -> expresion AS tipos .)


state 178

    (88) expresion -> expresion PT TOSTRING . PARIZQ PARDER

    PARIZQ          shift and go to state 211


state 179

    (89) expresion -> expresion PT SQRT . PARIZQ PARDER

    PARIZQ          shift and go to state 212


state 180

    (90) expresion -> expresion PT ABS . PARIZQ PARDER

    PARIZQ          shift and go to state 213


state 181

    (91) expresion -> expresion PT CLONE . PARIZQ PARDER

    PARIZQ          shift and go to state 214


state 182

    (92) expresion -> expresion PT LEN . PARIZQ PARDER

    PARIZQ          shift and go to state 215


state 183

    (93) expresion -> expresion PT TOOWNED . PARIZQ PARDER

    PARIZQ          shift and go to state 216


state 184

    (72) expresion -> PARIZQ logica PARDER .

    MAS             reduce using rule 72 (expresion -> PARIZQ logica PARDER .)
    MENOS           reduce using rule 72 (expresion -> PARIZQ logica PARDER .)
    POR             reduce using rule 72 (expresion -> PARIZQ logica PARDER .)
    DIVIDIDO        reduce using rule 72 (expresion -> PARIZQ logica PARDER .)
    MOD             reduce using rule 72 (expresion -> PARIZQ logica PARDER .)
    AS              reduce using rule 72 (expresion -> PARIZQ logica PARDER .)
    PT              reduce using rule 72 (expresion -> PARIZQ logica PARDER .)
    IGUAL           reduce using rule 72 (expresion -> PARIZQ logica PARDER .)
    MENOR           reduce using rule 72 (expresion -> PARIZQ logica PARDER .)
    MAYOR           reduce using rule 72 (expresion -> PARIZQ logica PARDER .)
    MEIGUAL         reduce using rule 72 (expresion -> PARIZQ logica PARDER .)
    MAIGUAL         reduce using rule 72 (expresion -> PARIZQ logica PARDER .)
    DIS             reduce using rule 72 (expresion -> PARIZQ logica PARDER .)
    LLAVEIZQ        reduce using rule 72 (expresion -> PARIZQ logica PARDER .)
    AND             reduce using rule 72 (expresion -> PARIZQ logica PARDER .)
    OR              reduce using rule 72 (expresion -> PARIZQ logica PARDER .)
    DPT             reduce using rule 72 (expresion -> PARIZQ logica PARDER .)
    PTCOMA          reduce using rule 72 (expresion -> PARIZQ logica PARDER .)
    PARDER          reduce using rule 72 (expresion -> PARIZQ logica PARDER .)
    COMA            reduce using rule 72 (expresion -> PARIZQ logica PARDER .)
    CORDER          reduce using rule 72 (expresion -> PARIZQ logica PARDER .)


state 185

    (78) expresion -> VECM NOT listarreglo .
    (94) listarreglo -> listarreglo . CORIZQ listexpr CORDER

    MAS             reduce using rule 78 (expresion -> VECM NOT listarreglo .)
    MENOS           reduce using rule 78 (expresion -> VECM NOT listarreglo .)
    POR             reduce using rule 78 (expresion -> VECM NOT listarreglo .)
    DIVIDIDO        reduce using rule 78 (expresion -> VECM NOT listarreglo .)
    MOD             reduce using rule 78 (expresion -> VECM NOT listarreglo .)
    AS              reduce using rule 78 (expresion -> VECM NOT listarreglo .)
    PT              reduce using rule 78 (expresion -> VECM NOT listarreglo .)
    IGUAL           reduce using rule 78 (expresion -> VECM NOT listarreglo .)
    MENOR           reduce using rule 78 (expresion -> VECM NOT listarreglo .)
    MAYOR           reduce using rule 78 (expresion -> VECM NOT listarreglo .)
    MEIGUAL         reduce using rule 78 (expresion -> VECM NOT listarreglo .)
    MAIGUAL         reduce using rule 78 (expresion -> VECM NOT listarreglo .)
    DIS             reduce using rule 78 (expresion -> VECM NOT listarreglo .)
    LLAVEIZQ        reduce using rule 78 (expresion -> VECM NOT listarreglo .)
    AND             reduce using rule 78 (expresion -> VECM NOT listarreglo .)
    OR              reduce using rule 78 (expresion -> VECM NOT listarreglo .)
    DPT             reduce using rule 78 (expresion -> VECM NOT listarreglo .)
    PTCOMA          reduce using rule 78 (expresion -> VECM NOT listarreglo .)
    PARDER          reduce using rule 78 (expresion -> VECM NOT listarreglo .)
    COMA            reduce using rule 78 (expresion -> VECM NOT listarreglo .)
    CORDER          reduce using rule 78 (expresion -> VECM NOT listarreglo .)
    CORIZQ          shift and go to state 116


state 186

    (80) expresion -> ID PARIZQ listexpr . PARDER
    (96) listexpr -> listexpr . COMA expresion

    PARDER          shift and go to state 217
    COMA            shift and go to state 161


state 187

    (82) expresion -> opcionpow DPT DPT . expresion
    (65) expresion -> . expresion MAS expresion
    (66) expresion -> . expresion MENOS expresion
    (67) expresion -> . expresion POR expresion
    (68) expresion -> . expresion DIVIDIDO expresion
    (69) expresion -> . expresion MOD expresion
    (70) expresion -> . expresion AS tipos
    (71) expresion -> . MENOS expresion
    (72) expresion -> . PARIZQ logica PARDER
    (73) expresion -> . ENTERO
    (74) expresion -> . DECIMAL
    (75) expresion -> . FORM
    (76) expresion -> . TRUE
    (77) expresion -> . FALSE
    (78) expresion -> . VECM NOT listarreglo
    (79) expresion -> . ID listarreglo
    (80) expresion -> . ID PARIZQ listexpr PARDER
    (81) expresion -> . listarreglo
    (82) expresion -> . opcionpow DPT DPT expresion
    (85) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (86) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (87) expresion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (88) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (89) expresion -> . expresion PT SQRT PARIZQ PARDER
    (90) expresion -> . expresion PT ABS PARIZQ PARDER
    (91) expresion -> . expresion PT CLONE PARIZQ PARDER
    (92) expresion -> . expresion PT LEN PARIZQ PARDER
    (93) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (94) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (95) listarreglo -> . empty
    (83) opcionpow -> . expresion
    (84) opcionpow -> . tipos
    (98) empty -> .
    (58) tipos -> . I64
    (59) tipos -> . F64
    (60) tipos -> . BOOL
    (61) tipos -> . CHAR
    (62) tipos -> . STRING
    (63) tipos -> . AMP STR
    (64) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    MENOS           shift and go to state 86
    PARIZQ          shift and go to state 88
    ENTERO          shift and go to state 89
    DECIMAL         shift and go to state 90
    FORM            shift and go to state 91
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    VECM            shift and go to state 94
    ID              shift and go to state 96
    POW             shift and go to state 98
    POWF            shift and go to state 99
    LOOP            shift and go to state 100
    CORIZQ          reduce using rule 98 (empty -> .)
    MAS             reduce using rule 98 (empty -> .)
    POR             reduce using rule 98 (empty -> .)
    DIVIDIDO        reduce using rule 98 (empty -> .)
    MOD             reduce using rule 98 (empty -> .)
    AS              reduce using rule 98 (empty -> .)
    PT              reduce using rule 98 (empty -> .)
    IGUAL           reduce using rule 98 (empty -> .)
    MENOR           reduce using rule 98 (empty -> .)
    MAYOR           reduce using rule 98 (empty -> .)
    MEIGUAL         reduce using rule 98 (empty -> .)
    MAIGUAL         reduce using rule 98 (empty -> .)
    DIS             reduce using rule 98 (empty -> .)
    LLAVEIZQ        reduce using rule 98 (empty -> .)
    AND             reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    DPT             reduce using rule 98 (empty -> .)
    PTCOMA          reduce using rule 98 (empty -> .)
    PARDER          reduce using rule 98 (empty -> .)
    COMA            reduce using rule 98 (empty -> .)
    CORDER          reduce using rule 98 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 98 (empty -> .) ]

    opcionpow                      shift and go to state 97
    expresion                      shift and go to state 218
    tipos                          shift and go to state 87
    listarreglo                    shift and go to state 95
    empty                          shift and go to state 80

state 188

    (85) expresion -> POW PARIZQ ENTERO . COMA ENTERO PARDER

    COMA            shift and go to state 219


state 189

    (86) expresion -> POWF PARIZQ DECIMAL . COMA DECIMAL PARDER

    COMA            shift and go to state 220


state 190

    (87) expresion -> LOOP LLAVEIZQ instrucciones . LLAVEDER

    LLAVEDER        shift and go to state 221


state 191

    (24) instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .

    LET             reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    ID              reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    PRINT           reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    IF              reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    LOOP            reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    BREAK           reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    RETURN          reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    CONTINUE        reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    WHILE           reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    FOR             reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    LLAVEDER        reduce using rule 24 (instruccion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)


state 192

    (29) instruccion -> WHILE logica LLAVEIZQ instrucciones . LLAVEDER

    LLAVEDER        shift and go to state 222


state 193

    (30) instruccion -> FOR ID IN opcionfor . LLAVEIZQ instrucciones LLAVEDER

    LLAVEIZQ        shift and go to state 223


state 194

    (31) opcionfor -> logica .
    (37) logica -> logica . AND logica
    (38) logica -> logica . OR logica

    LLAVEIZQ        reduce using rule 31 (opcionfor -> logica .)
    AND             shift and go to state 121
    OR              shift and go to state 122


state 195

    (32) opcionfor -> ENTERO . PT PT logica
    (73) expresion -> ENTERO .

  ! shift/reduce conflict for PT resolved as shift
    PT              shift and go to state 224
    MAS             reduce using rule 73 (expresion -> ENTERO .)
    MENOS           reduce using rule 73 (expresion -> ENTERO .)
    POR             reduce using rule 73 (expresion -> ENTERO .)
    DIVIDIDO        reduce using rule 73 (expresion -> ENTERO .)
    MOD             reduce using rule 73 (expresion -> ENTERO .)
    AS              reduce using rule 73 (expresion -> ENTERO .)
    IGUAL           reduce using rule 73 (expresion -> ENTERO .)
    MENOR           reduce using rule 73 (expresion -> ENTERO .)
    MAYOR           reduce using rule 73 (expresion -> ENTERO .)
    MEIGUAL         reduce using rule 73 (expresion -> ENTERO .)
    MAIGUAL         reduce using rule 73 (expresion -> ENTERO .)
    DIS             reduce using rule 73 (expresion -> ENTERO .)
    AND             reduce using rule 73 (expresion -> ENTERO .)
    OR              reduce using rule 73 (expresion -> ENTERO .)
    LLAVEIZQ        reduce using rule 73 (expresion -> ENTERO .)
    DPT             reduce using rule 73 (expresion -> ENTERO .)

  ! PT              [ reduce using rule 73 (expresion -> ENTERO .) ]


state 196

    (33) opcionfor -> empty .
    (95) listarreglo -> empty .

  ! reduce/reduce conflict for LLAVEIZQ resolved using rule 33 (opcionfor -> empty .)
    LLAVEIZQ        reduce using rule 33 (opcionfor -> empty .)
    CORIZQ          reduce using rule 95 (listarreglo -> empty .)
    MAS             reduce using rule 95 (listarreglo -> empty .)
    MENOS           reduce using rule 95 (listarreglo -> empty .)
    POR             reduce using rule 95 (listarreglo -> empty .)
    DIVIDIDO        reduce using rule 95 (listarreglo -> empty .)
    MOD             reduce using rule 95 (listarreglo -> empty .)
    AS              reduce using rule 95 (listarreglo -> empty .)
    PT              reduce using rule 95 (listarreglo -> empty .)
    IGUAL           reduce using rule 95 (listarreglo -> empty .)
    MENOR           reduce using rule 95 (listarreglo -> empty .)
    MAYOR           reduce using rule 95 (listarreglo -> empty .)
    MEIGUAL         reduce using rule 95 (listarreglo -> empty .)
    MAIGUAL         reduce using rule 95 (listarreglo -> empty .)
    DIS             reduce using rule 95 (listarreglo -> empty .)
    AND             reduce using rule 95 (listarreglo -> empty .)
    OR              reduce using rule 95 (listarreglo -> empty .)
    DPT             reduce using rule 95 (listarreglo -> empty .)

  ! LLAVEIZQ        [ reduce using rule 95 (listarreglo -> empty .) ]


state 197

    (3) funcion -> PUB FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER .

    PUB             reduce using rule 3 (funcion -> PUB FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER .)
    FN              reduce using rule 3 (funcion -> PUB FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER .)
    MODF            reduce using rule 3 (funcion -> PUB FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER .)
    STRUCT          reduce using rule 3 (funcion -> PUB FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER .)
    $end            reduce using rule 3 (funcion -> PUB FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER .)
    LLAVEDER        reduce using rule 3 (funcion -> PUB FN ID PARIZQ parametros PARDER tipofun LLAVEIZQ instrucciones LLAVEDER .)


state 198

    (57) arreglos -> ID .

    IGUAL           reduce using rule 57 (arreglos -> ID .)
    PTCOMA          reduce using rule 57 (arreglos -> ID .)


state 199

    (19) instruccion -> LET mutable ID pyc arrtipos . IGUAL logica PTCOMA

    IGUAL           shift and go to state 225


state 200

    (52) arrtipos -> tipos .
    (56) arreglos -> tipos .

  ! reduce/reduce conflict for IGUAL resolved using rule 52 (arrtipos -> tipos .)
    IGUAL           reduce using rule 52 (arrtipos -> tipos .)

  ! IGUAL           [ reduce using rule 56 (arreglos -> tipos .) ]


state 201

    (53) arrtipos -> arreglos .

    IGUAL           reduce using rule 53 (arrtipos -> arreglos .)


state 202

    (54) arrtipos -> empty .

    IGUAL           reduce using rule 54 (arrtipos -> empty .)


state 203

    (55) arreglos -> CORIZQ . arreglos PTCOMA ENTERO CORDER
    (55) arreglos -> . CORIZQ arreglos PTCOMA ENTERO CORDER
    (56) arreglos -> . tipos
    (57) arreglos -> . ID
    (58) tipos -> . I64
    (59) tipos -> . F64
    (60) tipos -> . BOOL
    (61) tipos -> . CHAR
    (62) tipos -> . STRING
    (63) tipos -> . AMP STR
    (64) tipos -> . USIZE

    CORIZQ          shift and go to state 203
    ID              shift and go to state 198
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

    arreglos                       shift and go to state 226
    tipos                          shift and go to state 227

state 204

    (20) instruccion -> ID listarreglo IGUAL logica PTCOMA .

    LET             reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    ID              reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    PRINT           reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    IF              reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    LOOP            reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    BREAK           reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    RETURN          reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    CONTINUE        reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    WHILE           reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    FOR             reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)
    LLAVEDER        reduce using rule 20 (instruccion -> ID listarreglo IGUAL logica PTCOMA .)


state 205

    (94) listarreglo -> listarreglo CORIZQ listexpr CORDER .

    IGUAL           reduce using rule 94 (listarreglo -> listarreglo CORIZQ listexpr CORDER .)
    CORIZQ          reduce using rule 94 (listarreglo -> listarreglo CORIZQ listexpr CORDER .)
    MAS             reduce using rule 94 (listarreglo -> listarreglo CORIZQ listexpr CORDER .)
    MENOS           reduce using rule 94 (listarreglo -> listarreglo CORIZQ listexpr CORDER .)
    POR             reduce using rule 94 (listarreglo -> listarreglo CORIZQ listexpr CORDER .)
    DIVIDIDO        reduce using rule 94 (listarreglo -> listarreglo CORIZQ listexpr CORDER .)
    MOD             reduce using rule 94 (listarreglo -> listarreglo CORIZQ listexpr CORDER .)
    AS              reduce using rule 94 (listarreglo -> listarreglo CORIZQ listexpr CORDER .)
    PT              reduce using rule 94 (listarreglo -> listarreglo CORIZQ listexpr CORDER .)
    MENOR           reduce using rule 94 (listarreglo -> listarreglo CORIZQ listexpr CORDER .)
    MAYOR           reduce using rule 94 (listarreglo -> listarreglo CORIZQ listexpr CORDER .)
    MEIGUAL         reduce using rule 94 (listarreglo -> listarreglo CORIZQ listexpr CORDER .)
    MAIGUAL         reduce using rule 94 (listarreglo -> listarreglo CORIZQ listexpr CORDER .)
    DIS             reduce using rule 94 (listarreglo -> listarreglo CORIZQ listexpr CORDER .)
    LLAVEIZQ        reduce using rule 94 (listarreglo -> listarreglo CORIZQ listexpr CORDER .)
    AND             reduce using rule 94 (listarreglo -> listarreglo CORIZQ listexpr CORDER .)
    OR              reduce using rule 94 (listarreglo -> listarreglo CORIZQ listexpr CORDER .)
    DPT             reduce using rule 94 (listarreglo -> listarreglo CORIZQ listexpr CORDER .)
    PTCOMA          reduce using rule 94 (listarreglo -> listarreglo CORIZQ listexpr CORDER .)
    PARDER          reduce using rule 94 (listarreglo -> listarreglo CORIZQ listexpr CORDER .)
    COMA            reduce using rule 94 (listarreglo -> listarreglo CORIZQ listexpr CORDER .)
    CORDER          reduce using rule 94 (listarreglo -> listarreglo CORIZQ listexpr CORDER .)


state 206

    (21) instruccion -> ID PARIZQ listexpr PARDER PTCOMA .

    LET             reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    ID              reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    PRINT           reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    IF              reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    LOOP            reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    BREAK           reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    RETURN          reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    CONTINUE        reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    WHILE           reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    FOR             reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)
    LLAVEDER        reduce using rule 21 (instruccion -> ID PARIZQ listexpr PARDER PTCOMA .)


state 207

    (96) listexpr -> listexpr COMA expresion .
    (65) expresion -> expresion . MAS expresion
    (66) expresion -> expresion . MENOS expresion
    (67) expresion -> expresion . POR expresion
    (68) expresion -> expresion . DIVIDIDO expresion
    (69) expresion -> expresion . MOD expresion
    (70) expresion -> expresion . AS tipos
    (88) expresion -> expresion . PT TOSTRING PARIZQ PARDER
    (89) expresion -> expresion . PT SQRT PARIZQ PARDER
    (90) expresion -> expresion . PT ABS PARIZQ PARDER
    (91) expresion -> expresion . PT CLONE PARIZQ PARDER
    (92) expresion -> expresion . PT LEN PARIZQ PARDER
    (93) expresion -> expresion . PT TOOWNED PARIZQ PARDER
    (83) opcionpow -> expresion .

    PARDER          reduce using rule 96 (listexpr -> listexpr COMA expresion .)
    COMA            reduce using rule 96 (listexpr -> listexpr COMA expresion .)
    CORDER          reduce using rule 96 (listexpr -> listexpr COMA expresion .)
    MAS             shift and go to state 130
    MENOS           shift and go to state 131
    POR             shift and go to state 132
    DIVIDIDO        shift and go to state 133
    MOD             shift and go to state 134
    AS              shift and go to state 135
    PT              shift and go to state 136
    DPT             reduce using rule 83 (opcionpow -> expresion .)


state 208

    (22) instruccion -> PRINT NOT PARIZQ listexpr PARDER . PTCOMA

    PTCOMA          shift and go to state 228


state 209

    (23) instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER . unelse
    (34) unelse -> . ELSE LLAVEIZQ instrucciones LLAVEDER
    (35) unelse -> . ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse
    (36) unelse -> . empty
    (98) empty -> .

    ELSE            shift and go to state 230
    LET             reduce using rule 98 (empty -> .)
    ID              reduce using rule 98 (empty -> .)
    PRINT           reduce using rule 98 (empty -> .)
    IF              reduce using rule 98 (empty -> .)
    LOOP            reduce using rule 98 (empty -> .)
    BREAK           reduce using rule 98 (empty -> .)
    RETURN          reduce using rule 98 (empty -> .)
    CONTINUE        reduce using rule 98 (empty -> .)
    WHILE           reduce using rule 98 (empty -> .)
    FOR             reduce using rule 98 (empty -> .)
    LLAVEDER        reduce using rule 98 (empty -> .)

    unelse                         shift and go to state 229
    empty                          shift and go to state 231

state 210

    (41) rel -> rel IGUAL IGUAL rel .
    (41) rel -> rel . IGUAL IGUAL rel
    (42) rel -> rel . MENOR rel
    (43) rel -> rel . MAYOR rel
    (44) rel -> rel . MEIGUAL rel
    (45) rel -> rel . MAIGUAL rel
    (46) rel -> rel . DIS rel

  ! shift/reduce conflict for IGUAL resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for MEIGUAL resolved as shift
  ! shift/reduce conflict for MAIGUAL resolved as shift
  ! shift/reduce conflict for DIS resolved as shift
    LLAVEIZQ        reduce using rule 41 (rel -> rel IGUAL IGUAL rel .)
    AND             reduce using rule 41 (rel -> rel IGUAL IGUAL rel .)
    OR              reduce using rule 41 (rel -> rel IGUAL IGUAL rel .)
    PTCOMA          reduce using rule 41 (rel -> rel IGUAL IGUAL rel .)
    PARDER          reduce using rule 41 (rel -> rel IGUAL IGUAL rel .)
    IGUAL           shift and go to state 124
    MENOR           shift and go to state 125
    MAYOR           shift and go to state 126
    MEIGUAL         shift and go to state 127
    MAIGUAL         shift and go to state 128
    DIS             shift and go to state 129

  ! IGUAL           [ reduce using rule 41 (rel -> rel IGUAL IGUAL rel .) ]
  ! MENOR           [ reduce using rule 41 (rel -> rel IGUAL IGUAL rel .) ]
  ! MAYOR           [ reduce using rule 41 (rel -> rel IGUAL IGUAL rel .) ]
  ! MEIGUAL         [ reduce using rule 41 (rel -> rel IGUAL IGUAL rel .) ]
  ! MAIGUAL         [ reduce using rule 41 (rel -> rel IGUAL IGUAL rel .) ]
  ! DIS             [ reduce using rule 41 (rel -> rel IGUAL IGUAL rel .) ]


state 211

    (88) expresion -> expresion PT TOSTRING PARIZQ . PARDER

    PARDER          shift and go to state 232


state 212

    (89) expresion -> expresion PT SQRT PARIZQ . PARDER

    PARDER          shift and go to state 233


state 213

    (90) expresion -> expresion PT ABS PARIZQ . PARDER

    PARDER          shift and go to state 234


state 214

    (91) expresion -> expresion PT CLONE PARIZQ . PARDER

    PARDER          shift and go to state 235


state 215

    (92) expresion -> expresion PT LEN PARIZQ . PARDER

    PARDER          shift and go to state 236


state 216

    (93) expresion -> expresion PT TOOWNED PARIZQ . PARDER

    PARDER          shift and go to state 237


state 217

    (80) expresion -> ID PARIZQ listexpr PARDER .

    MAS             reduce using rule 80 (expresion -> ID PARIZQ listexpr PARDER .)
    MENOS           reduce using rule 80 (expresion -> ID PARIZQ listexpr PARDER .)
    POR             reduce using rule 80 (expresion -> ID PARIZQ listexpr PARDER .)
    DIVIDIDO        reduce using rule 80 (expresion -> ID PARIZQ listexpr PARDER .)
    MOD             reduce using rule 80 (expresion -> ID PARIZQ listexpr PARDER .)
    AS              reduce using rule 80 (expresion -> ID PARIZQ listexpr PARDER .)
    PT              reduce using rule 80 (expresion -> ID PARIZQ listexpr PARDER .)
    IGUAL           reduce using rule 80 (expresion -> ID PARIZQ listexpr PARDER .)
    MENOR           reduce using rule 80 (expresion -> ID PARIZQ listexpr PARDER .)
    MAYOR           reduce using rule 80 (expresion -> ID PARIZQ listexpr PARDER .)
    MEIGUAL         reduce using rule 80 (expresion -> ID PARIZQ listexpr PARDER .)
    MAIGUAL         reduce using rule 80 (expresion -> ID PARIZQ listexpr PARDER .)
    DIS             reduce using rule 80 (expresion -> ID PARIZQ listexpr PARDER .)
    LLAVEIZQ        reduce using rule 80 (expresion -> ID PARIZQ listexpr PARDER .)
    AND             reduce using rule 80 (expresion -> ID PARIZQ listexpr PARDER .)
    OR              reduce using rule 80 (expresion -> ID PARIZQ listexpr PARDER .)
    DPT             reduce using rule 80 (expresion -> ID PARIZQ listexpr PARDER .)
    PTCOMA          reduce using rule 80 (expresion -> ID PARIZQ listexpr PARDER .)
    PARDER          reduce using rule 80 (expresion -> ID PARIZQ listexpr PARDER .)
    COMA            reduce using rule 80 (expresion -> ID PARIZQ listexpr PARDER .)
    CORDER          reduce using rule 80 (expresion -> ID PARIZQ listexpr PARDER .)


state 218

    (82) expresion -> opcionpow DPT DPT expresion .
    (65) expresion -> expresion . MAS expresion
    (66) expresion -> expresion . MENOS expresion
    (67) expresion -> expresion . POR expresion
    (68) expresion -> expresion . DIVIDIDO expresion
    (69) expresion -> expresion . MOD expresion
    (70) expresion -> expresion . AS tipos
    (88) expresion -> expresion . PT TOSTRING PARIZQ PARDER
    (89) expresion -> expresion . PT SQRT PARIZQ PARDER
    (90) expresion -> expresion . PT ABS PARIZQ PARDER
    (91) expresion -> expresion . PT CLONE PARIZQ PARDER
    (92) expresion -> expresion . PT LEN PARIZQ PARDER
    (93) expresion -> expresion . PT TOOWNED PARIZQ PARDER
    (83) opcionpow -> expresion .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for POR resolved as shift
  ! shift/reduce conflict for DIVIDIDO resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AS resolved as shift
  ! shift/reduce conflict for PT resolved as shift
  ! reduce/reduce conflict for DPT resolved using rule 82 (expresion -> opcionpow DPT DPT expresion .)
    IGUAL           reduce using rule 82 (expresion -> opcionpow DPT DPT expresion .)
    MENOR           reduce using rule 82 (expresion -> opcionpow DPT DPT expresion .)
    MAYOR           reduce using rule 82 (expresion -> opcionpow DPT DPT expresion .)
    MEIGUAL         reduce using rule 82 (expresion -> opcionpow DPT DPT expresion .)
    MAIGUAL         reduce using rule 82 (expresion -> opcionpow DPT DPT expresion .)
    DIS             reduce using rule 82 (expresion -> opcionpow DPT DPT expresion .)
    LLAVEIZQ        reduce using rule 82 (expresion -> opcionpow DPT DPT expresion .)
    AND             reduce using rule 82 (expresion -> opcionpow DPT DPT expresion .)
    OR              reduce using rule 82 (expresion -> opcionpow DPT DPT expresion .)
    DPT             reduce using rule 82 (expresion -> opcionpow DPT DPT expresion .)
    PTCOMA          reduce using rule 82 (expresion -> opcionpow DPT DPT expresion .)
    PARDER          reduce using rule 82 (expresion -> opcionpow DPT DPT expresion .)
    COMA            reduce using rule 82 (expresion -> opcionpow DPT DPT expresion .)
    CORDER          reduce using rule 82 (expresion -> opcionpow DPT DPT expresion .)
    MAS             shift and go to state 130
    MENOS           shift and go to state 131
    POR             shift and go to state 132
    DIVIDIDO        shift and go to state 133
    MOD             shift and go to state 134
    AS              shift and go to state 135
    PT              shift and go to state 136

  ! MAS             [ reduce using rule 82 (expresion -> opcionpow DPT DPT expresion .) ]
  ! MENOS           [ reduce using rule 82 (expresion -> opcionpow DPT DPT expresion .) ]
  ! POR             [ reduce using rule 82 (expresion -> opcionpow DPT DPT expresion .) ]
  ! DIVIDIDO        [ reduce using rule 82 (expresion -> opcionpow DPT DPT expresion .) ]
  ! MOD             [ reduce using rule 82 (expresion -> opcionpow DPT DPT expresion .) ]
  ! AS              [ reduce using rule 82 (expresion -> opcionpow DPT DPT expresion .) ]
  ! PT              [ reduce using rule 82 (expresion -> opcionpow DPT DPT expresion .) ]
  ! DPT             [ reduce using rule 83 (opcionpow -> expresion .) ]


state 219

    (85) expresion -> POW PARIZQ ENTERO COMA . ENTERO PARDER

    ENTERO          shift and go to state 238


state 220

    (86) expresion -> POWF PARIZQ DECIMAL COMA . DECIMAL PARDER

    DECIMAL         shift and go to state 239


state 221

    (87) expresion -> LOOP LLAVEIZQ instrucciones LLAVEDER .

    MAS             reduce using rule 87 (expresion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    MENOS           reduce using rule 87 (expresion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    POR             reduce using rule 87 (expresion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    DIVIDIDO        reduce using rule 87 (expresion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    MOD             reduce using rule 87 (expresion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    AS              reduce using rule 87 (expresion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    PT              reduce using rule 87 (expresion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    IGUAL           reduce using rule 87 (expresion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    MENOR           reduce using rule 87 (expresion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    MAYOR           reduce using rule 87 (expresion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    MEIGUAL         reduce using rule 87 (expresion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    MAIGUAL         reduce using rule 87 (expresion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    DIS             reduce using rule 87 (expresion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    LLAVEIZQ        reduce using rule 87 (expresion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    AND             reduce using rule 87 (expresion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    OR              reduce using rule 87 (expresion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    DPT             reduce using rule 87 (expresion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    PTCOMA          reduce using rule 87 (expresion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    PARDER          reduce using rule 87 (expresion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    COMA            reduce using rule 87 (expresion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)
    CORDER          reduce using rule 87 (expresion -> LOOP LLAVEIZQ instrucciones LLAVEDER .)


state 222

    (29) instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .

    LET             reduce using rule 29 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    ID              reduce using rule 29 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    PRINT           reduce using rule 29 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    IF              reduce using rule 29 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    LOOP            reduce using rule 29 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    BREAK           reduce using rule 29 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    RETURN          reduce using rule 29 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    CONTINUE        reduce using rule 29 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    WHILE           reduce using rule 29 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    FOR             reduce using rule 29 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)
    LLAVEDER        reduce using rule 29 (instruccion -> WHILE logica LLAVEIZQ instrucciones LLAVEDER .)


state 223

    (30) instruccion -> FOR ID IN opcionfor LLAVEIZQ . instrucciones LLAVEDER
    (17) instrucciones -> . instruccion instrucciones
    (18) instrucciones -> . instruccion
    (19) instruccion -> . LET mutable ID pyc arrtipos IGUAL logica PTCOMA
    (20) instruccion -> . ID listarreglo IGUAL logica PTCOMA
    (21) instruccion -> . ID PARIZQ listexpr PARDER PTCOMA
    (22) instruccion -> . PRINT NOT PARIZQ listexpr PARDER PTCOMA
    (23) instruccion -> . IF logica LLAVEIZQ instrucciones LLAVEDER unelse
    (24) instruccion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (25) instruccion -> . BREAK logica PTCOMA
    (26) instruccion -> . BREAK PTCOMA
    (27) instruccion -> . RETURN logica PTCOMA
    (28) instruccion -> . CONTINUE PTCOMA
    (29) instruccion -> . WHILE logica LLAVEIZQ instrucciones LLAVEDER
    (30) instruccion -> . FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER

    LET             shift and go to state 51
    ID              shift and go to state 52
    PRINT           shift and go to state 53
    IF              shift and go to state 54
    LOOP            shift and go to state 55
    BREAK           shift and go to state 56
    RETURN          shift and go to state 57
    CONTINUE        shift and go to state 58
    WHILE           shift and go to state 59
    FOR             shift and go to state 60

    instrucciones                  shift and go to state 240
    instruccion                    shift and go to state 50

state 224

    (32) opcionfor -> ENTERO PT . PT logica

    PT              shift and go to state 241


state 225

    (19) instruccion -> LET mutable ID pyc arrtipos IGUAL . logica PTCOMA
    (37) logica -> . logica AND logica
    (38) logica -> . logica OR logica
    (39) logica -> . NOT logica
    (40) logica -> . rel
    (41) rel -> . rel IGUAL IGUAL rel
    (42) rel -> . rel MENOR rel
    (43) rel -> . rel MAYOR rel
    (44) rel -> . rel MEIGUAL rel
    (45) rel -> . rel MAIGUAL rel
    (46) rel -> . rel DIS rel
    (47) rel -> . expresion
    (65) expresion -> . expresion MAS expresion
    (66) expresion -> . expresion MENOS expresion
    (67) expresion -> . expresion POR expresion
    (68) expresion -> . expresion DIVIDIDO expresion
    (69) expresion -> . expresion MOD expresion
    (70) expresion -> . expresion AS tipos
    (71) expresion -> . MENOS expresion
    (72) expresion -> . PARIZQ logica PARDER
    (73) expresion -> . ENTERO
    (74) expresion -> . DECIMAL
    (75) expresion -> . FORM
    (76) expresion -> . TRUE
    (77) expresion -> . FALSE
    (78) expresion -> . VECM NOT listarreglo
    (79) expresion -> . ID listarreglo
    (80) expresion -> . ID PARIZQ listexpr PARDER
    (81) expresion -> . listarreglo
    (82) expresion -> . opcionpow DPT DPT expresion
    (85) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (86) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (87) expresion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (88) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (89) expresion -> . expresion PT SQRT PARIZQ PARDER
    (90) expresion -> . expresion PT ABS PARIZQ PARDER
    (91) expresion -> . expresion PT CLONE PARIZQ PARDER
    (92) expresion -> . expresion PT LEN PARIZQ PARDER
    (93) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (94) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (95) listarreglo -> . empty
    (83) opcionpow -> . expresion
    (84) opcionpow -> . tipos
    (98) empty -> .
    (58) tipos -> . I64
    (59) tipos -> . F64
    (60) tipos -> . BOOL
    (61) tipos -> . CHAR
    (62) tipos -> . STRING
    (63) tipos -> . AMP STR
    (64) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    NOT             shift and go to state 83
    MENOS           shift and go to state 86
    PARIZQ          shift and go to state 88
    ENTERO          shift and go to state 89
    DECIMAL         shift and go to state 90
    FORM            shift and go to state 91
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    VECM            shift and go to state 94
    ID              shift and go to state 96
    POW             shift and go to state 98
    POWF            shift and go to state 99
    LOOP            shift and go to state 100
    CORIZQ          reduce using rule 98 (empty -> .)
    MAS             reduce using rule 98 (empty -> .)
    POR             reduce using rule 98 (empty -> .)
    DIVIDIDO        reduce using rule 98 (empty -> .)
    MOD             reduce using rule 98 (empty -> .)
    AS              reduce using rule 98 (empty -> .)
    PT              reduce using rule 98 (empty -> .)
    IGUAL           reduce using rule 98 (empty -> .)
    MENOR           reduce using rule 98 (empty -> .)
    MAYOR           reduce using rule 98 (empty -> .)
    MEIGUAL         reduce using rule 98 (empty -> .)
    MAIGUAL         reduce using rule 98 (empty -> .)
    DIS             reduce using rule 98 (empty -> .)
    PTCOMA          reduce using rule 98 (empty -> .)
    AND             reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    DPT             reduce using rule 98 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 98 (empty -> .) ]

    logica                         shift and go to state 242
    rel                            shift and go to state 84
    expresion                      shift and go to state 85
    tipos                          shift and go to state 87
    listarreglo                    shift and go to state 95
    opcionpow                      shift and go to state 97
    empty                          shift and go to state 80

state 226

    (55) arreglos -> CORIZQ arreglos . PTCOMA ENTERO CORDER

    PTCOMA          shift and go to state 243


state 227

    (56) arreglos -> tipos .

    PTCOMA          reduce using rule 56 (arreglos -> tipos .)


state 228

    (22) instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .

    LET             reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    ID              reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    PRINT           reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    IF              reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    LOOP            reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    BREAK           reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    RETURN          reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    CONTINUE        reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    WHILE           reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    FOR             reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)
    LLAVEDER        reduce using rule 22 (instruccion -> PRINT NOT PARIZQ listexpr PARDER PTCOMA .)


state 229

    (23) instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .

    LET             reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    ID              reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    PRINT           reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    IF              reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    LOOP            reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    BREAK           reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    RETURN          reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    CONTINUE        reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    WHILE           reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    FOR             reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    LLAVEDER        reduce using rule 23 (instruccion -> IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)


state 230

    (34) unelse -> ELSE . LLAVEIZQ instrucciones LLAVEDER
    (35) unelse -> ELSE . IF logica LLAVEIZQ instrucciones LLAVEDER unelse

    LLAVEIZQ        shift and go to state 244
    IF              shift and go to state 245


state 231

    (36) unelse -> empty .

    LET             reduce using rule 36 (unelse -> empty .)
    ID              reduce using rule 36 (unelse -> empty .)
    PRINT           reduce using rule 36 (unelse -> empty .)
    IF              reduce using rule 36 (unelse -> empty .)
    LOOP            reduce using rule 36 (unelse -> empty .)
    BREAK           reduce using rule 36 (unelse -> empty .)
    RETURN          reduce using rule 36 (unelse -> empty .)
    CONTINUE        reduce using rule 36 (unelse -> empty .)
    WHILE           reduce using rule 36 (unelse -> empty .)
    FOR             reduce using rule 36 (unelse -> empty .)
    LLAVEDER        reduce using rule 36 (unelse -> empty .)


state 232

    (88) expresion -> expresion PT TOSTRING PARIZQ PARDER .

    MAS             reduce using rule 88 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    MENOS           reduce using rule 88 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    POR             reduce using rule 88 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    DIVIDIDO        reduce using rule 88 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    MOD             reduce using rule 88 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    AS              reduce using rule 88 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    PT              reduce using rule 88 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    IGUAL           reduce using rule 88 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    MENOR           reduce using rule 88 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    MAYOR           reduce using rule 88 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    MEIGUAL         reduce using rule 88 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    MAIGUAL         reduce using rule 88 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    DIS             reduce using rule 88 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    LLAVEIZQ        reduce using rule 88 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    AND             reduce using rule 88 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    OR              reduce using rule 88 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    DPT             reduce using rule 88 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    PTCOMA          reduce using rule 88 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    PARDER          reduce using rule 88 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    COMA            reduce using rule 88 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)
    CORDER          reduce using rule 88 (expresion -> expresion PT TOSTRING PARIZQ PARDER .)


state 233

    (89) expresion -> expresion PT SQRT PARIZQ PARDER .

    MAS             reduce using rule 89 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    MENOS           reduce using rule 89 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    POR             reduce using rule 89 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    DIVIDIDO        reduce using rule 89 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    MOD             reduce using rule 89 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    AS              reduce using rule 89 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    PT              reduce using rule 89 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    IGUAL           reduce using rule 89 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    MENOR           reduce using rule 89 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    MAYOR           reduce using rule 89 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    MEIGUAL         reduce using rule 89 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    MAIGUAL         reduce using rule 89 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    DIS             reduce using rule 89 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    LLAVEIZQ        reduce using rule 89 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    AND             reduce using rule 89 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    OR              reduce using rule 89 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    DPT             reduce using rule 89 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    PTCOMA          reduce using rule 89 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    PARDER          reduce using rule 89 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    COMA            reduce using rule 89 (expresion -> expresion PT SQRT PARIZQ PARDER .)
    CORDER          reduce using rule 89 (expresion -> expresion PT SQRT PARIZQ PARDER .)


state 234

    (90) expresion -> expresion PT ABS PARIZQ PARDER .

    MAS             reduce using rule 90 (expresion -> expresion PT ABS PARIZQ PARDER .)
    MENOS           reduce using rule 90 (expresion -> expresion PT ABS PARIZQ PARDER .)
    POR             reduce using rule 90 (expresion -> expresion PT ABS PARIZQ PARDER .)
    DIVIDIDO        reduce using rule 90 (expresion -> expresion PT ABS PARIZQ PARDER .)
    MOD             reduce using rule 90 (expresion -> expresion PT ABS PARIZQ PARDER .)
    AS              reduce using rule 90 (expresion -> expresion PT ABS PARIZQ PARDER .)
    PT              reduce using rule 90 (expresion -> expresion PT ABS PARIZQ PARDER .)
    IGUAL           reduce using rule 90 (expresion -> expresion PT ABS PARIZQ PARDER .)
    MENOR           reduce using rule 90 (expresion -> expresion PT ABS PARIZQ PARDER .)
    MAYOR           reduce using rule 90 (expresion -> expresion PT ABS PARIZQ PARDER .)
    MEIGUAL         reduce using rule 90 (expresion -> expresion PT ABS PARIZQ PARDER .)
    MAIGUAL         reduce using rule 90 (expresion -> expresion PT ABS PARIZQ PARDER .)
    DIS             reduce using rule 90 (expresion -> expresion PT ABS PARIZQ PARDER .)
    LLAVEIZQ        reduce using rule 90 (expresion -> expresion PT ABS PARIZQ PARDER .)
    AND             reduce using rule 90 (expresion -> expresion PT ABS PARIZQ PARDER .)
    OR              reduce using rule 90 (expresion -> expresion PT ABS PARIZQ PARDER .)
    DPT             reduce using rule 90 (expresion -> expresion PT ABS PARIZQ PARDER .)
    PTCOMA          reduce using rule 90 (expresion -> expresion PT ABS PARIZQ PARDER .)
    PARDER          reduce using rule 90 (expresion -> expresion PT ABS PARIZQ PARDER .)
    COMA            reduce using rule 90 (expresion -> expresion PT ABS PARIZQ PARDER .)
    CORDER          reduce using rule 90 (expresion -> expresion PT ABS PARIZQ PARDER .)


state 235

    (91) expresion -> expresion PT CLONE PARIZQ PARDER .

    MAS             reduce using rule 91 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    MENOS           reduce using rule 91 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    POR             reduce using rule 91 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    DIVIDIDO        reduce using rule 91 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    MOD             reduce using rule 91 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    AS              reduce using rule 91 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    PT              reduce using rule 91 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    IGUAL           reduce using rule 91 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    MENOR           reduce using rule 91 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    MAYOR           reduce using rule 91 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    MEIGUAL         reduce using rule 91 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    MAIGUAL         reduce using rule 91 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    DIS             reduce using rule 91 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    LLAVEIZQ        reduce using rule 91 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    AND             reduce using rule 91 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    OR              reduce using rule 91 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    DPT             reduce using rule 91 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    PTCOMA          reduce using rule 91 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    PARDER          reduce using rule 91 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    COMA            reduce using rule 91 (expresion -> expresion PT CLONE PARIZQ PARDER .)
    CORDER          reduce using rule 91 (expresion -> expresion PT CLONE PARIZQ PARDER .)


state 236

    (92) expresion -> expresion PT LEN PARIZQ PARDER .

    MAS             reduce using rule 92 (expresion -> expresion PT LEN PARIZQ PARDER .)
    MENOS           reduce using rule 92 (expresion -> expresion PT LEN PARIZQ PARDER .)
    POR             reduce using rule 92 (expresion -> expresion PT LEN PARIZQ PARDER .)
    DIVIDIDO        reduce using rule 92 (expresion -> expresion PT LEN PARIZQ PARDER .)
    MOD             reduce using rule 92 (expresion -> expresion PT LEN PARIZQ PARDER .)
    AS              reduce using rule 92 (expresion -> expresion PT LEN PARIZQ PARDER .)
    PT              reduce using rule 92 (expresion -> expresion PT LEN PARIZQ PARDER .)
    IGUAL           reduce using rule 92 (expresion -> expresion PT LEN PARIZQ PARDER .)
    MENOR           reduce using rule 92 (expresion -> expresion PT LEN PARIZQ PARDER .)
    MAYOR           reduce using rule 92 (expresion -> expresion PT LEN PARIZQ PARDER .)
    MEIGUAL         reduce using rule 92 (expresion -> expresion PT LEN PARIZQ PARDER .)
    MAIGUAL         reduce using rule 92 (expresion -> expresion PT LEN PARIZQ PARDER .)
    DIS             reduce using rule 92 (expresion -> expresion PT LEN PARIZQ PARDER .)
    LLAVEIZQ        reduce using rule 92 (expresion -> expresion PT LEN PARIZQ PARDER .)
    AND             reduce using rule 92 (expresion -> expresion PT LEN PARIZQ PARDER .)
    OR              reduce using rule 92 (expresion -> expresion PT LEN PARIZQ PARDER .)
    DPT             reduce using rule 92 (expresion -> expresion PT LEN PARIZQ PARDER .)
    PTCOMA          reduce using rule 92 (expresion -> expresion PT LEN PARIZQ PARDER .)
    PARDER          reduce using rule 92 (expresion -> expresion PT LEN PARIZQ PARDER .)
    COMA            reduce using rule 92 (expresion -> expresion PT LEN PARIZQ PARDER .)
    CORDER          reduce using rule 92 (expresion -> expresion PT LEN PARIZQ PARDER .)


state 237

    (93) expresion -> expresion PT TOOWNED PARIZQ PARDER .

    MAS             reduce using rule 93 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    MENOS           reduce using rule 93 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    POR             reduce using rule 93 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    DIVIDIDO        reduce using rule 93 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    MOD             reduce using rule 93 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    AS              reduce using rule 93 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    PT              reduce using rule 93 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    IGUAL           reduce using rule 93 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    MENOR           reduce using rule 93 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    MAYOR           reduce using rule 93 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    MEIGUAL         reduce using rule 93 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    MAIGUAL         reduce using rule 93 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    DIS             reduce using rule 93 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    LLAVEIZQ        reduce using rule 93 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    AND             reduce using rule 93 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    OR              reduce using rule 93 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    DPT             reduce using rule 93 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    PTCOMA          reduce using rule 93 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    PARDER          reduce using rule 93 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    COMA            reduce using rule 93 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)
    CORDER          reduce using rule 93 (expresion -> expresion PT TOOWNED PARIZQ PARDER .)


state 238

    (85) expresion -> POW PARIZQ ENTERO COMA ENTERO . PARDER

    PARDER          shift and go to state 246


state 239

    (86) expresion -> POWF PARIZQ DECIMAL COMA DECIMAL . PARDER

    PARDER          shift and go to state 247


state 240

    (30) instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones . LLAVEDER

    LLAVEDER        shift and go to state 248


state 241

    (32) opcionfor -> ENTERO PT PT . logica
    (37) logica -> . logica AND logica
    (38) logica -> . logica OR logica
    (39) logica -> . NOT logica
    (40) logica -> . rel
    (41) rel -> . rel IGUAL IGUAL rel
    (42) rel -> . rel MENOR rel
    (43) rel -> . rel MAYOR rel
    (44) rel -> . rel MEIGUAL rel
    (45) rel -> . rel MAIGUAL rel
    (46) rel -> . rel DIS rel
    (47) rel -> . expresion
    (65) expresion -> . expresion MAS expresion
    (66) expresion -> . expresion MENOS expresion
    (67) expresion -> . expresion POR expresion
    (68) expresion -> . expresion DIVIDIDO expresion
    (69) expresion -> . expresion MOD expresion
    (70) expresion -> . expresion AS tipos
    (71) expresion -> . MENOS expresion
    (72) expresion -> . PARIZQ logica PARDER
    (73) expresion -> . ENTERO
    (74) expresion -> . DECIMAL
    (75) expresion -> . FORM
    (76) expresion -> . TRUE
    (77) expresion -> . FALSE
    (78) expresion -> . VECM NOT listarreglo
    (79) expresion -> . ID listarreglo
    (80) expresion -> . ID PARIZQ listexpr PARDER
    (81) expresion -> . listarreglo
    (82) expresion -> . opcionpow DPT DPT expresion
    (85) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (86) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (87) expresion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (88) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (89) expresion -> . expresion PT SQRT PARIZQ PARDER
    (90) expresion -> . expresion PT ABS PARIZQ PARDER
    (91) expresion -> . expresion PT CLONE PARIZQ PARDER
    (92) expresion -> . expresion PT LEN PARIZQ PARDER
    (93) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (94) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (95) listarreglo -> . empty
    (83) opcionpow -> . expresion
    (84) opcionpow -> . tipos
    (98) empty -> .
    (58) tipos -> . I64
    (59) tipos -> . F64
    (60) tipos -> . BOOL
    (61) tipos -> . CHAR
    (62) tipos -> . STRING
    (63) tipos -> . AMP STR
    (64) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    NOT             shift and go to state 83
    MENOS           shift and go to state 86
    PARIZQ          shift and go to state 88
    ENTERO          shift and go to state 89
    DECIMAL         shift and go to state 90
    FORM            shift and go to state 91
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    VECM            shift and go to state 94
    ID              shift and go to state 96
    POW             shift and go to state 98
    POWF            shift and go to state 99
    LOOP            shift and go to state 100
    CORIZQ          reduce using rule 98 (empty -> .)
    MAS             reduce using rule 98 (empty -> .)
    POR             reduce using rule 98 (empty -> .)
    DIVIDIDO        reduce using rule 98 (empty -> .)
    MOD             reduce using rule 98 (empty -> .)
    AS              reduce using rule 98 (empty -> .)
    PT              reduce using rule 98 (empty -> .)
    IGUAL           reduce using rule 98 (empty -> .)
    MENOR           reduce using rule 98 (empty -> .)
    MAYOR           reduce using rule 98 (empty -> .)
    MEIGUAL         reduce using rule 98 (empty -> .)
    MAIGUAL         reduce using rule 98 (empty -> .)
    DIS             reduce using rule 98 (empty -> .)
    AND             reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    LLAVEIZQ        reduce using rule 98 (empty -> .)
    DPT             reduce using rule 98 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 98 (empty -> .) ]

    logica                         shift and go to state 249
    rel                            shift and go to state 84
    expresion                      shift and go to state 85
    tipos                          shift and go to state 87
    listarreglo                    shift and go to state 95
    opcionpow                      shift and go to state 97
    empty                          shift and go to state 80

state 242

    (19) instruccion -> LET mutable ID pyc arrtipos IGUAL logica . PTCOMA
    (37) logica -> logica . AND logica
    (38) logica -> logica . OR logica

    PTCOMA          shift and go to state 250
    AND             shift and go to state 121
    OR              shift and go to state 122


state 243

    (55) arreglos -> CORIZQ arreglos PTCOMA . ENTERO CORDER

    ENTERO          shift and go to state 251


state 244

    (34) unelse -> ELSE LLAVEIZQ . instrucciones LLAVEDER
    (17) instrucciones -> . instruccion instrucciones
    (18) instrucciones -> . instruccion
    (19) instruccion -> . LET mutable ID pyc arrtipos IGUAL logica PTCOMA
    (20) instruccion -> . ID listarreglo IGUAL logica PTCOMA
    (21) instruccion -> . ID PARIZQ listexpr PARDER PTCOMA
    (22) instruccion -> . PRINT NOT PARIZQ listexpr PARDER PTCOMA
    (23) instruccion -> . IF logica LLAVEIZQ instrucciones LLAVEDER unelse
    (24) instruccion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (25) instruccion -> . BREAK logica PTCOMA
    (26) instruccion -> . BREAK PTCOMA
    (27) instruccion -> . RETURN logica PTCOMA
    (28) instruccion -> . CONTINUE PTCOMA
    (29) instruccion -> . WHILE logica LLAVEIZQ instrucciones LLAVEDER
    (30) instruccion -> . FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER

    LET             shift and go to state 51
    ID              shift and go to state 52
    PRINT           shift and go to state 53
    IF              shift and go to state 54
    LOOP            shift and go to state 55
    BREAK           shift and go to state 56
    RETURN          shift and go to state 57
    CONTINUE        shift and go to state 58
    WHILE           shift and go to state 59
    FOR             shift and go to state 60

    instrucciones                  shift and go to state 252
    instruccion                    shift and go to state 50

state 245

    (35) unelse -> ELSE IF . logica LLAVEIZQ instrucciones LLAVEDER unelse
    (37) logica -> . logica AND logica
    (38) logica -> . logica OR logica
    (39) logica -> . NOT logica
    (40) logica -> . rel
    (41) rel -> . rel IGUAL IGUAL rel
    (42) rel -> . rel MENOR rel
    (43) rel -> . rel MAYOR rel
    (44) rel -> . rel MEIGUAL rel
    (45) rel -> . rel MAIGUAL rel
    (46) rel -> . rel DIS rel
    (47) rel -> . expresion
    (65) expresion -> . expresion MAS expresion
    (66) expresion -> . expresion MENOS expresion
    (67) expresion -> . expresion POR expresion
    (68) expresion -> . expresion DIVIDIDO expresion
    (69) expresion -> . expresion MOD expresion
    (70) expresion -> . expresion AS tipos
    (71) expresion -> . MENOS expresion
    (72) expresion -> . PARIZQ logica PARDER
    (73) expresion -> . ENTERO
    (74) expresion -> . DECIMAL
    (75) expresion -> . FORM
    (76) expresion -> . TRUE
    (77) expresion -> . FALSE
    (78) expresion -> . VECM NOT listarreglo
    (79) expresion -> . ID listarreglo
    (80) expresion -> . ID PARIZQ listexpr PARDER
    (81) expresion -> . listarreglo
    (82) expresion -> . opcionpow DPT DPT expresion
    (85) expresion -> . POW PARIZQ ENTERO COMA ENTERO PARDER
    (86) expresion -> . POWF PARIZQ DECIMAL COMA DECIMAL PARDER
    (87) expresion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (88) expresion -> . expresion PT TOSTRING PARIZQ PARDER
    (89) expresion -> . expresion PT SQRT PARIZQ PARDER
    (90) expresion -> . expresion PT ABS PARIZQ PARDER
    (91) expresion -> . expresion PT CLONE PARIZQ PARDER
    (92) expresion -> . expresion PT LEN PARIZQ PARDER
    (93) expresion -> . expresion PT TOOWNED PARIZQ PARDER
    (94) listarreglo -> . listarreglo CORIZQ listexpr CORDER
    (95) listarreglo -> . empty
    (83) opcionpow -> . expresion
    (84) opcionpow -> . tipos
    (98) empty -> .
    (58) tipos -> . I64
    (59) tipos -> . F64
    (60) tipos -> . BOOL
    (61) tipos -> . CHAR
    (62) tipos -> . STRING
    (63) tipos -> . AMP STR
    (64) tipos -> . USIZE

  ! shift/reduce conflict for MENOS resolved as shift
    NOT             shift and go to state 83
    MENOS           shift and go to state 86
    PARIZQ          shift and go to state 88
    ENTERO          shift and go to state 89
    DECIMAL         shift and go to state 90
    FORM            shift and go to state 91
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    VECM            shift and go to state 94
    ID              shift and go to state 96
    POW             shift and go to state 98
    POWF            shift and go to state 99
    LOOP            shift and go to state 100
    CORIZQ          reduce using rule 98 (empty -> .)
    MAS             reduce using rule 98 (empty -> .)
    POR             reduce using rule 98 (empty -> .)
    DIVIDIDO        reduce using rule 98 (empty -> .)
    MOD             reduce using rule 98 (empty -> .)
    AS              reduce using rule 98 (empty -> .)
    PT              reduce using rule 98 (empty -> .)
    IGUAL           reduce using rule 98 (empty -> .)
    MENOR           reduce using rule 98 (empty -> .)
    MAYOR           reduce using rule 98 (empty -> .)
    MEIGUAL         reduce using rule 98 (empty -> .)
    MAIGUAL         reduce using rule 98 (empty -> .)
    DIS             reduce using rule 98 (empty -> .)
    LLAVEIZQ        reduce using rule 98 (empty -> .)
    AND             reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    DPT             reduce using rule 98 (empty -> .)
    I64             shift and go to state 62
    F64             shift and go to state 63
    BOOL            shift and go to state 64
    CHAR            shift and go to state 65
    STRING          shift and go to state 66
    AMP             shift and go to state 67
    USIZE           shift and go to state 68

  ! MENOS           [ reduce using rule 98 (empty -> .) ]

    logica                         shift and go to state 253
    rel                            shift and go to state 84
    expresion                      shift and go to state 85
    tipos                          shift and go to state 87
    listarreglo                    shift and go to state 95
    opcionpow                      shift and go to state 97
    empty                          shift and go to state 80

state 246

    (85) expresion -> POW PARIZQ ENTERO COMA ENTERO PARDER .

    MAS             reduce using rule 85 (expresion -> POW PARIZQ ENTERO COMA ENTERO PARDER .)
    MENOS           reduce using rule 85 (expresion -> POW PARIZQ ENTERO COMA ENTERO PARDER .)
    POR             reduce using rule 85 (expresion -> POW PARIZQ ENTERO COMA ENTERO PARDER .)
    DIVIDIDO        reduce using rule 85 (expresion -> POW PARIZQ ENTERO COMA ENTERO PARDER .)
    MOD             reduce using rule 85 (expresion -> POW PARIZQ ENTERO COMA ENTERO PARDER .)
    AS              reduce using rule 85 (expresion -> POW PARIZQ ENTERO COMA ENTERO PARDER .)
    PT              reduce using rule 85 (expresion -> POW PARIZQ ENTERO COMA ENTERO PARDER .)
    IGUAL           reduce using rule 85 (expresion -> POW PARIZQ ENTERO COMA ENTERO PARDER .)
    MENOR           reduce using rule 85 (expresion -> POW PARIZQ ENTERO COMA ENTERO PARDER .)
    MAYOR           reduce using rule 85 (expresion -> POW PARIZQ ENTERO COMA ENTERO PARDER .)
    MEIGUAL         reduce using rule 85 (expresion -> POW PARIZQ ENTERO COMA ENTERO PARDER .)
    MAIGUAL         reduce using rule 85 (expresion -> POW PARIZQ ENTERO COMA ENTERO PARDER .)
    DIS             reduce using rule 85 (expresion -> POW PARIZQ ENTERO COMA ENTERO PARDER .)
    LLAVEIZQ        reduce using rule 85 (expresion -> POW PARIZQ ENTERO COMA ENTERO PARDER .)
    AND             reduce using rule 85 (expresion -> POW PARIZQ ENTERO COMA ENTERO PARDER .)
    OR              reduce using rule 85 (expresion -> POW PARIZQ ENTERO COMA ENTERO PARDER .)
    DPT             reduce using rule 85 (expresion -> POW PARIZQ ENTERO COMA ENTERO PARDER .)
    PTCOMA          reduce using rule 85 (expresion -> POW PARIZQ ENTERO COMA ENTERO PARDER .)
    PARDER          reduce using rule 85 (expresion -> POW PARIZQ ENTERO COMA ENTERO PARDER .)
    COMA            reduce using rule 85 (expresion -> POW PARIZQ ENTERO COMA ENTERO PARDER .)
    CORDER          reduce using rule 85 (expresion -> POW PARIZQ ENTERO COMA ENTERO PARDER .)


state 247

    (86) expresion -> POWF PARIZQ DECIMAL COMA DECIMAL PARDER .

    MAS             reduce using rule 86 (expresion -> POWF PARIZQ DECIMAL COMA DECIMAL PARDER .)
    MENOS           reduce using rule 86 (expresion -> POWF PARIZQ DECIMAL COMA DECIMAL PARDER .)
    POR             reduce using rule 86 (expresion -> POWF PARIZQ DECIMAL COMA DECIMAL PARDER .)
    DIVIDIDO        reduce using rule 86 (expresion -> POWF PARIZQ DECIMAL COMA DECIMAL PARDER .)
    MOD             reduce using rule 86 (expresion -> POWF PARIZQ DECIMAL COMA DECIMAL PARDER .)
    AS              reduce using rule 86 (expresion -> POWF PARIZQ DECIMAL COMA DECIMAL PARDER .)
    PT              reduce using rule 86 (expresion -> POWF PARIZQ DECIMAL COMA DECIMAL PARDER .)
    IGUAL           reduce using rule 86 (expresion -> POWF PARIZQ DECIMAL COMA DECIMAL PARDER .)
    MENOR           reduce using rule 86 (expresion -> POWF PARIZQ DECIMAL COMA DECIMAL PARDER .)
    MAYOR           reduce using rule 86 (expresion -> POWF PARIZQ DECIMAL COMA DECIMAL PARDER .)
    MEIGUAL         reduce using rule 86 (expresion -> POWF PARIZQ DECIMAL COMA DECIMAL PARDER .)
    MAIGUAL         reduce using rule 86 (expresion -> POWF PARIZQ DECIMAL COMA DECIMAL PARDER .)
    DIS             reduce using rule 86 (expresion -> POWF PARIZQ DECIMAL COMA DECIMAL PARDER .)
    LLAVEIZQ        reduce using rule 86 (expresion -> POWF PARIZQ DECIMAL COMA DECIMAL PARDER .)
    AND             reduce using rule 86 (expresion -> POWF PARIZQ DECIMAL COMA DECIMAL PARDER .)
    OR              reduce using rule 86 (expresion -> POWF PARIZQ DECIMAL COMA DECIMAL PARDER .)
    DPT             reduce using rule 86 (expresion -> POWF PARIZQ DECIMAL COMA DECIMAL PARDER .)
    PTCOMA          reduce using rule 86 (expresion -> POWF PARIZQ DECIMAL COMA DECIMAL PARDER .)
    PARDER          reduce using rule 86 (expresion -> POWF PARIZQ DECIMAL COMA DECIMAL PARDER .)
    COMA            reduce using rule 86 (expresion -> POWF PARIZQ DECIMAL COMA DECIMAL PARDER .)
    CORDER          reduce using rule 86 (expresion -> POWF PARIZQ DECIMAL COMA DECIMAL PARDER .)


state 248

    (30) instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .

    LET             reduce using rule 30 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    ID              reduce using rule 30 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    PRINT           reduce using rule 30 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    IF              reduce using rule 30 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    LOOP            reduce using rule 30 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    BREAK           reduce using rule 30 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    RETURN          reduce using rule 30 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    CONTINUE        reduce using rule 30 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    WHILE           reduce using rule 30 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    FOR             reduce using rule 30 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)
    LLAVEDER        reduce using rule 30 (instruccion -> FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER .)


state 249

    (32) opcionfor -> ENTERO PT PT logica .
    (37) logica -> logica . AND logica
    (38) logica -> logica . OR logica

    LLAVEIZQ        reduce using rule 32 (opcionfor -> ENTERO PT PT logica .)
    AND             shift and go to state 121
    OR              shift and go to state 122


state 250

    (19) instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .

    LET             reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    ID              reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    PRINT           reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    IF              reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    LOOP            reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    BREAK           reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    RETURN          reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    CONTINUE        reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    WHILE           reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    FOR             reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)
    LLAVEDER        reduce using rule 19 (instruccion -> LET mutable ID pyc arrtipos IGUAL logica PTCOMA .)


state 251

    (55) arreglos -> CORIZQ arreglos PTCOMA ENTERO . CORDER

    CORDER          shift and go to state 254


state 252

    (34) unelse -> ELSE LLAVEIZQ instrucciones . LLAVEDER

    LLAVEDER        shift and go to state 255


state 253

    (35) unelse -> ELSE IF logica . LLAVEIZQ instrucciones LLAVEDER unelse
    (37) logica -> logica . AND logica
    (38) logica -> logica . OR logica

    LLAVEIZQ        shift and go to state 256
    AND             shift and go to state 121
    OR              shift and go to state 122


state 254

    (55) arreglos -> CORIZQ arreglos PTCOMA ENTERO CORDER .

    IGUAL           reduce using rule 55 (arreglos -> CORIZQ arreglos PTCOMA ENTERO CORDER .)
    PTCOMA          reduce using rule 55 (arreglos -> CORIZQ arreglos PTCOMA ENTERO CORDER .)


state 255

    (34) unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .

    LET             reduce using rule 34 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    ID              reduce using rule 34 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    PRINT           reduce using rule 34 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    IF              reduce using rule 34 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    LOOP            reduce using rule 34 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    BREAK           reduce using rule 34 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    RETURN          reduce using rule 34 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    CONTINUE        reduce using rule 34 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    WHILE           reduce using rule 34 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    FOR             reduce using rule 34 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)
    LLAVEDER        reduce using rule 34 (unelse -> ELSE LLAVEIZQ instrucciones LLAVEDER .)


state 256

    (35) unelse -> ELSE IF logica LLAVEIZQ . instrucciones LLAVEDER unelse
    (17) instrucciones -> . instruccion instrucciones
    (18) instrucciones -> . instruccion
    (19) instruccion -> . LET mutable ID pyc arrtipos IGUAL logica PTCOMA
    (20) instruccion -> . ID listarreglo IGUAL logica PTCOMA
    (21) instruccion -> . ID PARIZQ listexpr PARDER PTCOMA
    (22) instruccion -> . PRINT NOT PARIZQ listexpr PARDER PTCOMA
    (23) instruccion -> . IF logica LLAVEIZQ instrucciones LLAVEDER unelse
    (24) instruccion -> . LOOP LLAVEIZQ instrucciones LLAVEDER
    (25) instruccion -> . BREAK logica PTCOMA
    (26) instruccion -> . BREAK PTCOMA
    (27) instruccion -> . RETURN logica PTCOMA
    (28) instruccion -> . CONTINUE PTCOMA
    (29) instruccion -> . WHILE logica LLAVEIZQ instrucciones LLAVEDER
    (30) instruccion -> . FOR ID IN opcionfor LLAVEIZQ instrucciones LLAVEDER

    LET             shift and go to state 51
    ID              shift and go to state 52
    PRINT           shift and go to state 53
    IF              shift and go to state 54
    LOOP            shift and go to state 55
    BREAK           shift and go to state 56
    RETURN          shift and go to state 57
    CONTINUE        shift and go to state 58
    WHILE           shift and go to state 59
    FOR             shift and go to state 60

    instrucciones                  shift and go to state 257
    instruccion                    shift and go to state 50

state 257

    (35) unelse -> ELSE IF logica LLAVEIZQ instrucciones . LLAVEDER unelse

    LLAVEDER        shift and go to state 258


state 258

    (35) unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER . unelse
    (34) unelse -> . ELSE LLAVEIZQ instrucciones LLAVEDER
    (35) unelse -> . ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse
    (36) unelse -> . empty
    (98) empty -> .

    ELSE            shift and go to state 230
    LET             reduce using rule 98 (empty -> .)
    ID              reduce using rule 98 (empty -> .)
    PRINT           reduce using rule 98 (empty -> .)
    IF              reduce using rule 98 (empty -> .)
    LOOP            reduce using rule 98 (empty -> .)
    BREAK           reduce using rule 98 (empty -> .)
    RETURN          reduce using rule 98 (empty -> .)
    CONTINUE        reduce using rule 98 (empty -> .)
    WHILE           reduce using rule 98 (empty -> .)
    FOR             reduce using rule 98 (empty -> .)
    LLAVEDER        reduce using rule 98 (empty -> .)

    unelse                         shift and go to state 259
    empty                          shift and go to state 231

state 259

    (35) unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .

    LET             reduce using rule 35 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    ID              reduce using rule 35 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    PRINT           reduce using rule 35 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    IF              reduce using rule 35 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    LOOP            reduce using rule 35 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    BREAK           reduce using rule 35 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    RETURN          reduce using rule 35 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    CONTINUE        reduce using rule 35 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    WHILE           reduce using rule 35 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    FOR             reduce using rule 35 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)
    LLAVEDER        reduce using rule 35 (unelse -> ELSE IF logica LLAVEIZQ instrucciones LLAVEDER unelse .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MENOS in state 54 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 56 resolved as shift
WARNING: shift/reduce conflict for PTCOMA in state 56 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 57 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 59 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 79 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 83 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 86 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 88 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 115 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 116 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 119 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 121 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 122 resolved as shift
WARNING: shift/reduce conflict for AND in state 123 resolved as shift
WARNING: shift/reduce conflict for OR in state 123 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 125 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 126 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 127 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 128 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 129 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 130 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 131 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 132 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 133 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 134 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 141 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 150 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 161 resolved as shift
WARNING: shift/reduce conflict for AND in state 164 resolved as shift
WARNING: shift/reduce conflict for OR in state 164 resolved as shift
WARNING: shift/reduce conflict for AND in state 165 resolved as shift
WARNING: shift/reduce conflict for OR in state 165 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 166 resolved as shift
WARNING: shift/reduce conflict for IGUAL in state 167 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 167 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 167 resolved as shift
WARNING: shift/reduce conflict for MEIGUAL in state 167 resolved as shift
WARNING: shift/reduce conflict for MAIGUAL in state 167 resolved as shift
WARNING: shift/reduce conflict for DIS in state 167 resolved as shift
WARNING: shift/reduce conflict for IGUAL in state 168 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 168 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 168 resolved as shift
WARNING: shift/reduce conflict for MEIGUAL in state 168 resolved as shift
WARNING: shift/reduce conflict for MAIGUAL in state 168 resolved as shift
WARNING: shift/reduce conflict for DIS in state 168 resolved as shift
WARNING: shift/reduce conflict for IGUAL in state 169 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 169 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 169 resolved as shift
WARNING: shift/reduce conflict for MEIGUAL in state 169 resolved as shift
WARNING: shift/reduce conflict for MAIGUAL in state 169 resolved as shift
WARNING: shift/reduce conflict for DIS in state 169 resolved as shift
WARNING: shift/reduce conflict for IGUAL in state 170 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 170 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 170 resolved as shift
WARNING: shift/reduce conflict for MEIGUAL in state 170 resolved as shift
WARNING: shift/reduce conflict for MAIGUAL in state 170 resolved as shift
WARNING: shift/reduce conflict for DIS in state 170 resolved as shift
WARNING: shift/reduce conflict for IGUAL in state 171 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 171 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 171 resolved as shift
WARNING: shift/reduce conflict for MEIGUAL in state 171 resolved as shift
WARNING: shift/reduce conflict for MAIGUAL in state 171 resolved as shift
WARNING: shift/reduce conflict for DIS in state 171 resolved as shift
WARNING: shift/reduce conflict for MAS in state 176 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 176 resolved as shift
WARNING: shift/reduce conflict for POR in state 176 resolved as shift
WARNING: shift/reduce conflict for DIVIDIDO in state 176 resolved as shift
WARNING: shift/reduce conflict for MOD in state 176 resolved as shift
WARNING: shift/reduce conflict for AS in state 176 resolved as shift
WARNING: shift/reduce conflict for PT in state 176 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 187 resolved as shift
WARNING: shift/reduce conflict for PT in state 195 resolved as shift
WARNING: shift/reduce conflict for IGUAL in state 210 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 210 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 210 resolved as shift
WARNING: shift/reduce conflict for MEIGUAL in state 210 resolved as shift
WARNING: shift/reduce conflict for MAIGUAL in state 210 resolved as shift
WARNING: shift/reduce conflict for DIS in state 210 resolved as shift
WARNING: shift/reduce conflict for MAS in state 218 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 218 resolved as shift
WARNING: shift/reduce conflict for POR in state 218 resolved as shift
WARNING: shift/reduce conflict for DIVIDIDO in state 218 resolved as shift
WARNING: shift/reduce conflict for MOD in state 218 resolved as shift
WARNING: shift/reduce conflict for AS in state 218 resolved as shift
WARNING: shift/reduce conflict for PT in state 218 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 225 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 241 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 245 resolved as shift
WARNING: reduce/reduce conflict in state 137 resolved using rule (expresion -> MENOS expresion)
WARNING: rejected rule (opcionpow -> expresion) in state 137
WARNING: reduce/reduce conflict in state 172 resolved using rule (expresion -> expresion MAS expresion)
WARNING: rejected rule (opcionpow -> expresion) in state 172
WARNING: reduce/reduce conflict in state 173 resolved using rule (expresion -> expresion MENOS expresion)
WARNING: rejected rule (opcionpow -> expresion) in state 173
WARNING: reduce/reduce conflict in state 174 resolved using rule (expresion -> expresion POR expresion)
WARNING: rejected rule (opcionpow -> expresion) in state 174
WARNING: reduce/reduce conflict in state 175 resolved using rule (expresion -> expresion DIVIDIDO expresion)
WARNING: rejected rule (opcionpow -> expresion) in state 175
WARNING: reduce/reduce conflict in state 176 resolved using rule (expresion -> expresion MOD expresion)
WARNING: rejected rule (opcionpow -> expresion) in state 176
WARNING: reduce/reduce conflict in state 196 resolved using rule (opcionfor -> empty)
WARNING: rejected rule (listarreglo -> empty) in state 196
WARNING: reduce/reduce conflict in state 200 resolved using rule (arrtipos -> tipos)
WARNING: rejected rule (arreglos -> tipos) in state 200
WARNING: reduce/reduce conflict in state 218 resolved using rule (expresion -> opcionpow DPT DPT expresion)
WARNING: rejected rule (opcionpow -> expresion) in state 218
